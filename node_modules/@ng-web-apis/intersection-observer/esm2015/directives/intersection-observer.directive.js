/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
export class IntersectionObserverDirective extends IntersectionObserver {
    /**
     * @param {?} root
     * @param {?} rootMargin
     * @param {?} threshold
     */
    constructor(root, rootMargin, threshold) {
        super(entries => {
            this.callbacks.forEach((callback, element) => {
                /** @type {?} */
                const filtered = entries.filter(({ target }) => target === element);
                return filtered.length && callback(filtered, this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        });
        this.callbacks = new Map();
    }
    /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    observe(target, callback = () => { }) {
        super.observe(target);
        this.callbacks.set(target, callback);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    unobserve(target) {
        super.unobserve(target);
        this.callbacks.delete(target);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disconnect();
    }
}
IntersectionObserverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[waIntersectionObserver]',
            },] }
];
/** @nocollapse */
IntersectionObserverDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionRootMargin',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionThreshold',] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntersectionObserverDirective.prototype.callbacks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUVULE1BQU0sRUFFTixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFLNUQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLG9CQUFvQjs7Ozs7O0lBSW5FLFlBQzJDLElBQWdDLEVBQ2hDLFVBQXlCLEVBQzFCLFNBQXdCO1FBRTlELEtBQUssQ0FDRCxPQUFPLENBQUMsRUFBRTtZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFOztzQkFDbkMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDO2dCQUVqRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRDtZQUNJLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWE7WUFDaEMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztZQUN6QyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1NBQ3pDLENBQ0osQ0FBQztRQXBCVyxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXlDLENBQUM7SUFxQjlFLENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBQyxNQUFlLEVBQUUsV0FBeUMsR0FBRyxFQUFFLEdBQUUsQ0FBQztRQUN0RSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxNQUFlO1FBQ3JCLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7O1lBeENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2FBQ3ZDOzs7OzRDQU1RLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCOzRDQUNwQyxTQUFTLFNBQUMsMEJBQTBCOzRDQUNwQyxTQUFTLFNBQUMseUJBQXlCOzs7Ozs7O0lBTHhDLGtEQUE4RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBdHRyaWJ1dGUsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT3B0aW9uYWwsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SU5URVJTRUNUSU9OX1JPT1R9IGZyb20gJy4uL3Rva2Vucy9pbnRlcnNlY3Rpb24tcm9vdCc7XHJcbmltcG9ydCB7cm9vdE1hcmdpbkZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3Jvb3QtbWFyZ2luLWZhY3RvcnknO1xyXG5pbXBvcnQge3RocmVzaG9sZEZhY3Rvcnl9IGZyb20gJy4uL3V0aWxzL3RocmVzaG9sZC1mYWN0b3J5JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbd2FJbnRlcnNlY3Rpb25PYnNlcnZlcl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG4gICAgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFja3MgPSBuZXcgTWFwPEVsZW1lbnQsIEludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2s+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlRFUlNFQ1RJT05fUk9PVCkgcm9vdDogRWxlbWVudFJlZjxFbGVtZW50PiB8IG51bGwsXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FJbnRlcnNlY3Rpb25Sb290TWFyZ2luJykgcm9vdE1hcmdpbjogc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICBAQXR0cmlidXRlKCd3YUludGVyc2VjdGlvblRocmVzaG9sZCcpIHRocmVzaG9sZDogc3RyaW5nIHwgbnVsbCxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKFxyXG4gICAgICAgICAgICBlbnRyaWVzID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBlbnRyaWVzLmZpbHRlcigoe3RhcmdldH0pID0+IHRhcmdldCA9PT0gZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggJiYgY2FsbGJhY2soZmlsdGVyZWQsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogcm9vdE1hcmdpbkZhY3Rvcnkocm9vdE1hcmdpbiksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IHRocmVzaG9sZEZhY3RvcnkodGhyZXNob2xkKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG9ic2VydmUodGFyZ2V0OiBFbGVtZW50LCBjYWxsYmFjazogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjayA9ICgpID0+IHt9KSB7XHJcbiAgICAgICAgc3VwZXIub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICB1bm9ic2VydmUodGFyZ2V0OiBFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIudW5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZGVsZXRlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19