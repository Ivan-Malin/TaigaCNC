import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { AbstractTuiInteractive } from './interactive';
/**
 * Basic ControlValueAccessor class to build form components upon
 */
export declare abstract class AbstractTuiControl<T> extends AbstractTuiInteractive implements OnDestroy, OnInit, ControlValueAccessor {
    private readonly ngControl;
    protected readonly changeDetectorRef: ChangeDetectorRef;
    private previousInternalValue?;
    private onTouched;
    private onChange;
    protected readonly fallbackValue: T;
    protected readonly destroy$: Subject<void>;
    readOnly: boolean;
    pseudoInvalid: boolean | null;
    protected constructor(ngControl: NgControl | null, changeDetectorRef: ChangeDetectorRef);
    get computedInvalid(): boolean;
    get value(): T;
    get safeCurrentValue(): T;
    get invalid(): boolean;
    get valid(): boolean;
    get touched(): boolean;
    get disabled(): boolean;
    get control(): AbstractControl | null;
    get computedName(): string | number | null;
    protected get controlName(): string | number | null;
    private get rawValue();
    ngOnInit(): void;
    ngOnDestroy(): void;
    checkControlUpdate(): void;
    registerOnChange(onChange: (value: T) => void): void;
    registerOnTouched(onTouched: () => void): void;
    setDisabledState(): void;
    writeValue(value: T | null): void;
    protected abstract getFallbackValue(): T;
    protected updateFocused(focused: boolean): void;
    protected updateValue(value: T): void;
    protected valueIdenticalComparator(oldValue: T, newValue: T): boolean;
    private safeNgControlData;
    private controlMarkAsTouched;
    private controlSetValue;
    private refreshLocalValue;
}
