(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@taiga-ui/cdk/classes'), require('@taiga-ui/cdk/constants'), require('@taiga-ui/cdk/decorators'), require('@taiga-ui/cdk/utils/miscellaneous'), require('rxjs'), require('rxjs/operators'), require('@taiga-ui/cdk/services')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/abstract', ['exports', '@angular/core', '@angular/forms', '@taiga-ui/cdk/classes', '@taiga-ui/cdk/constants', '@taiga-ui/cdk/decorators', '@taiga-ui/cdk/utils/miscellaneous', 'rxjs', 'rxjs/operators', '@taiga-ui/cdk/services'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.abstract = {}), global.ng.core, global.ng.forms, global['taiga-ui'].cdk.classes, global['taiga-ui'].cdk.constants, global['taiga-ui'].cdk.decorators, global['taiga-ui'].cdk.utils.miscellaneous, global.rxjs, global.rxjs.operators, global['taiga-ui'].cdk.services));
}(this, (function (exports, core, forms, classes, constants, decorators, miscellaneous, rxjs, operators, services) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var TUI = 'tui_interactive_';
    /**
     * The most basic class for interactive components
     */
    var AbstractTuiInteractive = /** @class */ (function () {
        function AbstractTuiInteractive() {
            this.hovered = false;
            this.pressed = false;
            this.focusVisible = false;
            this.pseudoHovered = null;
            this.pseudoPressed = null;
            this.pseudoFocused = null;
            /**
             * Determines if component is focusable with keyboard.
             */
            this.focusable = true;
            this.nativeId = '';
            /**
             * Emits 'true' on focus and 'false' on blur.
             */
            this.focusedChange = new core.EventEmitter();
            this.pressedChange = new core.EventEmitter();
            this.hoveredChange = new core.EventEmitter();
            this.focusVisibleChange = new core.EventEmitter();
            this.autoIdString = "" + TUI + AbstractTuiInteractive_1.autoId++ + Date.now();
        }
        AbstractTuiInteractive_1 = AbstractTuiInteractive;
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedDisabled", {
            get: function () {
                return this.disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedHovered", {
            get: function () {
                return !this.computedDisabled && miscellaneous.fallbackValue(this.pseudoHovered, this.hovered);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedPressed", {
            get: function () {
                return !this.computedDisabled && miscellaneous.fallbackValue(this.pseudoPressed, this.pressed);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusable", {
            get: function () {
                return !this.computedDisabled && (this.focusable || this.focused);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocused", {
            get: function () {
                return !this.computedDisabled && miscellaneous.fallbackValue(this.pseudoFocused, this.focused);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusVisible", {
            get: function () {
                return (!this.computedDisabled && miscellaneous.fallbackValue(this.pseudoFocused, this.focusVisible));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "id", {
            get: function () {
                return !!this.nativeId ? this.nativeId : this.autoIdString;
            },
            enumerable: true,
            configurable: true
        });
        AbstractTuiInteractive.prototype.updateHovered = function (hovered) {
            if (this.hovered === hovered) {
                return;
            }
            this.hovered = hovered;
            this.hoveredChange.emit(hovered);
        };
        AbstractTuiInteractive.prototype.updatePressed = function (pressed) {
            if (this.pressed === pressed) {
                return;
            }
            this.pressed = pressed;
            this.pressedChange.emit(pressed);
        };
        AbstractTuiInteractive.prototype.updateFocused = function (focused) {
            this.focusedChange.emit(focused);
        };
        AbstractTuiInteractive.prototype.updateFocusVisible = function (focusVisible) {
            if (this.focusVisible === focusVisible) {
                return;
            }
            this.focusVisible = focusVisible;
            this.focusVisibleChange.emit(focusVisible);
        };
        var AbstractTuiInteractive_1;
        AbstractTuiInteractive.autoId = 0;
        __decorate([
            core.Input(),
            decorators.tuiDefaultProp()
        ], AbstractTuiInteractive.prototype, "pseudoHovered", void 0);
        __decorate([
            core.Input(),
            decorators.tuiDefaultProp()
        ], AbstractTuiInteractive.prototype, "pseudoPressed", void 0);
        __decorate([
            core.Input(),
            decorators.tuiDefaultProp()
        ], AbstractTuiInteractive.prototype, "pseudoFocused", void 0);
        __decorate([
            core.Input(),
            decorators.tuiDefaultProp()
        ], AbstractTuiInteractive.prototype, "focusable", void 0);
        __decorate([
            core.Input(),
            decorators.tuiDefaultProp()
        ], AbstractTuiInteractive.prototype, "nativeId", void 0);
        __decorate([
            core.Output()
        ], AbstractTuiInteractive.prototype, "focusedChange", void 0);
        __decorate([
            core.Output()
        ], AbstractTuiInteractive.prototype, "pressedChange", void 0);
        __decorate([
            core.Output()
        ], AbstractTuiInteractive.prototype, "hoveredChange", void 0);
        __decorate([
            core.Output()
        ], AbstractTuiInteractive.prototype, "focusVisibleChange", void 0);
        __decorate([
            core.HostBinding('class._disabled')
        ], AbstractTuiInteractive.prototype, "computedDisabled", null);
        __decorate([
            core.HostBinding('class._hovered')
        ], AbstractTuiInteractive.prototype, "computedHovered", null);
        __decorate([
            core.HostBinding('class._pressed')
        ], AbstractTuiInteractive.prototype, "computedPressed", null);
        __decorate([
            core.HostBinding('class._focused')
        ], AbstractTuiInteractive.prototype, "computedFocused", null);
        __decorate([
            core.HostBinding('class._focus-visible')
        ], AbstractTuiInteractive.prototype, "computedFocusVisible", null);
        AbstractTuiInteractive = AbstractTuiInteractive_1 = __decorate([
            core.Directive()
        ], AbstractTuiInteractive);
        return AbstractTuiInteractive;
    }());

    /**
     * Basic ControlValueAccessor class to build form components upon
     */
    var AbstractTuiControl = /** @class */ (function (_super) {
        __extends(AbstractTuiControl, _super);
        function AbstractTuiControl(ngControl, changeDetectorRef) {
            var _this = _super.call(this) || this;
            _this.ngControl = ngControl;
            _this.changeDetectorRef = changeDetectorRef;
            _this.onTouched = constants.EMPTY_FUNCTION;
            _this.onChange = constants.EMPTY_FUNCTION;
            _this.fallbackValue = _this.getFallbackValue();
            _this.destroy$ = new rxjs.Subject();
            _this.readOnly = false;
            _this.pseudoInvalid = null;
            if (_this.ngControl === null) {
                classes.tuiAssert.assert(false, "NgControl not injected in " + _this.constructor.name + "!\n", 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
            }
            else {
                _this.ngControl.valueAccessor = _this;
            }
            return _this;
        }
        Object.defineProperty(AbstractTuiControl.prototype, "computedInvalid", {
            get: function () {
                return (!this.readOnly &&
                    !this.disabled &&
                    (this.pseudoInvalid !== null
                        ? this.pseudoInvalid
                        : this.touched && this.invalid));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "value", {
            get: function () {
                return miscellaneous.fallbackValue(this.previousInternalValue, this.fallbackValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "safeCurrentValue", {
            get: function () {
                return miscellaneous.fallbackValue(this.rawValue, this.fallbackValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "invalid", {
            get: function () {
                return this.safeNgControlData(function (_a) {
                    var invalid = _a.invalid;
                    return invalid;
                }, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "valid", {
            get: function () {
                return this.safeNgControlData(function (_a) {
                    var valid = _a.valid;
                    return valid;
                }, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "touched", {
            get: function () {
                return this.safeNgControlData(function (_a) {
                    var touched = _a.touched;
                    return touched;
                }, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "disabled", {
            get: function () {
                return this.safeNgControlData(function (_a) {
                    var disabled = _a.disabled;
                    return disabled;
                }, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "control", {
            get: function () {
                return this.safeNgControlData(function (_a) {
                    var control = _a.control;
                    return control;
                }, null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "computedName", {
            get: function () {
                return this.controlName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "controlName", {
            get: function () {
                return this.ngControl && this.ngControl.name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "rawValue", {
            get: function () {
                var ngControl = this.ngControl;
                if (ngControl === null) {
                    return undefined;
                }
                return ngControl instanceof forms.NgModel && this.previousInternalValue === undefined
                    ? ngControl.viewModel
                    : ngControl.value;
            },
            enumerable: true,
            configurable: true
        });
        AbstractTuiControl.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.ngControl ||
                !this.ngControl.valueChanges ||
                !this.ngControl.statusChanges) {
                return;
            }
            rxjs.merge(this.ngControl.valueChanges, this.ngControl.statusChanges)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.refreshLocalValue(_this.safeCurrentValue);
            });
        };
        AbstractTuiControl.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        AbstractTuiControl.prototype.checkControlUpdate = function () {
            this.changeDetectorRef.markForCheck();
        };
        AbstractTuiControl.prototype.registerOnChange = function (onChange) {
            this.onChange = onChange;
        };
        AbstractTuiControl.prototype.registerOnTouched = function (onTouched) {
            this.onTouched = onTouched;
        };
        AbstractTuiControl.prototype.setDisabledState = function () {
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.writeValue = function (value) {
            this.refreshLocalValue(this.ngControl instanceof forms.NgModel && this.previousInternalValue === undefined
                ? this.ngControl.model
                : value);
        };
        AbstractTuiControl.prototype.updateFocused = function (focused) {
            if (!focused) {
                this.controlMarkAsTouched();
            }
            _super.prototype.updateFocused.call(this, focused);
        };
        AbstractTuiControl.prototype.updateValue = function (value) {
            if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
                return;
            }
            this.previousInternalValue = value;
            this.controlSetValue(value);
        };
        AbstractTuiControl.prototype.valueIdenticalComparator = function (oldValue, newValue) {
            return oldValue === newValue;
        };
        AbstractTuiControl.prototype.safeNgControlData = function (extractor, defaultFieldValue) {
            return miscellaneous.fallbackValue(this.ngControl && extractor(this.ngControl), defaultFieldValue);
        };
        AbstractTuiControl.prototype.controlMarkAsTouched = function () {
            this.onTouched();
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.controlSetValue = function (value) {
            this.onChange(value);
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.refreshLocalValue = function (value) {
            this.previousInternalValue = value;
            this.checkControlUpdate();
        };
        AbstractTuiControl.ctorParameters = function () { return [
            { type: forms.NgControl },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input(),
            core.HostBinding('class._readonly'),
            decorators.tuiDefaultProp()
        ], AbstractTuiControl.prototype, "readOnly", void 0);
        __decorate([
            core.Input(),
            decorators.tuiDefaultProp()
        ], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
        __decorate([
            core.HostBinding('class._invalid')
        ], AbstractTuiControl.prototype, "computedInvalid", null);
        AbstractTuiControl = __decorate([
            core.Directive()
        ], AbstractTuiControl);
        return AbstractTuiControl;
    }(AbstractTuiInteractive));

    var TuiController = /** @class */ (function () {
        function TuiController() {
            this.change$ = new rxjs.Subject();
        }
        TuiController.prototype.ngOnChanges = function () {
            this.change$.next();
        };
        return TuiController;
    }());

    var AbstractTuiDialogService = /** @class */ (function (_super) {
        __extends(AbstractTuiDialogService, _super);
        function AbstractTuiDialogService(idService) {
            var _this = _super.call(this, function (observer) { return _this.dialogs$.subscribe(observer); }) || this;
            _this.idService = idService;
            _this.dialogs$ = new rxjs.BehaviorSubject([]);
            return _this;
        }
        AbstractTuiDialogService.prototype.open = function (content, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            return new rxjs.Observable(function (observer) {
                var completeWith = function (result) {
                    observer.next(result);
                    observer.complete();
                };
                var dialog = __assign(__assign(__assign({}, _this.defaultOptions), options), { content: content,
                    completeWith: completeWith, $implicit: observer, component: _this.component, id: _this.idService.generate() });
                _this.dialogs$.next(__spread(_this.dialogs$.value, [dialog]));
                return function () {
                    _this.dialogs$.next(_this.dialogs$.value.filter(function (item) { return item !== dialog; }));
                };
            });
        };
        AbstractTuiDialogService.ctorParameters = function () { return [
            { type: services.TuiIdService, decorators: [{ type: core.Inject, args: [services.TuiIdService,] }] }
        ]; };
        AbstractTuiDialogService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(services.TuiIdService))
        ], AbstractTuiDialogService);
        return AbstractTuiDialogService;
    }(rxjs.Observable));

    var AbstractTuiMultipleControl = /** @class */ (function (_super) {
        __extends(AbstractTuiMultipleControl, _super);
        function AbstractTuiMultipleControl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractTuiMultipleControl.prototype.clear = function () {
            this.updateValue([]);
        };
        AbstractTuiMultipleControl.prototype.getFallbackValue = function () {
            return [];
        };
        AbstractTuiMultipleControl = __decorate([
            core.Directive()
        ], AbstractTuiMultipleControl);
        return AbstractTuiMultipleControl;
    }(AbstractTuiControl));

    var AbstractTuiNullableControl = /** @class */ (function (_super) {
        __extends(AbstractTuiNullableControl, _super);
        function AbstractTuiNullableControl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractTuiNullableControl.prototype.getFallbackValue = function () {
            return null;
        };
        AbstractTuiNullableControl = __decorate([
            core.Directive()
        ], AbstractTuiNullableControl);
        return AbstractTuiNullableControl;
    }(AbstractTuiControl));

    /**
     * Use this abstract class to create your own toggleable themes.
     * A component extending this class must have CSS variables definitions
     * and have ViewEncapsulation set to NONE. A boolean input allows to
     * switch theme on or off.
     */
    var AbstractTuiThemeSwitcher = /** @class */ (function () {
        function AbstractTuiThemeSwitcher(documentRef) {
            this.documentRef = documentRef;
            if (this.style !== null) {
                this.addTheme();
                return;
            }
            var styles = this.documentRef.head.querySelectorAll('style');
            this.constructor.style =
                styles[styles.length - 1];
        }
        Object.defineProperty(AbstractTuiThemeSwitcher.prototype, "style", {
            get: function () {
                return this.constructor.style;
            },
            enumerable: true,
            configurable: true
        });
        AbstractTuiThemeSwitcher.prototype.ngOnDestroy = function () {
            this.removeTheme();
        };
        AbstractTuiThemeSwitcher.prototype.addTheme = function () {
            if (this.style && !this.documentRef.head.contains(this.style)) {
                for (var i = this.style.attributes.length - 1; i >= 0; i--) {
                    this.style.removeAttribute(this.style.attributes[i].name);
                }
                this.documentRef.head.appendChild(this.style);
            }
        };
        AbstractTuiThemeSwitcher.prototype.removeTheme = function () {
            if (this.style && this.documentRef.head.contains(this.style)) {
                this.documentRef.head.removeChild(this.style);
            }
        };
        AbstractTuiThemeSwitcher.style = null;
        return AbstractTuiThemeSwitcher;
    }());

    exports.AbstractTuiControl = AbstractTuiControl;
    exports.AbstractTuiDialogService = AbstractTuiDialogService;
    exports.AbstractTuiInteractive = AbstractTuiInteractive;
    exports.AbstractTuiMultipleControl = AbstractTuiMultipleControl;
    exports.AbstractTuiNullableControl = AbstractTuiNullableControl;
    exports.AbstractTuiThemeSwitcher = AbstractTuiThemeSwitcher;
    exports.TuiController = TuiController;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-abstract.umd.js.map
