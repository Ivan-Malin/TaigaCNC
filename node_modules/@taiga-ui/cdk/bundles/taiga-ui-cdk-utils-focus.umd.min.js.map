{"version":3,"sources":["ng://@taiga-ui/cdk/utils/focus/get-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/set-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/is-native-keyboard-focusable.ts","ng://@taiga-ui/cdk/utils/focus/is-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/blur-native-focused.ts","ng://@taiga-ui/cdk/utils/focus/get-closest-keyboard-focusable.ts","ng://@taiga-ui/cdk/utils/focus/is-native-focused-in.ts","ng://@taiga-ui/cdk/utils/focus/is-native-mouse-focusable.ts","ng://@taiga-ui/cdk/utils/focus/move-focus.ts","ng://@taiga-ui/cdk/utils/focus/set-native-mouse-focused.ts"],"names":["getNativeFocused","documentRef","activeElement","shadowRoot","element","setNativeFocused","focused","preventScroll","focus","blur","isNativeKeyboardFocusable","hasAttribute","getAttribute","HTMLElement","isContentEditable","tagName","isNativeFocused","node","ownerDocument","initial","prev","root","treeWalker","createTreeWalker","NodeFilter","SHOW_ELEMENT","svgNodeFilter","currentNode","previousNode","nextNode","contains","nativeFocused","currentIndex","elements","step","length","Event","dispatchEvent","bubbles","cancelable","event_1","createEvent","initEvent"],"mappings":"udAKgBA,EAAiBC,GAC7B,IAAKA,EAAYC,gBAAkBD,EAAYC,cAAcC,WACzD,OAAOF,EAAYC,cAKvB,IAFA,IAAIE,EAAUH,EAAYC,cAAcC,WAAWD,cAE5CE,GAAWA,EAAQD,YACtBC,EAAUA,EAAQD,WAAWD,cAGjC,OAAOE,WCTKC,EACZD,EACAE,EACAC,QADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEID,EACAF,EAAQI,MAAM,CAACD,cAAaA,IAE5BH,EAAQK,gBCTAC,EAA0BN,GACtC,GAAIA,EAAQO,aAAa,aAAoD,OAArCP,EAAQQ,aAAa,YACzD,OAAO,EAGX,GACKR,aAAmBS,aAAeT,EAAQU,mBACN,MAArCV,EAAQQ,aAAa,YAErB,OAAO,EAGX,OAAQR,EAAQW,SACZ,IAAK,SACL,IAAK,SACL,IAAK,WACD,OAAO,EACX,IAAK,QACL,IAAK,QACD,OAAOX,EAAQO,aAAa,YAChC,IAAK,QACD,MAAwC,WAAjCP,EAAQQ,aAAa,QAChC,IAAK,IACL,IAAK,OACD,OAAOR,EAAQO,aAAa,QAChC,QACI,OAAO,YCtBHK,EAAgBC,GAC5B,QACMA,KAAUA,EAAKC,eAAiBlB,EAAiBiB,EAAKC,iBAAmBD,+BCNjDhB,GAC9B,IAAMC,EAAgBF,EAAiBC,GAEnCC,aAAyBW,aACzBR,EAAiBH,GAAe,2CCCpCiB,EACAC,EACAC,GAEA,QAHA,IAAAD,IAAAA,GAAA,IAGKC,EAAKH,cACN,OAAO,KAKX,IAAMI,EAAaD,EAAKH,cAAcK,iBAClCF,EACAG,WAAWC,aACXC,EAAAA,eACA,GAKJ,IAFAJ,EAAWK,YAAcR,EAElBC,EAAOE,EAAWM,eAAiBN,EAAWO,YAKjD,GAJIP,EAAWK,uBAAuBd,cAClCM,EAAUG,EAAWK,aAGrBjB,EAA0BS,GAC1B,OAAOA,EAIf,OAAO,4EChCuBF,GAE9B,IAAKA,EAAKC,gBAAkBD,EAAKa,SAC7B,OAAO,EAGX,IAAMC,EAAgB/B,EAAiBiB,EAAKC,eAE5C,OAAyB,OAAlBa,GAA0Bd,EAAKa,SAASC,oECdZ3B,GACnC,OACKA,EAAQO,aAAa,cACgB,OAArCP,EAAQQ,aAAa,aAAwBF,EAA0BN,0BCM5E4B,EACAC,EACAC,GAIA,IAFAF,GAAgBE,EAETF,GAAgB,GAAKA,EAAeC,EAASE,QAAQ,CAGxD,GAFA9B,EAAiB4B,EAASD,IAEtBhB,EAAgBiB,EAASD,IACzB,OAGJA,GAAgBE,0DCdpB9B,EACAE,EACAC,GAEA,QAFA,IAAAA,IAAAA,GAAA,GAEKH,EAAQc,cAAb,CAIA,GAAqB,mBAAVkB,MACPhC,EAAQiC,cAAc,IAAID,MAAM,YAAa,CAACE,SAAS,EAAMC,YAAY,SACtE,CACH,IAAMC,EAAQpC,EAAQc,cAAcuB,YAAY,SAEhDD,EAAME,UAAU,aAAa,GAAM,GACnCtC,EAAQiC,cAAcG,GAG1BnC,EAAiBD,EAASE,EAASC","sourcesContent":["/**\n * Returns current active element, including shadow dom\n *\n * @return element or null\n */\nexport function getNativeFocused(documentRef: Document): Element | null {\n    if (!documentRef.activeElement || !documentRef.activeElement.shadowRoot) {\n        return documentRef.activeElement;\n    }\n\n    let element = documentRef.activeElement.shadowRoot.activeElement;\n\n    while (element && element.shadowRoot) {\n        element = element.shadowRoot.activeElement;\n    }\n\n    return element;\n}\n","/**\n * Focuses or blurs and element\n *\n * @param element native element\n * @param focused boolean focused state\n * @param preventScroll optional flag to prevent native scroll to the element\n */\nexport function setNativeFocused(\n    element: HTMLOrSVGElement,\n    focused: boolean = true,\n    preventScroll: boolean = false,\n) {\n    if (focused) {\n        element.focus({preventScroll});\n    } else {\n        element.blur();\n    }\n}\n","/**\n * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to\n * only target natural focus order. Not checking the possibility of an element to\n * be focused, for example element can have display: none applied to it or any other\n * circumstances could prevent actual focus.\n */\nexport function isNativeKeyboardFocusable(element: Element): boolean {\n    if (element.hasAttribute('disabled') || element.getAttribute('tabIndex') === '-1') {\n        return false;\n    }\n\n    if (\n        (element instanceof HTMLElement && element.isContentEditable) ||\n        element.getAttribute('tabIndex') === '0'\n    ) {\n        return true;\n    }\n\n    switch (element.tagName) {\n        case 'BUTTON':\n        case 'SELECT':\n        case 'TEXTAREA':\n            return true;\n        case 'VIDEO':\n        case 'AUDIO':\n            return element.hasAttribute('controls');\n        case 'INPUT':\n            return element.getAttribute('type') !== 'hidden';\n        case 'A':\n        case 'LINK':\n            return element.hasAttribute('href');\n        default:\n            return false;\n    }\n}\n","import {getNativeFocused} from './get-native-focused';\n\n/**\n * Checks if element is focused.\n *\n * Could return true even after blur since element remains focused if you switch away from a browser tab.\n *\n * @param node or null (as a common return value of DOM nodes walking)\n * @return true if focused\n */\nexport function isNativeFocused(node: Node | null): boolean {\n    return (\n        !!node && !!node.ownerDocument && getNativeFocused(node.ownerDocument) === node\n    );\n}\n","import {getNativeFocused} from './get-native-focused';\nimport {setNativeFocused} from './set-native-focused';\n\n/**\n * Finds and blurs current active element, including shadow DOM\n */\nexport function blurNativeFocused(documentRef: Document) {\n    const activeElement = getNativeFocused(documentRef);\n\n    if (activeElement instanceof HTMLElement) {\n        setNativeFocused(activeElement, false);\n    }\n}\n","import {svgNodeFilter} from '@taiga-ui/cdk/constants';\nimport {isNativeKeyboardFocusable} from './is-native-keyboard-focusable';\n\n/**\n * Finds closest element that can be focused with a keyboard in theory\n *\n * @param initial current HTML element\n * @param prev should it look backwards instead (find item that will be focused with Shift + Tab)\n * @param root top Node limiting the search area\n */\nexport function getClosestKeyboardFocusable(\n    initial: HTMLElement,\n    prev: boolean = false,\n    root: Node,\n): HTMLElement | null {\n    if (!root.ownerDocument) {\n        return null;\n    }\n\n    // Deprecated but ony this overload works in IE\n    // Filter must be a function in IE, other modern browsers are compliant to this format\n    const treeWalker = root.ownerDocument.createTreeWalker(\n        root,\n        NodeFilter.SHOW_ELEMENT,\n        svgNodeFilter,\n        false,\n    );\n\n    treeWalker.currentNode = initial;\n\n    while (prev ? treeWalker.previousNode() : treeWalker.nextNode()) {\n        if (treeWalker.currentNode instanceof HTMLElement) {\n            initial = treeWalker.currentNode;\n        }\n\n        if (isNativeKeyboardFocusable(initial)) {\n            return initial;\n        }\n    }\n\n    return null;\n}\n","import {getNativeFocused} from './get-native-focused';\n\n/**\n * Checks if focused element is within given element.\n *\n * @param node\n * @return true if focused node is contained within element\n */\nexport function isNativeFocusedIn(node: Node): boolean {\n    // !node.contains - check for IE11\n    if (!node.ownerDocument || !node.contains) {\n        return false;\n    }\n\n    const nativeFocused = getNativeFocused(node.ownerDocument);\n\n    return nativeFocused !== null && node.contains(nativeFocused);\n}\n","import {isNativeKeyboardFocusable} from './is-native-keyboard-focusable';\n\nexport function isNativeMouseFocusable(element: Element): boolean {\n    return (\n        !element.hasAttribute('disabled') &&\n        (element.getAttribute('tabIndex') === '-1' || isNativeKeyboardFocusable(element))\n    );\n}\n","import {isNativeFocused} from './is-native-focused';\nimport {setNativeFocused} from './set-native-focused';\n\n/**\n * Utility method for moving focus in a list of elements\n *\n * @param currentIndex currently focused index\n * @param elements array of focusable elements\n * @param step a step to move focus by, typically -1 or 1\n */\nexport function moveFocus(\n    currentIndex: number,\n    elements: ReadonlyArray<HTMLElement>,\n    step: number,\n) {\n    currentIndex += step;\n\n    while (currentIndex >= 0 && currentIndex < elements.length) {\n        setNativeFocused(elements[currentIndex]);\n\n        if (isNativeFocused(elements[currentIndex])) {\n            return;\n        }\n\n        currentIndex += step;\n    }\n}\n","import {setNativeFocused} from './set-native-focused';\n\n/**\n * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})\n *\n * @param element\n * @param focused desired focused state\n * @param preventScroll optionally prevent native browser scroll after focus\n */\nexport function setNativeMouseFocused(\n    element: HTMLOrSVGElement & Element,\n    focused: boolean,\n    preventScroll: boolean = false,\n) {\n    if (!element.ownerDocument) {\n        return;\n    }\n\n    if (typeof Event === 'function') {\n        element.dispatchEvent(new Event('mousedown', {bubbles: true, cancelable: true}));\n    } else {\n        const event = element.ownerDocument.createEvent('Event');\n\n        event.initEvent('mousedown', true, true);\n        element.dispatchEvent(event);\n    }\n\n    setNativeFocused(element, focused, preventScroll);\n}\n"]}