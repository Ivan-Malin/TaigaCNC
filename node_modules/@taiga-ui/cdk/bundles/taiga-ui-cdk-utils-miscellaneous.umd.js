(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk/classes'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/utils/miscellaneous', ['exports', '@taiga-ui/cdk/classes', '@angular/forms'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].cdk = global['taiga-ui'].cdk || {}, global['taiga-ui'].cdk.utils = global['taiga-ui'].cdk.utils || {}, global['taiga-ui'].cdk.utils.miscellaneous = {}), global['taiga-ui'].cdk.classes, global.ng.forms));
}(this, (function (exports, classes, forms) { 'use strict';

    function easeInOutQuad(t) {
        classes.tuiAssert.assert(0 <= t && t <= 1, 'Input must be between 0 and 1 inclusive.');
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }

    function isPresent(value) {
        return value !== null && value !== undefined;
    }

    /**
     * If the value is null or undefined, returns default value
     * @param value
     * @param fallback alternative fallback
     */
    function fallbackValue(value, fallback) {
        return isPresent(value) ? value : fallback;
    }

    /**
     * Flattens two dimensional array and calculates resulting length
     *
     * @param array twi dimensional array
     */
    function flatLength(array) {
        return array.reduce(function (count, section) { return count + section.length; }, 0);
    }

    /**
     * Extracts original array from {@link QueryList} rather than
     * creating a copy like {@link QueryList.toArray} does.
     * @param queryList
     * @returns original array from {@link QueryList}.
     */
    function getOriginalArrayFromQueryList(queryList) {
        var array = [];
        queryList.find(function (_item, _index, originalArray) {
            array = originalArray;
            return true;
        });
        return array;
    }

    function identity(item) {
        return item;
    }

    function isNumber(value) {
        return typeof value === 'number';
    }

    function markControlAsTouchedAndValidate(control) {
        if (control instanceof forms.FormArray) {
            control.controls.forEach(function (nestedControl) {
                markControlAsTouchedAndValidate(nestedControl);
            });
            return;
        }
        if (control instanceof forms.FormGroup) {
            Object.values(control.controls).forEach(function (nestedControl) {
                markControlAsTouchedAndValidate(nestedControl);
            });
            return;
        }
        control.markAsTouched();
        control.updateValueAndValidity();
    }

    /**
     * Checks identity for nullable elements.
     *
     * @param a element a
     * @param b element b
     * @param handler called if both elements are not null
     * @return true if either both are null or they pass identity handler
     */
    function nullableSame(a, b, handler) {
        if (a === null) {
            return b === null;
        }
        if (b === null) {
            return false;
        }
        return handler(a, b);
    }

    function uniqBy(array, key) {
        return Array.from(array
            .reduce(function (map, item) { return (map.has(item[key]) ? map : map.set(item[key], item)); }, new Map())
            .values());
    }

    exports.easeInOutQuad = easeInOutQuad;
    exports.fallbackValue = fallbackValue;
    exports.flatLength = flatLength;
    exports.getOriginalArrayFromQueryList = getOriginalArrayFromQueryList;
    exports.identity = identity;
    exports.isNumber = isNumber;
    exports.isPresent = isPresent;
    exports.markControlAsTouchedAndValidate = markControlAsTouchedAndValidate;
    exports.nullableSame = nullableSame;
    exports.uniqBy = uniqBy;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-cdk-utils-miscellaneous.umd.js.map
