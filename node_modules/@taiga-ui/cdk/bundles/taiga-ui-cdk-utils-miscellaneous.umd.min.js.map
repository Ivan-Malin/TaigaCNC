{"version":3,"sources":["ng://@taiga-ui/cdk/utils/miscellaneous/is-present.ts","ng://@taiga-ui/cdk/utils/miscellaneous/ease-in-out-quad.ts","ng://@taiga-ui/cdk/utils/miscellaneous/fallback-value.ts","ng://@taiga-ui/cdk/utils/miscellaneous/flat-length.ts","ng://@taiga-ui/cdk/utils/miscellaneous/get-original-array-from-query-list.ts","ng://@taiga-ui/cdk/utils/miscellaneous/identity.ts","ng://@taiga-ui/cdk/utils/miscellaneous/is-number.ts","ng://@taiga-ui/cdk/utils/miscellaneous/mark-control-as-touched-and-validate.ts","ng://@taiga-ui/cdk/utils/miscellaneous/nullable-same.ts","ng://@taiga-ui/cdk/utils/miscellaneous/uniq-by.ts"],"names":["isPresent","value","t","tuiAssert","assert","fallback","array","reduce","count","section","length","queryList","find","_item","_index","originalArray","item","markControlAsTouchedAndValidate","control","FormArray","controls","forEach","nestedControl","FormGroup","Object","values","markAsTouched","updateValueAndValidity","a","b","handler","key","Array","from","map","has","set","Map"],"mappings":"yhBAAgBA,EAAaC,GACzB,OAAOA,MAAAA,2BCCmBC,GAG1B,OAFAC,EAAAA,UAAUC,OAAO,GAAKF,GAAKA,GAAK,EAAG,4CAE5BA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAlB,4BCEDD,EAA6BI,GAC1D,OAAOL,EAAUC,GAASA,EAAQI,yBCHXC,GACvB,OAAOA,EAAMC,QAAO,SAACC,EAAOC,GAAY,OAAAD,EAAQC,EAAQC,SAAQ,6CCGhEC,GAEA,IAAIL,EAA0B,GAQ9B,OANAK,EAAUC,MAAK,SAACC,EAAOC,EAAQC,GAG3B,OAFAT,EAAQS,GAED,KAGJT,uBCnBiBU,GACxB,OAAOA,uBCDcf,GACrB,MAAwB,iBAAVA,4DCCFgB,EAAgCC,GACxCA,aAAmBC,EAAAA,UACnBD,EAAQE,SAASC,SAAQ,SAAAC,GACrBL,EAAgCK,MAMpCJ,aAAmBK,EAAAA,UACnBC,OAAOC,OAAOP,EAAQE,UAAUC,SAAQ,SAAAC,GACpCL,EAAgCK,OAMxCJ,EAAQQ,gBACRR,EAAQS,mDCTRC,EACAC,EACAC,GAEA,OAAU,OAANF,EACa,OAANC,EAGD,OAANA,GAIGC,EAAQF,EAAGC,sBCtBlBvB,EACAyB,GAEA,OAAOC,MAAMC,KACT3B,EACKC,QACG,SAAC2B,EAAKlB,GAAS,OAACkB,EAAIC,IAAInB,EAAKe,IAAQG,EAAMA,EAAIE,IAAIpB,EAAKe,GAAMf,KAC9D,IAAIqB,KAEPZ","sourcesContent":["export function isPresent<T>(value?: T | null): value is T {\n    return value !== null && value !== undefined;\n}\n","import {tuiAssert} from '@taiga-ui/cdk/classes';\n\nexport function easeInOutQuad(t: number): number {\n    tuiAssert.assert(0 <= t && t <= 1, 'Input must be between 0 and 1 inclusive.');\n\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\n","import {isPresent} from './is-present';\n\n/**\n * If the value is null or undefined, returns default value\n * @param value\n * @param fallback alternative fallback\n */\nexport function fallbackValue<T>(value: T | null | undefined, fallback: T): T {\n    return isPresent(value) ? value : fallback;\n}\n","/**\n * Flattens two dimensional array and calculates resulting length\n *\n * @param array twi dimensional array\n */\nexport function flatLength(array: ReadonlyArray<ReadonlyArray<unknown>>): number {\n    return array.reduce((count, section) => count + section.length, 0);\n}\n","import {QueryList} from '@angular/core';\n\n/**\n * Extracts original array from {@link QueryList} rather than\n * creating a copy like {@link QueryList.toArray} does.\n * @param queryList\n * @returns original array from {@link QueryList}.\n */\nexport function getOriginalArrayFromQueryList<T>(\n    queryList: QueryList<T>,\n): ReadonlyArray<T> {\n    let array: ReadonlyArray<T> = [];\n\n    queryList.find((_item, _index, originalArray) => {\n        array = originalArray;\n\n        return true;\n    });\n\n    return array;\n}\n","export function identity<T>(item: T): T {\n    return item;\n}\n","export function isNumber(value: unknown): value is number {\n    return typeof value === 'number';\n}\n","import {AbstractControl, FormArray, FormGroup} from '@angular/forms';\n\nexport function markControlAsTouchedAndValidate(control: AbstractControl) {\n    if (control instanceof FormArray) {\n        control.controls.forEach(nestedControl => {\n            markControlAsTouchedAndValidate(nestedControl);\n        });\n\n        return;\n    }\n\n    if (control instanceof FormGroup) {\n        Object.values(control.controls).forEach(nestedControl => {\n            markControlAsTouchedAndValidate(nestedControl);\n        });\n\n        return;\n    }\n\n    control.markAsTouched();\n    control.updateValueAndValidity();\n}\n","import {TuiIdentityMatcher} from '@taiga-ui/cdk/types';\n\n/**\n * Checks identity for nullable elements.\n *\n * @param a element a\n * @param b element b\n * @param handler called if both elements are not null\n * @return true if either both are null or they pass identity handler\n */\nexport function nullableSame<T>(\n    a: T | null,\n    b: T | null,\n    handler: TuiIdentityMatcher<T>,\n): boolean {\n    if (a === null) {\n        return b === null;\n    }\n\n    if (b === null) {\n        return false;\n    }\n\n    return handler(a, b);\n}\n","export function uniqBy<T extends object>(\n    array: ReadonlyArray<T>,\n    key: keyof T,\n): ReadonlyArray<T> {\n    return Array.from(\n        array\n            .reduce(\n                (map, item) => (map.has(item[key]) ? map : map.set(item[key], item)),\n                new Map<T[keyof T], T>(),\n            )\n            .values(),\n    );\n}\n"]}