import { TuiYearLike } from '@taiga-ui/cdk/interfaces';
/**
 * Immutable year object
 * @nosideeffects
 */
export declare class TuiYear implements TuiYearLike {
    readonly year: number;
    constructor(year: number);
    get formattedYear(): string;
    get isLeapYear(): boolean;
    /**
     * Returns amount of leap years from year 0 to current
     */
    get absoluteLeapYears(): number;
    /**
     * Returns day of week offset of the beginning of the current year
     */
    get yearStartDaysOffset(): number;
    /**
     * Passed year is after current
     */
    yearBefore({ year }: TuiYear): boolean;
    /**
     * Passed year is the same or after current
     */
    yearSameOrBefore({ year }: TuiYear): boolean;
    /**
     * Passed year is the same as current
     */
    yearSame({ year }: TuiYear): boolean;
    /**
     * Passed year is either the same of before the current
     */
    yearSameOrAfter({ year }: TuiYear): boolean;
    /**
     * Passed year is before current
     */
    yearAfter({ year }: TuiYear): boolean;
    /**
     * Immutably offsets year
     */
    append({ year }: TuiYearLike, backwards?: boolean): TuiYear;
    toString(): string;
    toJSON(): string;
    /**
     * Checks year for validity
     */
    static isValidYear(year: number): boolean;
    /**
     * Check if passed year is a leap year
     */
    static isLeapYear(year: number): boolean;
    /**
     * Returns amount of leap years from year 0 to the passed one
     */
    static getAbsoluteLeapYears(year: number): number;
    /**
     * Returns day of week offset of the beginning of the passed year
     *
     * @param year
     * @param absoluteLeapYears amount of leap years prior to the passed one
     * @return offset in days
     */
    static getYearStartDaysOffset(year: number, absoluteLeapYears: number): number;
    static lengthBetween(from: TuiYear, to: TuiYear): number;
    /**
     * Normalizes year by clamping it between min and max years
     */
    protected static normalizeYearPart(year: number): number;
}
