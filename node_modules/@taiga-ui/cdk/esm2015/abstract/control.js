import { __decorate } from "tslib";
import { ChangeDetectorRef, Directive, HostBinding, Input, OnDestroy, OnInit, } from '@angular/core';
import { AbstractControl, ControlValueAccessor, NgControl, NgModel } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { fallbackValue } from '@taiga-ui/cdk/utils/miscellaneous';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { AbstractTuiInteractive } from './interactive';
/**
 * Basic ControlValueAccessor class to build form components upon
 */
let AbstractTuiControl = class AbstractTuiControl extends AbstractTuiInteractive {
    constructor(ngControl, changeDetectorRef) {
        super();
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        this.onTouched = EMPTY_FUNCTION;
        this.onChange = EMPTY_FUNCTION;
        this.fallbackValue = this.getFallbackValue();
        this.destroy$ = new Subject();
        this.readOnly = false;
        this.pseudoInvalid = null;
        if (this.ngControl === null) {
            tuiAssert.assert(false, `NgControl not injected in ${this.constructor.name}!\n`, 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
        }
        else {
            this.ngControl.valueAccessor = this;
        }
    }
    get computedInvalid() {
        return (!this.readOnly &&
            !this.disabled &&
            (this.pseudoInvalid !== null
                ? this.pseudoInvalid
                : this.touched && this.invalid));
    }
    get value() {
        return fallbackValue(this.previousInternalValue, this.fallbackValue);
    }
    get safeCurrentValue() {
        return fallbackValue(this.rawValue, this.fallbackValue);
    }
    get invalid() {
        return this.safeNgControlData(({ invalid }) => invalid, false);
    }
    get valid() {
        return this.safeNgControlData(({ valid }) => valid, false);
    }
    get touched() {
        return this.safeNgControlData(({ touched }) => touched, false);
    }
    get disabled() {
        return this.safeNgControlData(({ disabled }) => disabled, false);
    }
    get control() {
        return this.safeNgControlData(({ control }) => control, null);
    }
    get computedName() {
        return this.controlName;
    }
    get controlName() {
        return this.ngControl && this.ngControl.name;
    }
    get rawValue() {
        const { ngControl } = this;
        if (ngControl === null) {
            return undefined;
        }
        return ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? ngControl.viewModel
            : ngControl.value;
    }
    ngOnInit() {
        if (!this.ngControl ||
            !this.ngControl.valueChanges ||
            !this.ngControl.statusChanges) {
            return;
        }
        merge(this.ngControl.valueChanges, this.ngControl.statusChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.refreshLocalValue(this.safeCurrentValue);
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    checkControlUpdate() {
        this.changeDetectorRef.markForCheck();
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState() {
        this.checkControlUpdate();
    }
    writeValue(value) {
        this.refreshLocalValue(this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value);
    }
    updateFocused(focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        super.updateFocused(focused);
    }
    updateValue(value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    }
    valueIdenticalComparator(oldValue, newValue) {
        return oldValue === newValue;
    }
    safeNgControlData(extractor, defaultFieldValue) {
        return fallbackValue(this.ngControl && extractor(this.ngControl), defaultFieldValue);
    }
    controlMarkAsTouched() {
        this.onTouched();
        this.checkControlUpdate();
    }
    controlSetValue(value) {
        this.onChange(value);
        this.checkControlUpdate();
    }
    refreshLocalValue(value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    }
};
AbstractTuiControl.ctorParameters = () => [
    { type: NgControl },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    HostBinding('class._readonly'),
    tuiDefaultProp()
], AbstractTuiControl.prototype, "readOnly", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
__decorate([
    HostBinding('class._invalid')
], AbstractTuiControl.prototype, "computedInvalid", null);
AbstractTuiControl = __decorate([
    Directive()
], AbstractTuiControl);
export { AbstractTuiControl };
//# sourceMappingURL=data:application/json;base64,