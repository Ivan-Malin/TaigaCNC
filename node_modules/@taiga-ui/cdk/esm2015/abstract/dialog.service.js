import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { BehaviorSubject, Observable } from 'rxjs';
let AbstractTuiDialogService = class AbstractTuiDialogService extends Observable {
    constructor(idService) {
        super(observer => this.dialogs$.subscribe(observer));
        this.idService = idService;
        this.dialogs$ = new BehaviorSubject([]);
    }
    open(content, options = {}) {
        return new Observable(observer => {
            const completeWith = (result) => {
                observer.next(result);
                observer.complete();
            };
            const dialog = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), options), { content,
                completeWith, $implicit: observer, component: this.component, id: this.idService.generate() });
            this.dialogs$.next([...this.dialogs$.value, dialog]);
            return () => {
                this.dialogs$.next(this.dialogs$.value.filter(item => item !== dialog));
            };
        });
    }
};
AbstractTuiDialogService.ctorParameters = () => [
    { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
];
AbstractTuiDialogService = __decorate([
    Injectable(),
    __param(0, Inject(TuiIdService))
], AbstractTuiDialogService);
export { AbstractTuiDialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUdwRCxPQUFPLEVBQUMsZUFBZSxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUdqRCxJQUFzQix3QkFBd0IsR0FBOUMsTUFBc0Isd0JBQXVDLFNBQVEsVUFFcEU7SUFPRyxZQUMyQyxTQUF1QjtRQUU5RCxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRmQsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUgvQyxhQUFRLEdBQUcsSUFBSSxlQUFlLENBQStCLEVBQUUsQ0FBQyxDQUFDO0lBTXBGLENBQUM7SUFFRCxJQUFJLENBQ0EsT0FBeUQsRUFDekQsVUFBc0IsRUFBRTtRQUV4QixPQUFPLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBUyxFQUFFLEVBQUU7Z0JBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUM7WUFDRixNQUFNLE1BQU0saURBQ0wsSUFBSSxDQUFDLGNBQWMsR0FDbkIsT0FBTyxLQUNWLE9BQU87Z0JBQ1AsWUFBWSxFQUNaLFNBQVMsRUFBRSxRQUFRLEVBQ25CLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUN6QixFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FDaEMsQ0FBQztZQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRXJELE9BQU8sR0FBRyxFQUFFO2dCQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzVFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7O1lBL0J5RCxZQUFZLHVCQUE3RCxNQUFNLFNBQUMsWUFBWTs7QUFWTix3QkFBd0I7SUFEN0MsVUFBVSxFQUFFO0lBV0osV0FBQSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7R0FWUCx3QkFBd0IsQ0F5QzdDO1NBekNxQix3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUJhc2VEaWFsb2dDb250ZXh0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUdWlJZFNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHtUdWlEaWFsb2d9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlEaWFsb2dTZXJ2aWNlPFQgZXh0ZW5kcyB7fT4gZXh0ZW5kcyBPYnNlcnZhYmxlPFxuICAgIHJlYWRvbmx5IFR1aURpYWxvZzxULCBhbnk+W11cbj4ge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBjb21wb25lbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpRGlhbG9nPFQsIGFueT4+O1xuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IGRlZmF1bHRPcHRpb25zOiBUO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRpYWxvZ3MkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxyZWFkb25seSBUdWlEaWFsb2c8VCwgYW55PltdPihbXSk7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSWRTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IGlkU2VydmljZTogVHVpSWRTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBzdXBlcihvYnNlcnZlciA9PiB0aGlzLmRpYWxvZ3MkLnN1YnNjcmliZShvYnNlcnZlcikpO1xuICAgIH1cblxuICAgIG9wZW48Rz4oXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpQmFzZURpYWxvZ0NvbnRleHQ8Rz4gJiBUPixcbiAgICAgICAgb3B0aW9uczogUGFydGlhbDxUPiA9IHt9LFxuICAgICk6IE9ic2VydmFibGU8Rz4ge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGVXaXRoID0gKHJlc3VsdDogRykgPT4ge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZVdpdGgsXG4gICAgICAgICAgICAgICAgJGltcGxpY2l0OiBvYnNlcnZlcixcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkU2VydmljZS5nZW5lcmF0ZSgpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5kaWFsb2dzJC5uZXh0KFsuLi50aGlzLmRpYWxvZ3MkLnZhbHVlLCBkaWFsb2ddKTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ3MkLm5leHQodGhpcy5kaWFsb2dzJC52YWx1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBkaWFsb2cpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==