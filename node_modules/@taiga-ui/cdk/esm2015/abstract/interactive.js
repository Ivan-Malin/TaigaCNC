var AbstractTuiInteractive_1;
import { __decorate } from "tslib";
import { Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { fallbackValue } from '@taiga-ui/cdk/utils/miscellaneous';
const TUI = 'tui_interactive_';
/**
 * The most basic class for interactive components
 */
let AbstractTuiInteractive = AbstractTuiInteractive_1 = class AbstractTuiInteractive {
    constructor() {
        this.hovered = false;
        this.pressed = false;
        this.focusVisible = false;
        this.pseudoHovered = null;
        this.pseudoPressed = null;
        this.pseudoFocused = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = '';
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        this.pressedChange = new EventEmitter();
        this.hoveredChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
        this.autoIdString = `${TUI}${AbstractTuiInteractive_1.autoId++}${Date.now()}`;
    }
    get computedDisabled() {
        return this.disabled;
    }
    get computedHovered() {
        return !this.computedDisabled && fallbackValue(this.pseudoHovered, this.hovered);
    }
    get computedPressed() {
        return !this.computedDisabled && fallbackValue(this.pseudoPressed, this.pressed);
    }
    get computedFocusable() {
        return !this.computedDisabled && (this.focusable || this.focused);
    }
    get computedFocused() {
        return !this.computedDisabled && fallbackValue(this.pseudoFocused, this.focused);
    }
    get computedFocusVisible() {
        return (!this.computedDisabled && fallbackValue(this.pseudoFocused, this.focusVisible));
    }
    get id() {
        return !!this.nativeId ? this.nativeId : this.autoIdString;
    }
    updateHovered(hovered) {
        if (this.hovered === hovered) {
            return;
        }
        this.hovered = hovered;
        this.hoveredChange.emit(hovered);
    }
    updatePressed(pressed) {
        if (this.pressed === pressed) {
            return;
        }
        this.pressed = pressed;
        this.pressedChange.emit(pressed);
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
    updateFocusVisible(focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    }
};
AbstractTuiInteractive.autoId = 0;
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInteractive.prototype, "pseudoHovered", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInteractive.prototype, "pseudoPressed", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInteractive.prototype, "pseudoFocused", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInteractive.prototype, "focusable", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInteractive.prototype, "nativeId", void 0);
__decorate([
    Output()
], AbstractTuiInteractive.prototype, "focusedChange", void 0);
__decorate([
    Output()
], AbstractTuiInteractive.prototype, "pressedChange", void 0);
__decorate([
    Output()
], AbstractTuiInteractive.prototype, "hoveredChange", void 0);
__decorate([
    Output()
], AbstractTuiInteractive.prototype, "focusVisibleChange", void 0);
__decorate([
    HostBinding('class._disabled')
], AbstractTuiInteractive.prototype, "computedDisabled", null);
__decorate([
    HostBinding('class._hovered')
], AbstractTuiInteractive.prototype, "computedHovered", null);
__decorate([
    HostBinding('class._pressed')
], AbstractTuiInteractive.prototype, "computedPressed", null);
__decorate([
    HostBinding('class._focused')
], AbstractTuiInteractive.prototype, "computedFocused", null);
__decorate([
    HostBinding('class._focus-visible')
], AbstractTuiInteractive.prototype, "computedFocusVisible", null);
AbstractTuiInteractive = AbstractTuiInteractive_1 = __decorate([
    Directive()
], AbstractTuiInteractive);
export { AbstractTuiInteractive };
//# sourceMappingURL=data:application/json;base64,