/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 */
export class AbstractTuiThemeSwitcher {
    constructor(documentRef) {
        this.documentRef = documentRef;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        const styles = this.documentRef.head.querySelectorAll('style');
        this.constructor.style =
            styles[styles.length - 1];
    }
    get style() {
        return this.constructor.style;
    }
    ngOnDestroy() {
        this.removeTheme();
    }
    addTheme() {
        if (this.style && !this.documentRef.head.contains(this.style)) {
            for (let i = this.style.attributes.length - 1; i >= 0; i--) {
                this.style.removeAttribute(this.style.attributes[i].name);
            }
            this.documentRef.head.appendChild(this.style);
        }
    }
    removeTheme() {
        if (this.style && this.documentRef.head.contains(this.style)) {
            this.documentRef.head.removeChild(this.style);
        }
    }
}
AbstractTuiThemeSwitcher.style = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtc3dpdGNoZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsidGhlbWUtc3dpdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQWdCLHdCQUF3QjtJQUcxQyxZQUF1QyxXQUFxQjtRQUFyQixnQkFBVyxHQUFYLFdBQVcsQ0FBVTtRQUN4RCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1NBQ1Y7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsV0FBWSxDQUFDLEtBQUs7WUFDckQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQXlDLElBQUksQ0FBQyxXQUFZLENBQUMsS0FBSyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxRQUFRO1FBQ1osSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzRCxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0Q7WUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO0lBQ0wsQ0FBQztJQUVPLFdBQVc7UUFDZixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO0lBQ0wsQ0FBQzs7QUFyQ00sOEJBQUssR0FBNEIsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIFVzZSB0aGlzIGFic3RyYWN0IGNsYXNzIHRvIGNyZWF0ZSB5b3VyIG93biB0b2dnbGVhYmxlIHRoZW1lcy5cbiAqIEEgY29tcG9uZW50IGV4dGVuZGluZyB0aGlzIGNsYXNzIG11c3QgaGF2ZSBDU1MgdmFyaWFibGVzIGRlZmluaXRpb25zXG4gKiBhbmQgaGF2ZSBWaWV3RW5jYXBzdWxhdGlvbiBzZXQgdG8gTk9ORS4gQSBib29sZWFuIGlucHV0IGFsbG93cyB0b1xuICogc3dpdGNoIHRoZW1lIG9uIG9yIG9mZi5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0VHVpVGhlbWVTd2l0Y2hlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgc3RhdGljIHN0eWxlOiBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkb2N1bWVudFJlZjogRG9jdW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVGhlbWUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5kb2N1bWVudFJlZi5oZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG5cbiAgICAgICAgKDx0eXBlb2YgQWJzdHJhY3RUdWlUaGVtZVN3aXRjaGVyPnRoaXMuY29uc3RydWN0b3IpLnN0eWxlID1cbiAgICAgICAgICAgIHN0eWxlc1tzdHlsZXMubGVuZ3RoIC0gMV07XG4gICAgfVxuXG4gICAgZ2V0IHN0eWxlKCk6IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuICg8dHlwZW9mIEFic3RyYWN0VHVpVGhlbWVTd2l0Y2hlcj50aGlzLmNvbnN0cnVjdG9yKS5zdHlsZTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVUaGVtZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVGhlbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlICYmICF0aGlzLmRvY3VtZW50UmVmLmhlYWQuY29udGFpbnModGhpcy5zdHlsZSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0eWxlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLnN0eWxlLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZWYuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlVGhlbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlICYmIHRoaXMuZG9jdW1lbnRSZWYuaGVhZC5jb250YWlucyh0aGlzLnN0eWxlKSkge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlZi5oZWFkLnJlbW92ZUNoaWxkKHRoaXMuc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19