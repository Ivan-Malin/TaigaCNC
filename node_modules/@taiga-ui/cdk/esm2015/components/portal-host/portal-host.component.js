var TuiPortalHostComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ComponentFactory, ComponentRef, ElementRef, EmbeddedViewRef, Inject, Injector, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { TuiPortalService } from './portal.service';
const BLANK_CLIENT_RECT = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
};
/**
 * Host element for dynamically created portals, for example using {@link TuiDropdownDirective}.
 */
let TuiPortalHostComponent = TuiPortalHostComponent_1 = class TuiPortalHostComponent {
    constructor(viewContainerRef, elementRef, portalService) {
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        portalService.attach(this);
    }
    get clientRect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    addComponentChild(componentFactory, injector) {
        return this.viewContainerRef.createComponent(componentFactory, undefined, Injector.create({
            parent: injector,
            providers: [
                {
                    provide: TuiPortalHostComponent_1,
                    useValue: this,
                },
            ],
        }));
    }
    addTemplateChild(templateRef, context) {
        return this.viewContainerRef.createEmbeddedView(templateRef, context);
    }
    fixedPositionOffset() {
        return this.positionFixedOffsetRef
            ? this.positionFixedOffsetRef.nativeElement.getBoundingClientRect()
            : BLANK_CLIENT_RECT;
    }
};
TuiPortalHostComponent.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiPortalService, decorators: [{ type: Inject, args: [TuiPortalService,] }] }
];
__decorate([
    ViewChild('positionFixedOffset')
], TuiPortalHostComponent.prototype, "positionFixedOffsetRef", void 0);
TuiPortalHostComponent = TuiPortalHostComponent_1 = __decorate([
    Component({
        selector: 'tui-portal-host',
        template: "<div #positionFixedOffset class=\"position-fixed-offset\"></div>\n<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;height:100%;z-index:0}:host:before{content:'';display:block;overflow:hidden}.position-fixed-offset{position:fixed;left:0;top:0;pointer-events:none;visibility:hidden;width:100%;height:100%}"]
    }),
    __param(0, Inject(ViewContainerRef)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiPortalService))
], TuiPortalHostComponent);
export { TuiPortalHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGFsLWhvc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9jb21wb25lbnRzL3BvcnRhbC1ob3N0LyIsInNvdXJjZXMiOlsicG9ydGFsLWhvc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixVQUFVLEVBQ1YsZUFBZSxFQUNmLE1BQU0sRUFDTixRQUFRLEVBQ1IsV0FBVyxFQUNYLFNBQVMsRUFDVCxnQkFBZ0IsR0FDbkIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQsTUFBTSxpQkFBaUIsR0FBZTtJQUNsQyxNQUFNLEVBQUUsQ0FBQztJQUNULE1BQU0sRUFBRSxDQUFDO0lBQ1QsSUFBSSxFQUFFLENBQUM7SUFDUCxLQUFLLEVBQUUsQ0FBQztJQUNSLEdBQUcsRUFBRSxDQUFDO0lBQ04sS0FBSyxFQUFFLENBQUM7Q0FDWCxDQUFDO0FBRUY7O0dBRUc7QUFPSCxJQUFhLHNCQUFzQiw4QkFBbkMsTUFBYSxzQkFBc0I7SUFJL0IsWUFFcUIsZ0JBQWtDLEVBRWxDLFVBQW1DLEVBQzFCLGFBQStCO1FBSHhDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFFbEMsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFHcEQsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFRCxpQkFBaUIsQ0FDYixnQkFBcUMsRUFDckMsUUFBa0I7UUFFbEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUN4QyxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDWixNQUFNLEVBQUUsUUFBUTtZQUNoQixTQUFTLEVBQUU7Z0JBQ1A7b0JBQ0ksT0FBTyxFQUFFLHdCQUFzQjtvQkFDL0IsUUFBUSxFQUFFLElBQUk7aUJBQ2pCO2FBQ0o7U0FDSixDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7SUFFRCxnQkFBZ0IsQ0FBSSxXQUEyQixFQUFFLE9BQVc7UUFDeEQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxtQkFBbUI7UUFDZixPQUFPLElBQUksQ0FBQyxzQkFBc0I7WUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUU7WUFDbkUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBQzVCLENBQUM7Q0FDSixDQUFBOztZQXhDMEMsZ0JBQWdCLHVCQURsRCxNQUFNLFNBQUMsZ0JBQWdCO1lBR0ssVUFBVSx1QkFEdEMsTUFBTSxTQUFDLFVBQVU7WUFFdUIsZ0JBQWdCLHVCQUF4RCxNQUFNLFNBQUMsZ0JBQWdCOztBQVA1QjtJQURDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztzRUFDb0M7QUFGNUQsc0JBQXNCO0lBTmxDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxpQkFBaUI7UUFDM0IseUdBQTBDO1FBRTFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztLQUNsRCxDQUFDO0lBTU8sV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUV4QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVsQixXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0dBVHBCLHNCQUFzQixDQThDbEM7U0E5Q1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgQ29tcG9uZW50RmFjdG9yeSxcbiAgICBDb21wb25lbnRSZWYsXG4gICAgRWxlbWVudFJlZixcbiAgICBFbWJlZGRlZFZpZXdSZWYsXG4gICAgSW5qZWN0LFxuICAgIEluamVjdG9yLFxuICAgIFRlbXBsYXRlUmVmLFxuICAgIFZpZXdDaGlsZCxcbiAgICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpUG9ydGFsU2VydmljZX0gZnJvbSAnLi9wb3J0YWwuc2VydmljZSc7XG5cbmNvbnN0IEJMQU5LX0NMSUVOVF9SRUNUOiBDbGllbnRSZWN0ID0ge1xuICAgIGJvdHRvbTogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgd2lkdGg6IDAsXG59O1xuXG4vKipcbiAqIEhvc3QgZWxlbWVudCBmb3IgZHluYW1pY2FsbHkgY3JlYXRlZCBwb3J0YWxzLCBmb3IgZXhhbXBsZSB1c2luZyB7QGxpbmsgVHVpRHJvcGRvd25EaXJlY3RpdmV9LlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wb3J0YWwtaG9zdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3BvcnRhbC1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3BvcnRhbC1ob3N0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUG9ydGFsSG9zdENvbXBvbmVudCB7XG4gICAgQFZpZXdDaGlsZCgncG9zaXRpb25GaXhlZE9mZnNldCcpXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb3NpdGlvbkZpeGVkT2Zmc2V0UmVmPzogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlQb3J0YWxTZXJ2aWNlKSBwb3J0YWxTZXJ2aWNlOiBUdWlQb3J0YWxTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBwb3J0YWxTZXJ2aWNlLmF0dGFjaCh0aGlzKTtcbiAgICB9XG5cbiAgICBnZXQgY2xpZW50UmVjdCgpOiBDbGllbnRSZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIGFkZENvbXBvbmVudENoaWxkPEM+KFxuICAgICAgICBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PEM+LFxuICAgICAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgKTogQ29tcG9uZW50UmVmPEM+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQ8Qz4oXG4gICAgICAgICAgICBjb21wb25lbnRGYWN0b3J5LFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGluamVjdG9yLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBUdWlQb3J0YWxIb3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFkZFRlbXBsYXRlQ2hpbGQ8Qz4odGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPEM+LCBjb250ZXh0PzogQyk6IEVtYmVkZGVkVmlld1JlZjxDPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRlbXBsYXRlUmVmLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBmaXhlZFBvc2l0aW9uT2Zmc2V0KCk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbkZpeGVkT2Zmc2V0UmVmXG4gICAgICAgICAgICA/IHRoaXMucG9zaXRpb25GaXhlZE9mZnNldFJlZi5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICA6IEJMQU5LX0NMSUVOVF9SRUNUO1xuICAgIH1cbn1cbiJdfQ==