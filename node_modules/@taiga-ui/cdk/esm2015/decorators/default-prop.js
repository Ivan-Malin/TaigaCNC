import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * See {@link createPropDecorator} for more details.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
export function tuiDefaultProp(assertion, ...args) {
    return (target, key) => {
        const { name } = target.constructor;
        const errorGetDefaultMessage = errorGetDefault(key, name);
        const errorSetDefaultMessage = errorSetDefault(key, name);
        Object.defineProperty(target, key, {
            get() {
                tuiAssert.assert(false, errorGetDefaultMessage);
                return undefined;
            },
            set(initialValue) {
                const isValid = initialValue !== undefined;
                const errorMessage = errorSetDefaultInitial(key, name);
                let currentValue = initialValue;
                tuiAssert.assert(isValid, errorMessage);
                if (isValid && assertion) {
                    tuiAssert.assert(assertion.call(this, initialValue), `${String(key)} in ${name} received:`, initialValue, ...args);
                }
                Object.defineProperty(this, key, {
                    get() {
                        return currentValue;
                    },
                    set(value) {
                        const isValid = value !== undefined;
                        const backupValue = initialValue;
                        tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
                        if (isValid && assertion) {
                            tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                        }
                        currentValue = isValid ? value : backupValue;
                    },
                });
            },
        });
    };
}
function errorGetDefault(key, component) {
    return `Default value for ${String(key)} was not provided in ${component}, error in Taiga UI Angular Kit`;
}
function errorSetDefault(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, which is invalid input, using default value:`;
}
function errorSetDefaultInitial(key, component) {
    return `Undefined was passed as default value for ${String(key)} to ${component}, error in Taiga UI Angular Kit`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcm9wLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzLyIsInNvdXJjZXMiOlsiZGVmYXVsdC1wcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdoRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FDMUIsU0FBbUMsRUFDbkMsR0FBRyxJQUFXO0lBRWQsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNuQixNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNsQyxNQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUQsTUFBTSxzQkFBc0IsR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTFELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUMvQixHQUFHO2dCQUNDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7Z0JBRWhELE9BQU8sU0FBUyxDQUFDO1lBQ3JCLENBQUM7WUFDRCxHQUFHLENBQVUsWUFBa0I7Z0JBQzNCLE1BQU0sT0FBTyxHQUFHLFlBQVksS0FBSyxTQUFTLENBQUM7Z0JBQzNDLE1BQU0sWUFBWSxHQUFHLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxZQUFZLEdBQUcsWUFBWSxDQUFDO2dCQUVoQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFFeEMsSUFBSSxPQUFPLElBQUksU0FBUyxFQUFFO29CQUN0QixTQUFTLENBQUMsTUFBTSxDQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUNsQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLFlBQVksRUFDckMsWUFBWSxFQUNaLEdBQUcsSUFBSSxDQUNWLENBQUM7aUJBQ0w7Z0JBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO29CQUM3QixHQUFHO3dCQUNDLE9BQU8sWUFBWSxDQUFDO29CQUN4QixDQUFDO29CQUNELEdBQUcsQ0FBVSxLQUFXO3dCQUNwQixNQUFNLE9BQU8sR0FBRyxLQUFLLEtBQUssU0FBUyxDQUFDO3dCQUNwQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7d0JBRWpDLFNBQVMsQ0FBQyxNQUFNLENBQ1osT0FBTyxFQUNQLHNCQUFzQixFQUN0QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQ3RCLENBQUM7d0JBRUYsSUFBSSxPQUFPLElBQUksU0FBUyxFQUFFOzRCQUN0QixTQUFTLENBQUMsTUFBTSxDQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLFlBQVksRUFDckMsS0FBSyxFQUNMLEdBQUcsSUFBSSxDQUNWLENBQUM7eUJBQ0w7d0JBRUQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7b0JBQ2pELENBQUM7aUJBQ0osQ0FBQyxDQUFDO1lBQ1AsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQzVELE9BQU8scUJBQXFCLE1BQU0sQ0FDOUIsR0FBRyxDQUNOLHdCQUF3QixTQUFTLGlDQUFpQyxDQUFDO0FBQ3hFLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQzVELE9BQU8sMkJBQTJCLE1BQU0sQ0FDcEMsR0FBRyxDQUNOLE9BQU8sU0FBUyxnREFBZ0QsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxHQUFvQixFQUFFLFNBQWlCO0lBQ25FLE9BQU8sNkNBQTZDLE1BQU0sQ0FDdEQsR0FBRyxDQUNOLE9BQU8sU0FBUyxpQ0FBaUMsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0dWlBc3NlcnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvY2xhc3Nlcyc7XG5pbXBvcnQge1R1aUJvb2xlYW5IYW5kbGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcblxuLyoqXG4gKiBEZWNvcmF0b3IgZm9yIGNoZWNraW5nIGlucHV0IHZhbHVlcyBmb3IgdW5kZWZpbmVkLiBZb3UgY2FuIGFsc28gcGFzc1xuICogb3B0aW9uYWwgYXNzZXJ0aW9uIHRvIGNoZWNrIGlucHV0IGFnYWluc3QuXG4gKlxuICogU2VlIHtAbGluayBjcmVhdGVQcm9wRGVjb3JhdG9yfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIENBVVRJT046IFRoaXMgZGVjb3JhdG9yIG92ZXJ3cml0ZXMgb3RoZXIgZ2V0dGVycyBhbmQgc2V0dGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aURlZmF1bHRQcm9wPFQgZXh0ZW5kcyBvYmplY3QsIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBhc3NlcnRpb24/OiBUdWlCb29sZWFuSGFuZGxlcjxUW0tdPixcbiAgICAuLi5hcmdzOiBhbnlbXVxuKTogUHJvcGVydHlEZWNvcmF0b3Ige1xuICAgIHJldHVybiAodGFyZ2V0LCBrZXkpID0+IHtcbiAgICAgICAgY29uc3Qge25hbWV9ID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBlcnJvckdldERlZmF1bHRNZXNzYWdlID0gZXJyb3JHZXREZWZhdWx0KGtleSwgbmFtZSk7XG4gICAgICAgIGNvbnN0IGVycm9yU2V0RGVmYXVsdE1lc3NhZ2UgPSBlcnJvclNldERlZmF1bHQoa2V5LCBuYW1lKTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIGdldCgpOiB1bmRlZmluZWQge1xuICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoZmFsc2UsIGVycm9yR2V0RGVmYXVsdE1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodGhpczogVCwgaW5pdGlhbFZhbHVlOiBUW0tdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yU2V0RGVmYXVsdEluaXRpYWwoa2V5LCBuYW1lKTtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG4gICAgICAgICAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChpc1ZhbGlkLCBlcnJvck1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgYXNzZXJ0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24uY2FsbCh0aGlzLCBpbml0aWFsVmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7U3RyaW5nKGtleSl9IGluICR7bmFtZX0gcmVjZWl2ZWQ6YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICBnZXQoKTogVFtLXSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQodGhpczogVCwgdmFsdWU6IFRbS10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFja3VwVmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclNldERlZmF1bHRNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhiYWNrdXBWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBhc3NlcnRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24uY2FsbCh0aGlzLCB2YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke1N0cmluZyhrZXkpfSBpbiAke25hbWV9IHJlY2VpdmVkOmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGlzVmFsaWQgPyB2YWx1ZSA6IGJhY2t1cFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXJyb3JHZXREZWZhdWx0KGtleTogc3RyaW5nIHwgc3ltYm9sLCBjb21wb25lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBEZWZhdWx0IHZhbHVlIGZvciAke1N0cmluZyhcbiAgICAgICAga2V5LFxuICAgICl9IHdhcyBub3QgcHJvdmlkZWQgaW4gJHtjb21wb25lbnR9LCBlcnJvciBpbiBUYWlnYSBVSSBBbmd1bGFyIEtpdGA7XG59XG5cbmZ1bmN0aW9uIGVycm9yU2V0RGVmYXVsdChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgYXMgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB0byAke2NvbXBvbmVudH0sIHdoaWNoIGlzIGludmFsaWQgaW5wdXQsIHVzaW5nIGRlZmF1bHQgdmFsdWU6YDtcbn1cblxuZnVuY3Rpb24gZXJyb3JTZXREZWZhdWx0SW5pdGlhbChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgYXMgZGVmYXVsdCB2YWx1ZSBmb3IgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB0byAke2NvbXBvbmVudH0sIGVycm9yIGluIFRhaWdhIFVJIEFuZ3VsYXIgS2l0YDtcbn1cbiJdfQ==