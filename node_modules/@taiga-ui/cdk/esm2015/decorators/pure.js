/**
 * Implements lazy initialization for getter or memoization of a function call similar to pure {@link: Pipe}.
 * Replaces getter with its calculated value upon first call or keeps track of last call arguments and returned
 * value for function, skipping calculation when arguments are strictly the same.
 *
 * @throws error if used not on getter or function
 *
 * CAUTION: `this` is not available inside such functions/getters, they must be pure.
 */
export function tuiPure(_target, propertyKey, { get, enumerable, value }) {
    if (get) {
        return {
            enumerable,
            get() {
                const value = get.call(this);
                Object.defineProperty(this, propertyKey, { enumerable, value });
                return value;
            },
        };
    }
    if (typeof value !== 'function') {
        throw new Error('tuiPure can only be used with functions or getters');
    }
    const original = value;
    return {
        enumerable,
        get() {
            let previousArgs = [];
            let previousResult;
            const patched = (...args) => {
                if (previousArgs.length === args.length &&
                    args.every((arg, index) => arg === previousArgs[index])) {
                    return previousResult;
                }
                previousArgs = args;
                previousResult = original.apply(this, args);
                return previousResult;
            };
            Object.defineProperty(this, propertyKey, {
                value: patched,
            });
            return patched;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGVjb3JhdG9ycy8iLCJzb3VyY2VzIjpbInB1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsT0FBTyxDQUNuQixPQUFlLEVBQ2YsV0FBbUIsRUFDbkIsRUFBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBNkI7SUFFcEQsSUFBSSxHQUFHLEVBQUU7UUFDTCxPQUFPO1lBQ0gsVUFBVTtZQUNWLEdBQUc7Z0JBQ0MsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFN0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUMsVUFBVSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7Z0JBRTlELE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUM7U0FDSixDQUFDO0tBQ0w7SUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFVBQVUsRUFBRTtRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7S0FDekU7SUFFRCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFFdkIsT0FBTztRQUNILFVBQVU7UUFDVixHQUFHO1lBQ0MsSUFBSSxZQUFZLEdBQTJCLEVBQUUsQ0FBQztZQUM5QyxJQUFJLGNBQW1CLENBQUM7WUFFeEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQW9CLEVBQUUsRUFBRTtnQkFDeEMsSUFDSSxZQUFZLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNO29CQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN6RDtvQkFDRSxPQUFPLGNBQWMsQ0FBQztpQkFDekI7Z0JBRUQsWUFBWSxHQUFHLElBQUksQ0FBQztnQkFDcEIsY0FBYyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUU1QyxPQUFPLGNBQWMsQ0FBQztZQUMxQixDQUFDLENBQUM7WUFFRixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7Z0JBQ3JDLEtBQUssRUFBRSxPQUFPO2FBQ2pCLENBQUMsQ0FBQztZQUVILE9BQU8sT0FBYyxDQUFDO1FBQzFCLENBQUM7S0FDSixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW1wbGVtZW50cyBsYXp5IGluaXRpYWxpemF0aW9uIGZvciBnZXR0ZXIgb3IgbWVtb2l6YXRpb24gb2YgYSBmdW5jdGlvbiBjYWxsIHNpbWlsYXIgdG8gcHVyZSB7QGxpbms6IFBpcGV9LlxuICogUmVwbGFjZXMgZ2V0dGVyIHdpdGggaXRzIGNhbGN1bGF0ZWQgdmFsdWUgdXBvbiBmaXJzdCBjYWxsIG9yIGtlZXBzIHRyYWNrIG9mIGxhc3QgY2FsbCBhcmd1bWVudHMgYW5kIHJldHVybmVkXG4gKiB2YWx1ZSBmb3IgZnVuY3Rpb24sIHNraXBwaW5nIGNhbGN1bGF0aW9uIHdoZW4gYXJndW1lbnRzIGFyZSBzdHJpY3RseSB0aGUgc2FtZS5cbiAqXG4gKiBAdGhyb3dzIGVycm9yIGlmIHVzZWQgbm90IG9uIGdldHRlciBvciBmdW5jdGlvblxuICpcbiAqIENBVVRJT046IGB0aGlzYCBpcyBub3QgYXZhaWxhYmxlIGluc2lkZSBzdWNoIGZ1bmN0aW9ucy9nZXR0ZXJzLCB0aGV5IG11c3QgYmUgcHVyZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aVB1cmU8VD4oXG4gICAgX3RhcmdldDogT2JqZWN0LFxuICAgIHByb3BlcnR5S2V5OiBzdHJpbmcsXG4gICAge2dldCwgZW51bWVyYWJsZSwgdmFsdWV9OiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxUPixcbik6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPFQ+IHtcbiAgICBpZiAoZ2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlLFxuICAgICAgICAgICAgZ2V0KCk6IFQge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0LmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHlLZXksIHtlbnVtZXJhYmxlLCB2YWx1ZX0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndHVpUHVyZSBjYW4gb25seSBiZSB1c2VkIHdpdGggZnVuY3Rpb25zIG9yIGdldHRlcnMnKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnaW5hbCA9IHZhbHVlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW51bWVyYWJsZSxcbiAgICAgICAgZ2V0KCk6IFQge1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzQXJnczogUmVhZG9ubHlBcnJheTx1bmtub3duPiA9IFtdO1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzUmVzdWx0OiBhbnk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdGNoZWQgPSAoLi4uYXJnczogQXJyYXk8dW5rbm93bj4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQXJncy5sZW5ndGggPT09IGFyZ3MubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MuZXZlcnkoKGFyZywgaW5kZXgpID0+IGFyZyA9PT0gcHJldmlvdXNBcmdzW2luZGV4XSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByZXZpb3VzQXJncyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNSZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1Jlc3VsdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eUtleSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXRjaGVkLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXRjaGVkIGFzIGFueTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl19