import { __decorate, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostListener, Inject, Output, } from '@angular/core';
import { typedFromEvent, watch } from '@taiga-ui/cdk/observables';
import { TuiDestroyService, TuiDirectiveStylesService } from '@taiga-ui/cdk/services';
import { Observable } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
const ON = 'tuiAutofillOn';
const OFF = 'tuiAutofillOff';
const STYLE = `
@keyframes ${ON} {
    from {
        content: '1';
    }

    to {
        content: '2';
    }
}

@keyframes ${OFF} {
    from {
        content: '2';
    }

    to {
        content: '1';
    }
}`;
// @dynamic
let TuiAutofilledDirective = class TuiAutofilledDirective {
    constructor(directiveStyles, { nativeElement }, changeDetectorRef, destroy$) {
        this.tuiAutofilledChange = new EventEmitter();
        directiveStyles.addStyle(STYLE, 'TuiAutofilledDirective');
        // Subscribing to synthetic keydown event on page reload autofill in Chrome
        typedFromEvent(nativeElement, 'keydown')
            .pipe(take(1), takeUntil(destroy$), watch(changeDetectorRef))
            .subscribe();
    }
    onAnimationStart({ animationName }) {
        if (animationName === ON) {
            this.tuiAutofilledChange.emit(true);
        }
        else if (animationName === OFF) {
            this.tuiAutofilledChange.emit(false);
        }
    }
};
TuiAutofilledDirective.ctorParameters = () => [
    { type: TuiDirectiveStylesService, decorators: [{ type: Inject, args: [TuiDirectiveStylesService,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Output()
], TuiAutofilledDirective.prototype, "tuiAutofilledChange", void 0);
__decorate([
    HostListener('animationstart', ['$event'])
], TuiAutofilledDirective.prototype, "onAnimationStart", null);
TuiAutofilledDirective = __decorate([
    Directive({
        selector: 'input[tuiAutofilledChange]',
        host: {
            class: 'tui-autofill',
        },
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(TuiDirectiveStylesService)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(ChangeDetectorRef)),
    __param(3, Inject(TuiDestroyService))
], TuiAutofilledDirective);
export { TuiAutofilledDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZpbGxlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYXV0b2ZpbGxlZC8iLCJzb3VyY2VzIjpbImF1dG9maWxsZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixNQUFNLEVBQ04sTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxjQUFjLEVBQUUsS0FBSyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGlCQUFpQixFQUFFLHlCQUF5QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDcEYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQztBQUMzQixNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQztBQUM3QixNQUFNLEtBQUssR0FBRzthQUNELEVBQUU7Ozs7Ozs7Ozs7YUFVRixHQUFHOzs7Ozs7OztFQVFkLENBQUM7QUFFSCxXQUFXO0FBUVgsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFhL0IsWUFFSSxlQUEwQyxFQUN0QixFQUFDLGFBQWEsRUFBK0IsRUFDdEMsaUJBQW9DLEVBQ3BDLFFBQTBCO1FBaEJoRCx3QkFBbUIsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBa0J2RCxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRTFELDJFQUEyRTtRQUMzRSxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQzthQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUM1RCxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBckJELGdCQUFnQixDQUFDLEVBQUMsYUFBYSxFQUFpQjtRQUM1QyxJQUFJLGFBQWEsS0FBSyxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QzthQUFNLElBQUksYUFBYSxLQUFLLEdBQUcsRUFBRTtZQUM5QixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztDQWdCSixDQUFBOztZQVp3Qix5QkFBeUIsdUJBRHpDLE1BQU0sU0FBQyx5QkFBeUI7WUFFSSxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtZQUM0QixpQkFBaUIsdUJBQTlELE1BQU0sU0FBQyxpQkFBaUI7WUFDWSxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsaUJBQWlCOztBQWhCN0I7SUFEQyxNQUFNLEVBQUU7bUVBQ2tEO0FBRzNEO0lBREMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7OERBTzFDO0FBWFEsc0JBQXNCO0lBUGxDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMsSUFBSSxFQUFFO1lBQ0YsS0FBSyxFQUFFLGNBQWM7U0FDeEI7UUFDRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUNqQyxDQUFDO0lBZU8sV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUVqQyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNsQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBQ3pCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7R0FsQnJCLHNCQUFzQixDQTJCbEM7U0EzQlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0eXBlZEZyb21FdmVudCwgd2F0Y2h9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgVHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgT04gPSAndHVpQXV0b2ZpbGxPbic7XG5jb25zdCBPRkYgPSAndHVpQXV0b2ZpbGxPZmYnO1xuY29uc3QgU1RZTEUgPSBgXG5Aa2V5ZnJhbWVzICR7T059IHtcbiAgICBmcm9tIHtcbiAgICAgICAgY29udGVudDogJzEnO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgICAgY29udGVudDogJzInO1xuICAgIH1cbn1cblxuQGtleWZyYW1lcyAke09GRn0ge1xuICAgIGZyb20ge1xuICAgICAgICBjb250ZW50OiAnMic7XG4gICAgfVxuXG4gICAgdG8ge1xuICAgICAgICBjb250ZW50OiAnMSc7XG4gICAgfVxufWA7XG5cbi8vIEBkeW5hbWljXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R1aUF1dG9maWxsZWRDaGFuZ2VdJyxcbiAgICBob3N0OiB7XG4gICAgICAgIGNsYXNzOiAndHVpLWF1dG9maWxsJyxcbiAgICB9LFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQXV0b2ZpbGxlZERpcmVjdGl2ZSB7XG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpQXV0b2ZpbGxlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2FuaW1hdGlvbnN0YXJ0JywgWyckZXZlbnQnXSlcbiAgICBvbkFuaW1hdGlvblN0YXJ0KHthbmltYXRpb25OYW1lfTogQW5pbWF0aW9uRXZlbnQpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbk5hbWUgPT09IE9OKSB7XG4gICAgICAgICAgICB0aGlzLnR1aUF1dG9maWxsZWRDaGFuZ2UuZW1pdCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb25OYW1lID09PSBPRkYpIHtcbiAgICAgICAgICAgIHRoaXMudHVpQXV0b2ZpbGxlZENoYW5nZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2UpXG4gICAgICAgIGRpcmVjdGl2ZVN0eWxlczogVHVpRGlyZWN0aXZlU3R5bGVzU2VydmljZSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgKSB7XG4gICAgICAgIGRpcmVjdGl2ZVN0eWxlcy5hZGRTdHlsZShTVFlMRSwgJ1R1aUF1dG9maWxsZWREaXJlY3RpdmUnKTtcblxuICAgICAgICAvLyBTdWJzY3JpYmluZyB0byBzeW50aGV0aWMga2V5ZG93biBldmVudCBvbiBwYWdlIHJlbG9hZCBhdXRvZmlsbCBpbiBDaHJvbWVcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2tleWRvd24nKVxuICAgICAgICAgICAgLnBpcGUodGFrZSgxKSwgdGFrZVVudGlsKGRlc3Ryb3kkKSwgd2F0Y2goY2hhbmdlRGV0ZWN0b3JSZWYpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==