import { __decorate, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
export function nonNegativeFiniteAssertion(value) {
    return isFinite(value) && value >= 0;
}
export function volumeAssertion(volume) {
    return isFinite(volume) && volume >= 0 && volume <= 1;
}
let TuiMediaDirective = class TuiMediaDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.volume = 1;
        this.currentTimeChange = new EventEmitter();
        this.pausedChange = new EventEmitter();
        this.volumeChange = new EventEmitter();
        this.playbackRate = 1;
    }
    set playbackRateSetter(playbackRate) {
        this.updatePlaybackRate(playbackRate);
    }
    set currentTime(currentTime) {
        if (Math.abs(currentTime - this.currentTime) > 0.001) {
            this.elementRef.nativeElement.currentTime = currentTime;
        }
    }
    set paused(paused) {
        if (paused) {
            this.elementRef.nativeElement.pause();
        }
        else {
            this.elementRef.nativeElement.play();
            this.updatePlaybackRate(this.playbackRate);
        }
    }
    get paused() {
        return this.elementRef.nativeElement.paused;
    }
    get currentTime() {
        return this.elementRef.nativeElement.currentTime;
    }
    // @bad TODO: Make sure no other events can affect this like network issues etc.
    onPausedChange(paused) {
        this.pausedChange.emit(paused);
        this.updatePlaybackRate(this.playbackRate);
    }
    onVolumeChange() {
        this.volume = this.elementRef.nativeElement.volume;
        this.volumeChange.emit(this.volume);
    }
    onCurrentTimeChange() {
        this.currentTimeChange.emit(this.currentTime);
    }
    changeDetectionTrigger() {
        // @bad TODO: consider if other events need to trigger CD
    }
    updatePlaybackRate(playbackRate) {
        this.playbackRate = playbackRate;
        this.elementRef.nativeElement.playbackRate = this.playbackRate;
    }
};
TuiMediaDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
__decorate([
    Input(),
    HostBinding('volume'),
    tuiDefaultProp(volumeAssertion)
], TuiMediaDirective.prototype, "volume", void 0);
__decorate([
    Input('playbackRate'),
    tuiRequiredSetter(nonNegativeFiniteAssertion)
], TuiMediaDirective.prototype, "playbackRateSetter", null);
__decorate([
    Input(),
    tuiRequiredSetter(nonNegativeFiniteAssertion)
], TuiMediaDirective.prototype, "currentTime", null);
__decorate([
    Input()
], TuiMediaDirective.prototype, "paused", null);
__decorate([
    Output()
], TuiMediaDirective.prototype, "currentTimeChange", void 0);
__decorate([
    Output()
], TuiMediaDirective.prototype, "pausedChange", void 0);
__decorate([
    Output()
], TuiMediaDirective.prototype, "volumeChange", void 0);
__decorate([
    HostListener('ended', ['true']),
    HostListener('pause', ['true']),
    HostListener('play', ['false'])
], TuiMediaDirective.prototype, "onPausedChange", null);
__decorate([
    HostListener('volumechange')
], TuiMediaDirective.prototype, "onVolumeChange", null);
__decorate([
    HostListener('timeupdate'),
    HostListener('seeking'),
    HostListener('seeked')
], TuiMediaDirective.prototype, "onCurrentTimeChange", null);
__decorate([
    HostListener('durationchange')
], TuiMediaDirective.prototype, "changeDetectionTrigger", null);
TuiMediaDirective = __decorate([
    Directive({
        selector: 'video[tuiMedia], audio[tuiMedia]',
        exportAs: 'tuiMedia',
    }),
    __param(0, Inject(ElementRef))
], TuiMediaDirective);
export { TuiMediaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL21lZGlhLyIsInNvdXJjZXMiOlsibWVkaWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFM0UsTUFBTSxVQUFVLDBCQUEwQixDQUFDLEtBQWE7SUFDcEQsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFjO0lBQzFDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBTUQsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUF5QzFCLFlBRXFCLFVBQXdDO1FBQXhDLGVBQVUsR0FBVixVQUFVLENBQThCO1FBdkM3RCxXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBMkJGLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHL0MsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRzNDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUUzQyxpQkFBWSxHQUFHLENBQUMsQ0FBQztJQUt0QixDQUFDO0lBcENKLElBQUksa0JBQWtCLENBQUMsWUFBb0I7UUFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFJRCxJQUFJLFdBQVcsQ0FBQyxXQUFtQjtR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a0M7UUFDNUMsUUFBUSxFQUFFLFVBQVU7S0FDdkIsQ0FBQztJQTJDTyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtHQTFDZCxpQkFBaUIsQ0FxRjdCO1NBckZZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIHR1aVJlcXVpcmVkU2V0dGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RlY29yYXRvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9uTmVnYXRpdmVGaW5pdGVBc3NlcnRpb24odmFsdWU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPj0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZvbHVtZUFzc2VydGlvbih2b2x1bWU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc0Zpbml0ZSh2b2x1bWUpICYmIHZvbHVtZSA+PSAwICYmIHZvbHVtZSA8PSAxO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3ZpZGVvW3R1aU1lZGlhXSwgYXVkaW9bdHVpTWVkaWFdJyxcbiAgICBleHBvcnRBczogJ3R1aU1lZGlhJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTWVkaWFEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCd2b2x1bWUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCh2b2x1bWVBc3NlcnRpb24pXG4gICAgdm9sdW1lID0gMTtcblxuICAgIEBJbnB1dCgncGxheWJhY2tSYXRlJylcbiAgICBAdHVpUmVxdWlyZWRTZXR0ZXIobm9uTmVnYXRpdmVGaW5pdGVBc3NlcnRpb24pXG4gICAgc2V0IHBsYXliYWNrUmF0ZVNldHRlcihwbGF5YmFja1JhdGU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnVwZGF0ZVBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKG5vbk5lZ2F0aXZlRmluaXRlQXNzZXJ0aW9uKVxuICAgIHNldCBjdXJyZW50VGltZShjdXJyZW50VGltZTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhjdXJyZW50VGltZSAtIHRoaXMuY3VycmVudFRpbWUpID4gMC4wMDEpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBwYXVzZWQocGF1c2VkOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChwYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBhdXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5wbGF5KCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBsYXliYWNrUmF0ZSh0aGlzLnBsYXliYWNrUmF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBjdXJyZW50VGltZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgcGF1c2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdm9sdW1lQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBwcml2YXRlIHBsYXliYWNrUmF0ZSA9IDE7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTE1lZGlhRWxlbWVudD4sXG4gICAgKSB7fVxuXG4gICAgZ2V0IHBhdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBhdXNlZDtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFRpbWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmN1cnJlbnRUaW1lO1xuICAgIH1cblxuICAgIC8vIEBiYWQgVE9ETzogTWFrZSBzdXJlIG5vIG90aGVyIGV2ZW50cyBjYW4gYWZmZWN0IHRoaXMgbGlrZSBuZXR3b3JrIGlzc3VlcyBldGMuXG4gICAgQEhvc3RMaXN0ZW5lcignZW5kZWQnLCBbJ3RydWUnXSlcbiAgICBASG9zdExpc3RlbmVyKCdwYXVzZScsIFsndHJ1ZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ3BsYXknLCBbJ2ZhbHNlJ10pXG4gICAgb25QYXVzZWRDaGFuZ2UocGF1c2VkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMucGF1c2VkQ2hhbmdlLmVtaXQocGF1c2VkKTtcbiAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja1JhdGUodGhpcy5wbGF5YmFja1JhdGUpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3ZvbHVtZWNoYW5nZScpXG4gICAgb25Wb2x1bWVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMudm9sdW1lID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudm9sdW1lO1xuICAgICAgICB0aGlzLnZvbHVtZUNoYW5nZS5lbWl0KHRoaXMudm9sdW1lKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd0aW1ldXBkYXRlJylcbiAgICBASG9zdExpc3RlbmVyKCdzZWVraW5nJylcbiAgICBASG9zdExpc3RlbmVyKCdzZWVrZWQnKVxuICAgIG9uQ3VycmVudFRpbWVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVDaGFuZ2UuZW1pdCh0aGlzLmN1cnJlbnRUaW1lKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdkdXJhdGlvbmNoYW5nZScpXG4gICAgY2hhbmdlRGV0ZWN0aW9uVHJpZ2dlcigpIHtcbiAgICAgICAgLy8gQGJhZCBUT0RPOiBjb25zaWRlciBpZiBvdGhlciBldmVudHMgbmVlZCB0byB0cmlnZ2VyIENEXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wbGF5YmFja1JhdGUgPSBwbGF5YmFja1JhdGU7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBsYXliYWNrUmF0ZSA9IHRoaXMucGxheWJhY2tSYXRlO1xuICAgIH1cbn1cbiJdfQ==