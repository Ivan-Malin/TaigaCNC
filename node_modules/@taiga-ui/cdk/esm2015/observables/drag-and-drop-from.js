import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { concat, merge } from 'rxjs';
import { endWith, first, map, repeat, takeWhile } from 'rxjs/operators';
import { mouseDragFinishFrom } from './mouse-drag-finish-from';
import { typedFromEvent } from './typed-from-event';
export class TuiDragState {
    constructor(stage, event) {
        this.stage = stage;
        this.event = event;
    }
}
export function dragAndDropFrom(element) {
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new Error('element does not have ownerDocument');
    }
    return concat(typedFromEvent(element, 'mousedown').pipe(first(), map(event => new TuiDragState(0 /* Start */, event))), merge(typedFromEvent(ownerDocument, 'mousemove').pipe(map(event => new TuiDragState(1 /* Continues */, event))), mouseDragFinishFrom(ownerDocument).pipe(first(), map(event => new TuiDragState(2 /* End */, event)), endWith(null))).pipe(takeWhile(isPresent))).pipe(repeat());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1mcm9tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImRyYWctYW5kLWRyb3AtZnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDNUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFRbEQsTUFBTSxPQUFPLFlBQVk7SUFDckIsWUFBcUIsS0FBbUIsRUFBVyxLQUFpQjtRQUEvQyxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQVcsVUFBSyxHQUFMLEtBQUssQ0FBWTtJQUFHLENBQUM7Q0FDM0U7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQWdCO0lBQzVDLE1BQU0sRUFBQyxhQUFhLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFFaEMsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDMUQ7SUFFRCxPQUFPLE1BQU0sQ0FDVCxjQUFjLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDckMsS0FBSyxFQUFFLEVBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLGdCQUFxQixLQUFLLENBQUMsQ0FBQyxDQUM1RCxFQUNELEtBQUssQ0FDRCxjQUFjLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLG9CQUF5QixLQUFLLENBQUMsQ0FBQyxDQUNoRSxFQUNELG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDbkMsS0FBSyxFQUFFLEVBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLGNBQW1CLEtBQUssQ0FBQyxDQUFDLEVBQ3ZELE9BQU8sQ0FBc0IsSUFBSSxDQUFDLENBQ3JDLENBQ0osQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQy9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNQcmVzZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtjb25jYXQsIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZW5kV2l0aCwgZmlyc3QsIG1hcCwgcmVwZWF0LCB0YWtlV2hpbGV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7bW91c2VEcmFnRmluaXNoRnJvbX0gZnJvbSAnLi9tb3VzZS1kcmFnLWZpbmlzaC1mcm9tJztcbmltcG9ydCB7dHlwZWRGcm9tRXZlbnR9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIFR1aURyYWdTdGFnZSB7XG4gICAgU3RhcnQsXG4gICAgQ29udGludWVzLFxuICAgIEVuZCxcbn1cblxuZXhwb3J0IGNsYXNzIFR1aURyYWdTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgc3RhZ2U6IFR1aURyYWdTdGFnZSwgcmVhZG9ubHkgZXZlbnQ6IE1vdXNlRXZlbnQpIHt9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmFnQW5kRHJvcEZyb20oZWxlbWVudDogRWxlbWVudCk6IE9ic2VydmFibGU8VHVpRHJhZ1N0YXRlPiB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VsZW1lbnQgZG9lcyBub3QgaGF2ZSBvd25lckRvY3VtZW50Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmNhdChcbiAgICAgICAgdHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgJ21vdXNlZG93bicpLnBpcGUoXG4gICAgICAgICAgICBmaXJzdCgpLFxuICAgICAgICAgICAgbWFwKGV2ZW50ID0+IG5ldyBUdWlEcmFnU3RhdGUoVHVpRHJhZ1N0YWdlLlN0YXJ0LCBldmVudCkpLFxuICAgICAgICApLFxuICAgICAgICBtZXJnZShcbiAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnKS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcChldmVudCA9PiBuZXcgVHVpRHJhZ1N0YXRlKFR1aURyYWdTdGFnZS5Db250aW51ZXMsIGV2ZW50KSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbW91c2VEcmFnRmluaXNoRnJvbShvd25lckRvY3VtZW50KS5waXBlKFxuICAgICAgICAgICAgICAgIGZpcnN0KCksXG4gICAgICAgICAgICAgICAgbWFwKGV2ZW50ID0+IG5ldyBUdWlEcmFnU3RhdGUoVHVpRHJhZ1N0YWdlLkVuZCwgZXZlbnQpKSxcbiAgICAgICAgICAgICAgICBlbmRXaXRoPFR1aURyYWdTdGF0ZSB8IG51bGw+KG51bGwpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKS5waXBlKHRha2VXaGlsZShpc1ByZXNlbnQpKSxcbiAgICApLnBpcGUocmVwZWF0KCkpO1xufVxuIl19