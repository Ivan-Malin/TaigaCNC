import { isNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { concat, merge } from 'rxjs';
import { distinctUntilChanged, filter, ignoreElements, mapTo, repeat, shareReplay, startWith, switchMapTo, take, withLatestFrom, } from 'rxjs/operators';
import { tuiIsAlive } from './is-alive';
import { typedFromEvent } from './typed-from-event';
let documentMouseUpIsAlive$;
let documentMouseDownIsAlive$;
export function focusVisibleObservable(element) {
    const elementBlur$ = typedFromEvent(element, 'blur');
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new Error('element does not have ownerDocument');
    }
    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
        documentMouseUpIsAlive$ = typedFromEvent(ownerDocument, 'mouseup', {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay(1));
        documentMouseDownIsAlive$ = typedFromEvent(ownerDocument, 'mousedown', {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay(1));
    }
    return merge(
    // focus events excluding ones that came right after mouse action
    concat(typedFromEvent(element, 'focus').pipe(take(1)), 
    // filtering out blur events when element remains focused so that we ignore browser tab focus loss
    elementBlur$.pipe(filter(() => !isNativeFocused(element)), take(1), ignoreElements())).pipe(repeat(), withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, (_event, elementActual, documentActual) => elementActual || documentActual), filter(isUserFocus => !isUserFocus))).pipe(switchMapTo(elementBlur$.pipe(mapTo(false), take(1), startWith(true))), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImZvY3VzLXZpc2libGUtb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sY0FBYyxFQUNkLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxFQUNKLGNBQWMsR0FDakIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxJQUFJLHVCQUE0QyxDQUFDO0FBQ2pELElBQUkseUJBQThDLENBQUM7QUFFbkQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE9BQWdCO0lBQ25ELE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckQsTUFBTSxFQUFDLGFBQWEsRUFBQyxHQUFHLE9BQU8sQ0FBQztJQUVoQyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUMxRDtJQUVELElBQUksQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLHVCQUF1QixFQUFFO1FBQ3hELHVCQUF1QixHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFO1lBQy9ELE9BQU8sRUFBRSxJQUFJO1NBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELHlCQUF5QixHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFO1lBQ25FLE9BQU8sRUFBRSxJQUFJO1NBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzNEO0lBRUQsT0FBTyxLQUFLO0lBQ1IsaUVBQWlFO0lBQ2pFLE1BQU0sQ0FDRixjQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsa0dBQWtHO0lBQ2xHLFlBQVksQ0FBQyxJQUFJLENBQ2IsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxjQUFjLEVBQUUsQ0FDbkIsQ0FDSixDQUFDLElBQUksQ0FDRixNQUFNLEVBQUUsRUFDUixjQUFjLENBQ1YseUJBQXlCLEVBQ3pCLHVCQUF1QixFQUN2QixDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLEVBQUUsQ0FDdEMsYUFBYSxJQUFJLGNBQWMsQ0FDdEMsRUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUN0QyxDQUNKLENBQUMsSUFBSSxDQUNGLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDdEUsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzTmF0aXZlRm9jdXNlZH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9mb2N1cyc7XG5pbXBvcnQge2NvbmNhdCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBmaWx0ZXIsXG4gICAgaWdub3JlRWxlbWVudHMsXG4gICAgbWFwVG8sXG4gICAgcmVwZWF0LFxuICAgIHNoYXJlUmVwbGF5LFxuICAgIHN0YXJ0V2l0aCxcbiAgICBzd2l0Y2hNYXBUbyxcbiAgICB0YWtlLFxuICAgIHdpdGhMYXRlc3RGcm9tLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge3R1aUlzQWxpdmV9IGZyb20gJy4vaXMtYWxpdmUnO1xuaW1wb3J0IHt0eXBlZEZyb21FdmVudH0gZnJvbSAnLi90eXBlZC1mcm9tLWV2ZW50JztcblxubGV0IGRvY3VtZW50TW91c2VVcElzQWxpdmUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xubGV0IGRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbmV4cG9ydCBmdW5jdGlvbiBmb2N1c1Zpc2libGVPYnNlcnZhYmxlKGVsZW1lbnQ6IEVsZW1lbnQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBlbGVtZW50Qmx1ciQgPSB0eXBlZEZyb21FdmVudChlbGVtZW50LCAnYmx1cicpO1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50fSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlbGVtZW50IGRvZXMgbm90IGhhdmUgb3duZXJEb2N1bWVudCcpO1xuICAgIH1cblxuICAgIGlmICghZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCB8fCAhZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQpIHtcbiAgICAgICAgZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQgPSB0eXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHtcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgIH0pLnBpcGUodHVpSXNBbGl2ZSgpLCBzdGFydFdpdGgoZmFsc2UpLCBzaGFyZVJlcGxheSgxKSk7XG4gICAgICAgIGRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQgPSB0eXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCAnbW91c2Vkb3duJywge1xuICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgfSkucGlwZSh0dWlJc0FsaXZlKCksIHN0YXJ0V2l0aChmYWxzZSksIHNoYXJlUmVwbGF5KDEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICAgIC8vIGZvY3VzIGV2ZW50cyBleGNsdWRpbmcgb25lcyB0aGF0IGNhbWUgcmlnaHQgYWZ0ZXIgbW91c2UgYWN0aW9uXG4gICAgICAgIGNvbmNhdChcbiAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdmb2N1cycpLnBpcGUodGFrZSgxKSksXG4gICAgICAgICAgICAvLyBmaWx0ZXJpbmcgb3V0IGJsdXIgZXZlbnRzIHdoZW4gZWxlbWVudCByZW1haW5zIGZvY3VzZWQgc28gdGhhdCB3ZSBpZ25vcmUgYnJvd3NlciB0YWIgZm9jdXMgbG9zc1xuICAgICAgICAgICAgZWxlbWVudEJsdXIkLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKCgpID0+ICFpc05hdGl2ZUZvY3VzZWQoZWxlbWVudCkpLFxuICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgaWdub3JlRWxlbWVudHMoKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIHJlcGVhdCgpLFxuICAgICAgICAgICAgd2l0aExhdGVzdEZyb20oXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCxcbiAgICAgICAgICAgICAgICBkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCxcbiAgICAgICAgICAgICAgICAoX2V2ZW50LCBlbGVtZW50QWN0dWFsLCBkb2N1bWVudEFjdHVhbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudEFjdHVhbCB8fCBkb2N1bWVudEFjdHVhbCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmaWx0ZXIoaXNVc2VyRm9jdXMgPT4gIWlzVXNlckZvY3VzKSxcbiAgICAgICAgKSxcbiAgICApLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcFRvKGVsZW1lbnRCbHVyJC5waXBlKG1hcFRvKGZhbHNlKSwgdGFrZSgxKSwgc3RhcnRXaXRoKHRydWUpKSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcbn1cbiJdfQ==