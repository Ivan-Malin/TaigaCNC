import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, NgZone } from '@angular/core';
import { tuiZoneOptimized, typedFromEvent } from '@taiga-ui/cdk/observables';
import { getActualTarget } from '@taiga-ui/cdk/utils/dom';
import { merge } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, startWith, switchMap, take, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
// @dynamic
let TuiHoveredService = class TuiHoveredService {
    constructor(documentRef, ngZone) {
        this.ngZone = ngZone;
        this.documentEvents$ = merge(typedFromEvent(documentRef, 'mousemove'), typedFromEvent(documentRef, 'touchend'));
    }
    createHovered$(target, options = {}) {
        return merge(typedFromEvent(target, 'mouseenter', options), typedFromEvent(target, 'touchstart', options)).pipe(switchMap(() => merge(typedFromEvent(target, 'mouseleave', options), this.documentEvents$.pipe(filter(event => !target.contains(getActualTarget(event))), tuiZoneOptimized(this.ngZone), take(1))).pipe(mapTo(false), startWith(true))), distinctUntilChanged());
    }
};
TuiHoveredService.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
];
TuiHoveredService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiHoveredService_Factory() { return new TuiHoveredService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone)); }, token: TuiHoveredService, providedIn: "root" });
TuiHoveredService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __param(0, Inject(DOCUMENT)),
    __param(1, Inject(NgZone))
], TuiHoveredService);
export { TuiHoveredService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXJlZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImhvdmVyZWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0UsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsSUFBSSxHQUNQLE1BQU0sZ0JBQWdCLENBQUM7OztBQUV4QixXQUFXO0FBSVgsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFHMUIsWUFDc0IsV0FBcUIsRUFDTixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUUvQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FDeEIsY0FBYyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFDeEMsY0FBYyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FDMUMsQ0FBQztJQUNOLENBQUM7SUFFRCxjQUFjLENBQ1YsTUFBZSxFQUNmLFVBQW1DLEVBQUU7UUFFckMsT0FBTyxLQUFLLENBQ1IsY0FBYyxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQzdDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUNoRCxDQUFDLElBQUksQ0FDRixTQUFTLENBQUMsR0FBRyxFQUFFLENBQ1gsS0FBSyxDQUNELGNBQWMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxFQUM3QyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ3pELGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDN0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNWLENBQ0osQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN4QyxFQUNELG9CQUFvQixFQUFFLENBQ3pCLENBQUM7SUFDTixDQUFDO0NBQ0osQ0FBQTs7WUE5QnNDLFFBQVEsdUJBQXRDLE1BQU0sU0FBQyxRQUFRO1lBQ3lCLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxNQUFNOzs7QUFMVCxpQkFBaUI7SUFIN0IsVUFBVSxDQUFDO1FBQ1IsVUFBVSxFQUFFLE1BQU07S0FDckIsQ0FBQztJQUtPLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2hCLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0dBTFYsaUJBQWlCLENBa0M3QjtTQWxDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVpvbmVPcHRpbWl6ZWQsIHR5cGVkRnJvbUV2ZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7Z2V0QWN0dWFsVGFyZ2V0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgZmlsdGVyLFxuICAgIG1hcFRvLFxuICAgIHN0YXJ0V2l0aCxcbiAgICBzd2l0Y2hNYXAsXG4gICAgdGFrZSxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSG92ZXJlZFNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnRFdmVudHMkOiBPYnNlcnZhYmxlPEV2ZW50PjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgICkge1xuICAgICAgICB0aGlzLmRvY3VtZW50RXZlbnRzJCA9IG1lcmdlKFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZG9jdW1lbnRSZWYsICdtb3VzZW1vdmUnKSxcbiAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCAndG91Y2hlbmQnKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjcmVhdGVIb3ZlcmVkJChcbiAgICAgICAgdGFyZ2V0OiBFbGVtZW50LFxuICAgICAgICBvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyA9IHt9LFxuICAgICk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gbWVyZ2UoXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudCh0YXJnZXQsICdtb3VzZWVudGVyJywgb3B0aW9ucyksXG4gICAgICAgICAgICB0eXBlZEZyb21FdmVudCh0YXJnZXQsICd0b3VjaHN0YXJ0Jywgb3B0aW9ucyksXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudCh0YXJnZXQsICdtb3VzZWxlYXZlJywgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRFdmVudHMkLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gIXRhcmdldC5jb250YWlucyhnZXRBY3R1YWxUYXJnZXQoZXZlbnQpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0dWlab25lT3B0aW1pemVkKHRoaXMubmdab25lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKS5waXBlKG1hcFRvKGZhbHNlKSwgc3RhcnRXaXRoKHRydWUpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==