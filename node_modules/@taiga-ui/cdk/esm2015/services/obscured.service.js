import { __decorate, __param } from "tslib";
import { ElementRef, Inject, Injectable, NgZone, Self } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { POLLING_TIME } from '@taiga-ui/cdk/constants';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { getElementObscurers } from '@taiga-ui/cdk/utils/dom';
import { fromEvent, interval, merge, Observable } from 'rxjs';
import { delay, distinctUntilChanged, map, startWith, takeUntil } from 'rxjs/operators';
import { TuiDestroyService } from './destroy.service';
import { TuiParentsScrollService } from './parents-scroll.service';
// @bad TODO: Consider Intersection Observer with fallback to current implementation
/**
 * Service that monitors element visibility by subscribing to scrolls
 * and polling with set interval, returns either null or an array
 * of elements that overlap given element edges
 */
// Ambient type cannot be used without dynamic https://github.com/angular/angular/issues/23395
// @dynamic
let TuiObscuredService = class TuiObscuredService extends Observable {
    constructor(parentsScroll$, { nativeElement }, ngZone, windowRef, destroy$) {
        super(subscriber => this.obscured$.subscribe(subscriber));
        this.obscured$ = merge(
        // delay is added so it will not interfere with other listeners
        merge(parentsScroll$, fromEvent(windowRef, 'resize')).pipe(delay(0)), interval(POLLING_TIME)).pipe(map(() => getElementObscurers(nativeElement)), startWith(null), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$));
    }
};
TuiObscuredService.ctorParameters = () => [
    { type: TuiParentsScrollService, decorators: [{ type: Inject, args: [TuiParentsScrollService,] }, { type: Self }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
TuiObscuredService = __decorate([
    Injectable(),
    __param(0, Inject(TuiParentsScrollService)),
    __param(0, Self()),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(NgZone)),
    __param(3, Inject(WINDOW)),
    __param(4, Inject(TuiDestroyService))
], TuiObscuredService);
export { TuiObscuredService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzY3VyZWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvc2VydmljZXMvIiwic291cmNlcyI6WyJvYnNjdXJlZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRWpFLG9GQUFvRjtBQUNwRjs7OztHQUlHO0FBQ0gsOEZBQThGO0FBQzlGLFdBQVc7QUFFWCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFtQixTQUFRLFVBQXlDO0lBRzdFLFlBR0ksY0FBdUMsRUFDbkIsRUFBQyxhQUFhLEVBQXNCLEVBQ3hDLE1BQWMsRUFDZCxTQUFpQixFQUNOLFFBQTBCO1FBRXJELEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLO1FBQ2xCLCtEQUErRDtRQUMvRCxLQUFLLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BFLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDekIsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQzdDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixvQkFBb0IsRUFBRSxFQUN0QixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFDeEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUE7O1lBcEJ1Qix1QkFBdUIsdUJBRnRDLE1BQU0sU0FBQyx1QkFBdUIsY0FDOUIsSUFBSTtZQUVnQyxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtZQUNNLE1BQU0sdUJBQTdCLE1BQU0sU0FBQyxNQUFNO1lBQ2EsTUFBTSx1QkFBaEMsTUFBTSxTQUFDLE1BQU07WUFDdUIsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLGlCQUFpQjs7QUFWcEIsa0JBQWtCO0lBRDlCLFVBQVUsRUFBRTtJQUtKLFdBQUEsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFDL0IsV0FBQSxJQUFJLEVBQUUsQ0FBQTtJQUVOLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2xCLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2QsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0dBVnJCLGtCQUFrQixDQTBCOUI7U0ExQlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1BPTExJTkdfVElNRX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlab25lT3B0aW1pemVkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7Z2V0RWxlbWVudE9ic2N1cmVyc30gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHtmcm9tRXZlbnQsIGludGVydmFsLCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlbGF5LCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGgsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnLi9kZXN0cm95LnNlcnZpY2UnO1xuaW1wb3J0IHtUdWlQYXJlbnRzU2Nyb2xsU2VydmljZX0gZnJvbSAnLi9wYXJlbnRzLXNjcm9sbC5zZXJ2aWNlJztcblxuLy8gQGJhZCBUT0RPOiBDb25zaWRlciBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXIgd2l0aCBmYWxsYmFjayB0byBjdXJyZW50IGltcGxlbWVudGF0aW9uXG4vKipcbiAqIFNlcnZpY2UgdGhhdCBtb25pdG9ycyBlbGVtZW50IHZpc2liaWxpdHkgYnkgc3Vic2NyaWJpbmcgdG8gc2Nyb2xsc1xuICogYW5kIHBvbGxpbmcgd2l0aCBzZXQgaW50ZXJ2YWwsIHJldHVybnMgZWl0aGVyIG51bGwgb3IgYW4gYXJyYXlcbiAqIG9mIGVsZW1lbnRzIHRoYXQgb3ZlcmxhcCBnaXZlbiBlbGVtZW50IGVkZ2VzXG4gKi9cbi8vIEFtYmllbnQgdHlwZSBjYW5ub3QgYmUgdXNlZCB3aXRob3V0IGR5bmFtaWMgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjMzOTVcbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHVpT2JzY3VyZWRTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxudWxsIHwgUmVhZG9ubHlBcnJheTxFbGVtZW50Pj4ge1xuICAgIHByaXZhdGUgb2JzY3VyZWQkOiBPYnNlcnZhYmxlPG51bGwgfCBSZWFkb25seUFycmF5PEVsZW1lbnQ+PjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aVBhcmVudHNTY3JvbGxTZXJ2aWNlKVxuICAgICAgICBAU2VsZigpXG4gICAgICAgIHBhcmVudHNTY3JvbGwkOiBUdWlQYXJlbnRzU2Nyb2xsU2VydmljZSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChXSU5ET1cpIHdpbmRvd1JlZjogV2luZG93LFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB0aGlzLm9ic2N1cmVkJC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuXG4gICAgICAgIHRoaXMub2JzY3VyZWQkID0gbWVyZ2UoXG4gICAgICAgICAgICAvLyBkZWxheSBpcyBhZGRlZCBzbyBpdCB3aWxsIG5vdCBpbnRlcmZlcmUgd2l0aCBvdGhlciBsaXN0ZW5lcnNcbiAgICAgICAgICAgIG1lcmdlKHBhcmVudHNTY3JvbGwkLCBmcm9tRXZlbnQod2luZG93UmVmLCAncmVzaXplJykpLnBpcGUoZGVsYXkoMCkpLFxuICAgICAgICAgICAgaW50ZXJ2YWwoUE9MTElOR19USU1FKSxcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgbWFwKCgpID0+IGdldEVsZW1lbnRPYnNjdXJlcnMobmF0aXZlRWxlbWVudCkpLFxuICAgICAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQobmdab25lKSxcbiAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19