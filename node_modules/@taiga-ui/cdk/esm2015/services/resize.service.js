import { __decorate, __param } from "tslib";
import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { RESIZE_OBSERVER_SUPPORT, RESIZE_OPTION_BOX, ResizeObserverService, } from '@ng-web-apis/resize-observer';
import { EMPTY_ARRAY, POLLING_TIME } from '@taiga-ui/cdk/constants';
import { tuiZonefree } from '@taiga-ui/cdk/observables';
import { interval, Observable } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, map, mapTo, takeUntil, } from 'rxjs/operators';
import { TuiDestroyService } from './destroy.service';
// @dynamic
let TuiResizeService = class TuiResizeService extends ResizeObserverService {
    constructor(elementRef, ngZone, destroy$, support, box) {
        super(elementRef, ngZone, support, box);
        return this.pipe(catchError(() => interval(POLLING_TIME).pipe(map(() => `${elementRef.nativeElement.clientWidth} ${elementRef.nativeElement.clientHeight}`), distinctUntilChanged(), mapTo(EMPTY_ARRAY))), takeUntil(destroy$), debounceTime(0), tuiZonefree(ngZone));
    }
};
TuiResizeService.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [RESIZE_OBSERVER_SUPPORT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OPTION_BOX,] }] }
];
TuiResizeService = __decorate([
    Injectable(),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(RESIZE_OBSERVER_SUPPORT)),
    __param(4, Inject(RESIZE_OPTION_BOX))
], TuiResizeService);
export { TuiResizeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsicmVzaXplLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIscUJBQXFCLEdBQ3hCLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDMUMsT0FBTyxFQUNILFVBQVUsRUFDVixZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLEdBQUcsRUFDSCxLQUFLLEVBQ0wsU0FBUyxHQUNaLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQsV0FBVztBQUVYLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWlCLFNBQVEscUJBQXFCO0lBQ3ZELFlBQ3dCLFVBQW1DLEVBQ3ZDLE1BQWMsRUFDSCxRQUEwQixFQUNwQixPQUFnQixFQUN0QixHQUFpQztRQUU1RCxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNaLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FDWixRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUN2QixHQUFHLENBQ0MsR0FBRyxFQUFFLENBQ0QsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUN6RixFQUNELG9CQUFvQixFQUFFLEVBQ3RCLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FDckIsQ0FDSixFQUNELFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFDbkIsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUNmLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FDdEIsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQXhCdUMsVUFBVSx1QkFBekMsTUFBTSxTQUFDLFVBQVU7WUFDTSxNQUFNLHVCQUE3QixNQUFNLFNBQUMsTUFBTTtZQUN1QixVQUFVLHVCQUE5QyxNQUFNLFNBQUMsaUJBQWlCOzBDQUN4QixNQUFNLFNBQUMsdUJBQXVCOzRDQUM5QixNQUFNLFNBQUMsaUJBQWlCOztBQU5wQixnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0lBR0osV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbEIsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBQ3pCLFdBQUEsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFDL0IsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtHQU5yQixnQkFBZ0IsQ0EwQjVCO1NBMUJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBSRVNJWkVfT0JTRVJWRVJfU1VQUE9SVCxcbiAgICBSRVNJWkVfT1BUSU9OX0JPWCxcbiAgICBSZXNpemVPYnNlcnZlclNlcnZpY2UsXG59IGZyb20gJ0BuZy13ZWItYXBpcy9yZXNpemUtb2JzZXJ2ZXInO1xuaW1wb3J0IHtFTVBUWV9BUlJBWSwgUE9MTElOR19USU1FfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NvbnN0YW50cyc7XG5pbXBvcnQge3R1aVpvbmVmcmVlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7aW50ZXJ2YWwsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBjYXRjaEVycm9yLFxuICAgIGRlYm91bmNlVGltZSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBtYXAsXG4gICAgbWFwVG8sXG4gICAgdGFrZVVudGlsLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlfSBmcm9tICcuL2Rlc3Ryb3kuc2VydmljZSc7XG5cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHVpUmVzaXplU2VydmljZSBleHRlbmRzIFJlc2l6ZU9ic2VydmVyU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgICAgIEBJbmplY3QoUkVTSVpFX09CU0VSVkVSX1NVUFBPUlQpIHN1cHBvcnQ6IGJvb2xlYW4sXG4gICAgICAgIEBJbmplY3QoUkVTSVpFX09QVElPTl9CT1gpIGJveDogUmVzaXplT2JzZXJ2ZXJPcHRpb25zWydib3gnXSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgbmdab25lLCBzdXBwb3J0LCBib3gpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKCgpID0+XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWwoUE9MTElOR19USU1FKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aH0gJHtlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0fWAsXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICAgICAgICAgIG1hcFRvKEVNUFRZX0FSUkFZKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgICAgICAgICB0dWlab25lZnJlZShuZ1pvbmUpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==