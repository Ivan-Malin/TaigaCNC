import { __decorate, __extends } from "tslib";
import { ChangeDetectorRef, Directive, HostBinding, Input, OnDestroy, OnInit, } from '@angular/core';
import { AbstractControl, ControlValueAccessor, NgControl, NgModel } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { fallbackValue } from '@taiga-ui/cdk/utils/miscellaneous';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { AbstractTuiInteractive } from './interactive';
/**
 * Basic ControlValueAccessor class to build form components upon
 */
var AbstractTuiControl = /** @class */ (function (_super) {
    __extends(AbstractTuiControl, _super);
    function AbstractTuiControl(ngControl, changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.ngControl = ngControl;
        _this.changeDetectorRef = changeDetectorRef;
        _this.onTouched = EMPTY_FUNCTION;
        _this.onChange = EMPTY_FUNCTION;
        _this.fallbackValue = _this.getFallbackValue();
        _this.destroy$ = new Subject();
        _this.readOnly = false;
        _this.pseudoInvalid = null;
        if (_this.ngControl === null) {
            tuiAssert.assert(false, "NgControl not injected in " + _this.constructor.name + "!\n", 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
        }
        else {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(AbstractTuiControl.prototype, "computedInvalid", {
        get: function () {
            return (!this.readOnly &&
                !this.disabled &&
                (this.pseudoInvalid !== null
                    ? this.pseudoInvalid
                    : this.touched && this.invalid));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "value", {
        get: function () {
            return fallbackValue(this.previousInternalValue, this.fallbackValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "safeCurrentValue", {
        get: function () {
            return fallbackValue(this.rawValue, this.fallbackValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "invalid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var invalid = _a.invalid;
                return invalid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "valid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var valid = _a.valid;
                return valid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "touched", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var touched = _a.touched;
                return touched;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "disabled", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var disabled = _a.disabled;
                return disabled;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "control", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var control = _a.control;
                return control;
            }, null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "computedName", {
        get: function () {
            return this.controlName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "controlName", {
        get: function () {
            return this.ngControl && this.ngControl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "rawValue", {
        get: function () {
            var ngControl = this.ngControl;
            if (ngControl === null) {
                return undefined;
            }
            return ngControl instanceof NgModel && this.previousInternalValue === undefined
                ? ngControl.viewModel
                : ngControl.value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiControl.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.ngControl ||
            !this.ngControl.valueChanges ||
            !this.ngControl.statusChanges) {
            return;
        }
        merge(this.ngControl.valueChanges, this.ngControl.statusChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(function () {
            _this.refreshLocalValue(_this.safeCurrentValue);
        });
    };
    AbstractTuiControl.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    AbstractTuiControl.prototype.checkControlUpdate = function () {
        this.changeDetectorRef.markForCheck();
    };
    AbstractTuiControl.prototype.registerOnChange = function (onChange) {
        this.onChange = onChange;
    };
    AbstractTuiControl.prototype.registerOnTouched = function (onTouched) {
        this.onTouched = onTouched;
    };
    AbstractTuiControl.prototype.setDisabledState = function () {
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.writeValue = function (value) {
        this.refreshLocalValue(this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value);
    };
    AbstractTuiControl.prototype.updateFocused = function (focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        _super.prototype.updateFocused.call(this, focused);
    };
    AbstractTuiControl.prototype.updateValue = function (value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    };
    AbstractTuiControl.prototype.valueIdenticalComparator = function (oldValue, newValue) {
        return oldValue === newValue;
    };
    AbstractTuiControl.prototype.safeNgControlData = function (extractor, defaultFieldValue) {
        return fallbackValue(this.ngControl && extractor(this.ngControl), defaultFieldValue);
    };
    AbstractTuiControl.prototype.controlMarkAsTouched = function () {
        this.onTouched();
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.controlSetValue = function (value) {
        this.onChange(value);
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.refreshLocalValue = function (value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    };
    AbstractTuiControl.ctorParameters = function () { return [
        { type: NgControl },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        HostBinding('class._readonly'),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "readOnly", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
    __decorate([
        HostBinding('class._invalid')
    ], AbstractTuiControl.prototype, "computedInvalid", null);
    AbstractTuiControl = __decorate([
        Directive()
    ], AbstractTuiControl);
    return AbstractTuiControl;
}(AbstractTuiInteractive));
export { AbstractTuiControl };
//# sourceMappingURL=data:application/json;base64,