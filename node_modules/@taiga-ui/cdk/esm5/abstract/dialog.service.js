import { __assign, __decorate, __extends, __param, __read, __spread } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { BehaviorSubject, Observable } from 'rxjs';
var AbstractTuiDialogService = /** @class */ (function (_super) {
    __extends(AbstractTuiDialogService, _super);
    function AbstractTuiDialogService(idService) {
        var _this = _super.call(this, function (observer) { return _this.dialogs$.subscribe(observer); }) || this;
        _this.idService = idService;
        _this.dialogs$ = new BehaviorSubject([]);
        return _this;
    }
    AbstractTuiDialogService.prototype.open = function (content, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return new Observable(function (observer) {
            var completeWith = function (result) {
                observer.next(result);
                observer.complete();
            };
            var dialog = __assign(__assign(__assign({}, _this.defaultOptions), options), { content: content,
                completeWith: completeWith, $implicit: observer, component: _this.component, id: _this.idService.generate() });
            _this.dialogs$.next(__spread(_this.dialogs$.value, [dialog]));
            return function () {
                _this.dialogs$.next(_this.dialogs$.value.filter(function (item) { return item !== dialog; }));
            };
        });
    };
    AbstractTuiDialogService.ctorParameters = function () { return [
        { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
    ]; };
    AbstractTuiDialogService = __decorate([
        Injectable(),
        __param(0, Inject(TuiIdService))
    ], AbstractTuiDialogService);
    return AbstractTuiDialogService;
}(Observable));
export { AbstractTuiDialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUdwRCxPQUFPLEVBQUMsZUFBZSxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUdqRDtJQUFxRSw0Q0FFcEU7SUFPRyxrQ0FDMkMsU0FBdUI7UUFEbEUsWUFHSSxrQkFBTSxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFqQyxDQUFpQyxDQUFDLFNBQ3ZEO1FBSDBDLGVBQVMsR0FBVCxTQUFTLENBQWM7UUFIL0MsY0FBUSxHQUFHLElBQUksZUFBZSxDQUErQixFQUFFLENBQUMsQ0FBQzs7SUFNcEYsQ0FBQztJQUVELHVDQUFJLEdBQUosVUFDSSxPQUF5RCxFQUN6RCxPQUF3QjtRQUY1QixpQkF5QkM7UUF2Qkcsd0JBQUEsRUFBQSxZQUF3QjtRQUV4QixPQUFPLElBQUksVUFBVSxDQUFDLFVBQUEsUUFBUTtZQUMxQixJQUFNLFlBQVksR0FBRyxVQUFDLE1BQVM7Z0JBQzNCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUM7WUFDRixJQUFNLE1BQU0sa0NBQ0wsS0FBSSxDQUFDLGNBQWMsR0FDbkIsT0FBTyxLQUNWLE9BQU8sU0FBQTtnQkFDUCxZQUFZLGNBQUEsRUFDWixTQUFTLEVBQUUsUUFBUSxFQUNuQixTQUFTLEVBQUUsS0FBSSxDQUFDLFNBQVMsRUFDekIsRUFBRSxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQ2hDLENBQUM7WUFFRixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksVUFBSyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRSxNQUFNLEdBQUUsQ0FBQztZQUVyRCxPQUFPO2dCQUNILEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksS0FBSyxNQUFNLEVBQWYsQ0FBZSxDQUFDLENBQUMsQ0FBQztZQUM1RSxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQTlCcUQsWUFBWSx1QkFBN0QsTUFBTSxTQUFDLFlBQVk7O0lBVk4sd0JBQXdCO1FBRDdDLFVBQVUsRUFBRTtRQVdKLFdBQUEsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO09BVlAsd0JBQXdCLENBeUM3QztJQUFELCtCQUFDO0NBQUEsQUF6Q0QsQ0FBcUUsVUFBVSxHQXlDOUU7U0F6Q3FCLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpQmFzZURpYWxvZ0NvbnRleHR9IGZyb20gJ0B0YWlnYS11aS9jZGsvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1R1aUlkU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge1R1aURpYWxvZ30gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aURpYWxvZ1NlcnZpY2U8VCBleHRlbmRzIHt9PiBleHRlbmRzIE9ic2VydmFibGU8XG4gICAgcmVhZG9ubHkgVHVpRGlhbG9nPFQsIGFueT5bXVxuPiB7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IGNvbXBvbmVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlEaWFsb2c8VCwgYW55Pj47XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVhZG9ubHkgZGVmYXVsdE9wdGlvbnM6IFQ7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGlhbG9ncyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHJlYWRvbmx5IFR1aURpYWxvZzxULCBhbnk+W10+KFtdKTtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlJZFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaWRTZXJ2aWNlOiBUdWlJZFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKG9ic2VydmVyID0+IHRoaXMuZGlhbG9ncyQuc3Vic2NyaWJlKG9ic2VydmVyKSk7XG4gICAgfVxuXG4gICAgb3BlbjxHPihcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlCYXNlRGlhbG9nQ29udGV4dDxHPiAmIFQ+LFxuICAgICAgICBvcHRpb25zOiBQYXJ0aWFsPFQ+ID0ge30sXG4gICAgKTogT2JzZXJ2YWJsZTxHPiB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0ZVdpdGggPSAocmVzdWx0OiBHKSA9PiB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGlhbG9nID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlV2l0aCxcbiAgICAgICAgICAgICAgICAkaW1wbGljaXQ6IG9ic2VydmVyLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcy5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWRTZXJ2aWNlLmdlbmVyYXRlKCksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmRpYWxvZ3MkLm5leHQoWy4uLnRoaXMuZGlhbG9ncyQudmFsdWUsIGRpYWxvZ10pO1xuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9ncyQubmV4dCh0aGlzLmRpYWxvZ3MkLnZhbHVlLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IGRpYWxvZykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19