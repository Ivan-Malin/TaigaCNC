/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 */
var AbstractTuiThemeSwitcher = /** @class */ (function () {
    function AbstractTuiThemeSwitcher(documentRef) {
        this.documentRef = documentRef;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        var styles = this.documentRef.head.querySelectorAll('style');
        this.constructor.style =
            styles[styles.length - 1];
    }
    Object.defineProperty(AbstractTuiThemeSwitcher.prototype, "style", {
        get: function () {
            return this.constructor.style;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiThemeSwitcher.prototype.ngOnDestroy = function () {
        this.removeTheme();
    };
    AbstractTuiThemeSwitcher.prototype.addTheme = function () {
        if (this.style && !this.documentRef.head.contains(this.style)) {
            for (var i = this.style.attributes.length - 1; i >= 0; i--) {
                this.style.removeAttribute(this.style.attributes[i].name);
            }
            this.documentRef.head.appendChild(this.style);
        }
    };
    AbstractTuiThemeSwitcher.prototype.removeTheme = function () {
        if (this.style && this.documentRef.head.contains(this.style)) {
            this.documentRef.head.removeChild(this.style);
        }
    };
    AbstractTuiThemeSwitcher.style = null;
    return AbstractTuiThemeSwitcher;
}());
export { AbstractTuiThemeSwitcher };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtc3dpdGNoZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2Fic3RyYWN0LyIsInNvdXJjZXMiOlsidGhlbWUtc3dpdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7O0dBS0c7QUFDSDtJQUdJLGtDQUF1QyxXQUFxQjtRQUFyQixnQkFBVyxHQUFYLFdBQVcsQ0FBVTtRQUN4RCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPO1NBQ1Y7UUFFRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsV0FBWSxDQUFDLEtBQUs7WUFDckQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELHNCQUFJLDJDQUFLO2FBQVQ7WUFDSSxPQUF5QyxJQUFJLENBQUMsV0FBWSxDQUFDLEtBQUssQ0FBQztRQUNyRSxDQUFDOzs7T0FBQTtJQUVELDhDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVPLDJDQUFRLEdBQWhCO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzRCxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0Q7WUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO0lBQ0wsQ0FBQztJQUVPLDhDQUFXLEdBQW5CO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqRDtJQUNMLENBQUM7SUFyQ00sOEJBQUssR0FBNEIsSUFBSSxDQUFDO0lBc0NqRCwrQkFBQztDQUFBLEFBdkNELElBdUNDO1NBdkNxQix3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVXNlIHRoaXMgYWJzdHJhY3QgY2xhc3MgdG8gY3JlYXRlIHlvdXIgb3duIHRvZ2dsZWFibGUgdGhlbWVzLlxuICogQSBjb21wb25lbnQgZXh0ZW5kaW5nIHRoaXMgY2xhc3MgbXVzdCBoYXZlIENTUyB2YXJpYWJsZXMgZGVmaW5pdGlvbnNcbiAqIGFuZCBoYXZlIFZpZXdFbmNhcHN1bGF0aW9uIHNldCB0byBOT05FLiBBIGJvb2xlYW4gaW5wdXQgYWxsb3dzIHRvXG4gKiBzd2l0Y2ggdGhlbWUgb24gb3Igb2ZmLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlUaGVtZVN3aXRjaGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBzdGF0aWMgc3R5bGU6IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50UmVmOiBEb2N1bWVudCkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hZGRUaGVtZSgpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLmRvY3VtZW50UmVmLmhlYWQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGUnKTtcblxuICAgICAgICAoPHR5cGVvZiBBYnN0cmFjdFR1aVRoZW1lU3dpdGNoZXI+dGhpcy5jb25zdHJ1Y3Rvcikuc3R5bGUgPVxuICAgICAgICAgICAgc3R5bGVzW3N0eWxlcy5sZW5ndGggLSAxXTtcbiAgICB9XG5cbiAgICBnZXQgc3R5bGUoKTogSFRNTFN0eWxlRWxlbWVudCB8IG51bGwge1xuICAgICAgICByZXR1cm4gKDx0eXBlb2YgQWJzdHJhY3RUdWlUaGVtZVN3aXRjaGVyPnRoaXMuY29uc3RydWN0b3IpLnN0eWxlO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnJlbW92ZVRoZW1lKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUaGVtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgIXRoaXMuZG9jdW1lbnRSZWYuaGVhZC5jb250YWlucyh0aGlzLnN0eWxlKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3R5bGUuYXR0cmlidXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUucmVtb3ZlQXR0cmlidXRlKHRoaXMuc3R5bGUuYXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlZi5oZWFkLmFwcGVuZENoaWxkKHRoaXMuc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVUaGVtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgdGhpcy5kb2N1bWVudFJlZi5oZWFkLmNvbnRhaW5zKHRoaXMuc3R5bGUpKSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVmLmhlYWQucmVtb3ZlQ2hpbGQodGhpcy5zdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=