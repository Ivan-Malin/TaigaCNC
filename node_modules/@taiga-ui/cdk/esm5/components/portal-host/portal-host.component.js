import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ComponentFactory, ComponentRef, ElementRef, EmbeddedViewRef, Inject, Injector, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { TuiPortalService } from './portal.service';
var BLANK_CLIENT_RECT = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
};
/**
 * Host element for dynamically created portals, for example using {@link TuiDropdownDirective}.
 */
var TuiPortalHostComponent = /** @class */ (function () {
    function TuiPortalHostComponent(viewContainerRef, elementRef, portalService) {
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        portalService.attach(this);
    }
    TuiPortalHostComponent_1 = TuiPortalHostComponent;
    Object.defineProperty(TuiPortalHostComponent.prototype, "clientRect", {
        get: function () {
            return this.elementRef.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    TuiPortalHostComponent.prototype.addComponentChild = function (componentFactory, injector) {
        return this.viewContainerRef.createComponent(componentFactory, undefined, Injector.create({
            parent: injector,
            providers: [
                {
                    provide: TuiPortalHostComponent_1,
                    useValue: this,
                },
            ],
        }));
    };
    TuiPortalHostComponent.prototype.addTemplateChild = function (templateRef, context) {
        return this.viewContainerRef.createEmbeddedView(templateRef, context);
    };
    TuiPortalHostComponent.prototype.fixedPositionOffset = function () {
        return this.positionFixedOffsetRef
            ? this.positionFixedOffsetRef.nativeElement.getBoundingClientRect()
            : BLANK_CLIENT_RECT;
    };
    var TuiPortalHostComponent_1;
    TuiPortalHostComponent.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiPortalService, decorators: [{ type: Inject, args: [TuiPortalService,] }] }
    ]; };
    __decorate([
        ViewChild('positionFixedOffset')
    ], TuiPortalHostComponent.prototype, "positionFixedOffsetRef", void 0);
    TuiPortalHostComponent = TuiPortalHostComponent_1 = __decorate([
        Component({
            selector: 'tui-portal-host',
            template: "<div #positionFixedOffset class=\"position-fixed-offset\"></div>\n<ng-content></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{position:relative;display:block;height:100%;z-index:0}:host:before{content:'';display:block;overflow:hidden}.position-fixed-offset{position:fixed;left:0;top:0;pointer-events:none;visibility:hidden;width:100%;height:100%}"]
        }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiPortalService))
    ], TuiPortalHostComponent);
    return TuiPortalHostComponent;
}());
export { TuiPortalHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGFsLWhvc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9jb21wb25lbnRzL3BvcnRhbC1ob3N0LyIsInNvdXJjZXMiOlsicG9ydGFsLWhvc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLFVBQVUsRUFDVixlQUFlLEVBQ2YsTUFBTSxFQUNOLFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULGdCQUFnQixHQUNuQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUVsRCxJQUFNLGlCQUFpQixHQUFlO0lBQ2xDLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxJQUFJLEVBQUUsQ0FBQztJQUNQLEtBQUssRUFBRSxDQUFDO0lBQ1IsR0FBRyxFQUFFLENBQUM7SUFDTixLQUFLLEVBQUUsQ0FBQztDQUNYLENBQUM7QUFFRjs7R0FFRztBQU9IO0lBSUksZ0NBRXFCLGdCQUFrQyxFQUVsQyxVQUFtQyxFQUMxQixhQUErQjtRQUh4QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBRWxDLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBR3BELGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzsrQkFaUSxzQkFBc0I7SUFjL0Isc0JBQUksOENBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNqRSxDQUFDOzs7T0FBQTtJQUVELGtEQUFpQixHQUFqQixVQUNJLGdCQUFxQyxFQUNyQyxRQUFrQjtRQUVsQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQ3hDLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNaLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsd0JBQXNCO29CQUMvQixRQUFRLEVBQUUsSUFBSTtpQkFDakI7YUFDSjtTQUNKLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVELGlEQUFnQixHQUFoQixVQUFvQixXQUEyQixFQUFFLE9BQVc7UUFDeEQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxvREFBbUIsR0FBbkI7UUFDSSxPQUFPLElBQUksQ0FBQyxzQkFBc0I7WUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUU7WUFDbkUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBQzVCLENBQUM7OztnQkF2Q3NDLGdCQUFnQix1QkFEbEQsTUFBTSxTQUFDLGdCQUFnQjtnQkFHSyxVQUFVLHVCQUR0QyxNQUFNLFNBQUMsVUFBVTtnQkFFdUIsZ0JBQWdCLHVCQUF4RCxNQUFNLFNBQUMsZ0JBQWdCOztJQVA1QjtRQURDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQzswRUFDb0M7SUFGNUQsc0JBQXNCO1FBTmxDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IseUdBQTBDO1lBRTFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNsRCxDQUFDO1FBTU8sV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtRQUV4QixXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUVsQixXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO09BVHBCLHNCQUFzQixDQThDbEM7SUFBRCw2QkFBQztDQUFBLEFBOUNELElBOENDO1NBOUNZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbXBvbmVudEZhY3RvcnksXG4gICAgQ29tcG9uZW50UmVmLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRW1iZWRkZWRWaWV3UmVmLFxuICAgIEluamVjdCxcbiAgICBJbmplY3RvcixcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q2hpbGQsXG4gICAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aVBvcnRhbFNlcnZpY2V9IGZyb20gJy4vcG9ydGFsLnNlcnZpY2UnO1xuXG5jb25zdCBCTEFOS19DTElFTlRfUkVDVDogQ2xpZW50UmVjdCA9IHtcbiAgICBib3R0b206IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHdpZHRoOiAwLFxufTtcblxuLyoqXG4gKiBIb3N0IGVsZW1lbnQgZm9yIGR5bmFtaWNhbGx5IGNyZWF0ZWQgcG9ydGFscywgZm9yIGV4YW1wbGUgdXNpbmcge0BsaW5rIFR1aURyb3Bkb3duRGlyZWN0aXZlfS5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcG9ydGFsLWhvc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wb3J0YWwtaG9zdC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wb3J0YWwtaG9zdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVBvcnRhbEhvc3RDb21wb25lbnQge1xuICAgIEBWaWV3Q2hpbGQoJ3Bvc2l0aW9uRml4ZWRPZmZzZXQnKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgcG9zaXRpb25GaXhlZE9mZnNldFJlZj86IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVmlld0NvbnRhaW5lclJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVHVpUG9ydGFsU2VydmljZSkgcG9ydGFsU2VydmljZTogVHVpUG9ydGFsU2VydmljZSxcbiAgICApIHtcbiAgICAgICAgcG9ydGFsU2VydmljZS5hdHRhY2godGhpcyk7XG4gICAgfVxuXG4gICAgZ2V0IGNsaWVudFJlY3QoKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICBhZGRDb21wb25lbnRDaGlsZDxDPihcbiAgICAgICAgY29tcG9uZW50RmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxDPixcbiAgICAgICAgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICk6IENvbXBvbmVudFJlZjxDPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50PEM+KFxuICAgICAgICAgICAgY29tcG9uZW50RmFjdG9yeSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgcGFyZW50OiBpbmplY3RvcixcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogVHVpUG9ydGFsSG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhZGRUZW1wbGF0ZUNoaWxkPEM+KHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxDPiwgY29udGV4dD86IEMpOiBFbWJlZGRlZFZpZXdSZWY8Qz4ge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZiwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgZml4ZWRQb3NpdGlvbk9mZnNldCgpOiBDbGllbnRSZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25GaXhlZE9mZnNldFJlZlxuICAgICAgICAgICAgPyB0aGlzLnBvc2l0aW9uRml4ZWRPZmZzZXRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICAgICAgOiBCTEFOS19DTElFTlRfUkVDVDtcbiAgICB9XG59XG4iXX0=