import { __decorate } from "tslib";
import { Injectable, } from '@angular/core';
import * as i0 from "@angular/core";
var NO_HOST = 'Portals cannot be used without TuiPortalHostComponent';
/**
 * Service for displaying portals
 */
var TuiPortalService = /** @class */ (function () {
    function TuiPortalService() {
    }
    Object.defineProperty(TuiPortalService.prototype, "safeHost", {
        get: function () {
            if (!this.host) {
                throw new Error(NO_HOST);
            }
            return this.host;
        },
        enumerable: true,
        configurable: true
    });
    TuiPortalService.prototype.attach = function (host) {
        this.host = host;
    };
    TuiPortalService.prototype.add = function (componentFactory, injector) {
        return this.safeHost.addComponentChild(componentFactory, injector);
    };
    TuiPortalService.prototype.remove = function (_a) {
        var hostView = _a.hostView;
        hostView.destroy();
    };
    TuiPortalService.prototype.addTemplate = function (templateRef, context) {
        return this.safeHost.addTemplateChild(templateRef, context);
    };
    TuiPortalService.prototype.removeTemplate = function (viewRef) {
        viewRef.destroy();
    };
    TuiPortalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiPortalService_Factory() { return new TuiPortalService(); }, token: TuiPortalService, providedIn: "root" });
    TuiPortalService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TuiPortalService);
    return TuiPortalService;
}());
export { TuiPortalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2NvbXBvbmVudHMvcG9ydGFsLWhvc3QvIiwic291cmNlcyI6WyJwb3J0YWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUlILFVBQVUsR0FHYixNQUFNLGVBQWUsQ0FBQzs7QUFHdkIsSUFBTSxPQUFPLEdBQUcsdURBQXVELENBQUM7QUFFeEU7O0dBRUc7QUFJSDtJQUFBO0tBOEJDO0lBM0JHLHNCQUFZLHNDQUFRO2FBQXBCO1lBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM1QjtZQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUVELGlDQUFNLEdBQU4sVUFBTyxJQUE0QjtRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsOEJBQUcsR0FBSCxVQUFPLGdCQUFxQyxFQUFFLFFBQWtCO1FBQzVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsaUNBQU0sR0FBTixVQUFVLEVBQTJCO1lBQTFCLHNCQUFRO1FBQ2YsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxzQ0FBVyxHQUFYLFVBQWUsV0FBMkIsRUFBRSxPQUFXO1FBQ25ELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELHlDQUFjLEdBQWQsVUFBa0IsT0FBMkI7UUFDekMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3RCLENBQUM7O0lBN0JRLGdCQUFnQjtRQUg1QixVQUFVLENBQUM7WUFDUixVQUFVLEVBQUUsTUFBTTtTQUNyQixDQUFDO09BQ1csZ0JBQWdCLENBOEI1QjsyQkFoREQ7Q0FnREMsQUE5QkQsSUE4QkM7U0E5QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnRGYWN0b3J5LFxuICAgIENvbXBvbmVudFJlZixcbiAgICBFbWJlZGRlZFZpZXdSZWYsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbmplY3RvcixcbiAgICBUZW1wbGF0ZVJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aVBvcnRhbEhvc3RDb21wb25lbnR9IGZyb20gJy4vcG9ydGFsLWhvc3QuY29tcG9uZW50JztcblxuY29uc3QgTk9fSE9TVCA9ICdQb3J0YWxzIGNhbm5vdCBiZSB1c2VkIHdpdGhvdXQgVHVpUG9ydGFsSG9zdENvbXBvbmVudCc7XG5cbi8qKlxuICogU2VydmljZSBmb3IgZGlzcGxheWluZyBwb3J0YWxzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVBvcnRhbFNlcnZpY2Uge1xuICAgIHByaXZhdGUgaG9zdD86IFR1aVBvcnRhbEhvc3RDb21wb25lbnQ7XG5cbiAgICBwcml2YXRlIGdldCBzYWZlSG9zdCgpOiBUdWlQb3J0YWxIb3N0Q29tcG9uZW50IHtcbiAgICAgICAgaWYgKCF0aGlzLmhvc3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOT19IT1NUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3Q7XG4gICAgfVxuXG4gICAgYXR0YWNoKGhvc3Q6IFR1aVBvcnRhbEhvc3RDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICB9XG5cbiAgICBhZGQ8Qz4oY29tcG9uZW50RmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxDPiwgaW5qZWN0b3I6IEluamVjdG9yKTogQ29tcG9uZW50UmVmPEM+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FmZUhvc3QuYWRkQ29tcG9uZW50Q2hpbGQoY29tcG9uZW50RmFjdG9yeSwgaW5qZWN0b3IpO1xuICAgIH1cblxuICAgIHJlbW92ZTxDPih7aG9zdFZpZXd9OiBDb21wb25lbnRSZWY8Qz4pIHtcbiAgICAgICAgaG9zdFZpZXcuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGFkZFRlbXBsYXRlPEM+KHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxDPiwgY29udGV4dD86IEMpOiBFbWJlZGRlZFZpZXdSZWY8Qz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlSG9zdC5hZGRUZW1wbGF0ZUNoaWxkKHRlbXBsYXRlUmVmLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICByZW1vdmVUZW1wbGF0ZTxDPih2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8Qz4pIHtcbiAgICAgICAgdmlld1JlZi5kZXN0cm95KCk7XG4gICAgfVxufVxuIl19