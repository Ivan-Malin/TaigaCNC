import { __extends } from "tslib";
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { RANGE_SEPARATOR_CHAR } from './date-time';
import { TuiDay } from './day';
import { TuiMonthRange } from './month-range';
/**
 * An immutable range of two {@link TuiDay} objects
 */
var TuiDayRange = /** @class */ (function (_super) {
    __extends(TuiDayRange, _super);
    function TuiDayRange(from, to) {
        var _this = _super.call(this, from, to) || this;
        _this.from = from;
        _this.to = to;
        tuiAssert.assert(from.daySameOrBefore(to));
        return _this;
    }
    Object.defineProperty(TuiDayRange.prototype, "isSingleDay", {
        get: function () {
            return this.from.daySame(this.to);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDayRange.prototype, "formattedDayRange", {
        /**
         * Human readable format.
         */
        get: function () {
            return "" + this.from.formattedDay + RANGE_SEPARATOR_CHAR + this.to.formattedDay;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Tests ranges for identity
     *
     * @param another second range to test against current
     * @return `true` if days are identical
     */
    TuiDayRange.prototype.daySame = function (another) {
        return this.from.daySame(another.from) && this.to.daySame(another.to);
    };
    /**
     * Locks range between two days included, or limits from one side if the other is null
     *
     * @param min
     * @param max
     * @return range â€” clamped range
     */
    TuiDayRange.prototype.dayLimit = function (min, max) {
        return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));
    };
    /**
     * Creates range from two days after sorting them
     *
     * @param day1
     * @param day2
     * @return new range with sorted days
     */
    TuiDayRange.sort = function (day1, day2) {
        return day1.daySameOrBefore(day2)
            ? new TuiDayRange(day1, day2)
            : new TuiDayRange(day2, day1);
    };
    /**
     * Parse and correct a day range in string format
     *
     * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy
     * @return normalized day range object
     */
    TuiDayRange.normalizeParse = function (rangeString, dateFiller, dateRangeFiller) {
        var leftDay = TuiDay.normalizeParse(rangeString.slice(0, dateFiller.length));
        if (rangeString.length < dateRangeFiller.length) {
            return new TuiDayRange(leftDay, leftDay);
        }
        return TuiDayRange.sort(leftDay, TuiDay.normalizeParse(rangeString.slice(dateFiller.length + RANGE_SEPARATOR_CHAR.length)));
    };
    return TuiDayRange;
}(TuiMonthRange));
export { TuiDayRange };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LXJhbmdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kYXRlLXRpbWUvIiwic291cmNlcyI6WyJkYXktcmFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUM3QixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTVDOztHQUVHO0FBQ0g7SUFBaUMsK0JBQWE7SUFDMUMscUJBQXFCLElBQVksRUFBVyxFQUFVO1FBQXRELFlBQ0ksa0JBQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQyxTQUdsQjtRQUpvQixVQUFJLEdBQUosSUFBSSxDQUFRO1FBQVcsUUFBRSxHQUFGLEVBQUUsQ0FBUTtRQUdsRCxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7SUFDL0MsQ0FBQztJQUVELHNCQUFJLG9DQUFXO2FBQWY7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDOzs7T0FBQTtJQUtELHNCQUFJLDBDQUFpQjtRQUhyQjs7V0FFRzthQUNIO1lBQ0ksT0FBTyxLQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBYyxDQUFDO1FBQ3JGLENBQUM7OztPQUFBO0lBRUQ7Ozs7O09BS0c7SUFDSCw2QkFBTyxHQUFQLFVBQVEsT0FBb0I7UUFDeEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCw4QkFBUSxHQUFSLFVBQVMsR0FBa0IsRUFBRSxHQUFrQjtRQUMzQyxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksZ0JBQUksR0FBWCxVQUFZLElBQVksRUFBRSxJQUFZO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7WUFDN0IsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7WUFDN0IsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSwwQkFBYyxHQUFyQixVQUNJLFdBQW1CLEVBQ25CLFVBQWtCLEVBQ2xCLGVBQXVCO1FBRXZCLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFL0UsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDN0MsT0FBTyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDNUM7UUFFRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQ25CLE9BQU8sRUFDUCxNQUFNLENBQUMsY0FBYyxDQUNqQixXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQ3JFLENBQ0osQ0FBQztJQUNOLENBQUM7SUFDTCxrQkFBQztBQUFELENBQUMsQUE1RUQsQ0FBaUMsYUFBYSxHQTRFN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jbGFzc2VzJztcbmltcG9ydCB7UkFOR0VfU0VQQVJBVE9SX0NIQVJ9IGZyb20gJy4vZGF0ZS10aW1lJztcbmltcG9ydCB7VHVpRGF5fSBmcm9tICcuL2RheSc7XG5pbXBvcnQge1R1aU1vbnRoUmFuZ2V9IGZyb20gJy4vbW9udGgtcmFuZ2UnO1xuXG4vKipcbiAqIEFuIGltbXV0YWJsZSByYW5nZSBvZiB0d28ge0BsaW5rIFR1aURheX0gb2JqZWN0c1xuICovXG5leHBvcnQgY2xhc3MgVHVpRGF5UmFuZ2UgZXh0ZW5kcyBUdWlNb250aFJhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSBmcm9tOiBUdWlEYXksIHJlYWRvbmx5IHRvOiBUdWlEYXkpIHtcbiAgICAgICAgc3VwZXIoZnJvbSwgdG8pO1xuXG4gICAgICAgIHR1aUFzc2VydC5hc3NlcnQoZnJvbS5kYXlTYW1lT3JCZWZvcmUodG8pKTtcbiAgICB9XG5cbiAgICBnZXQgaXNTaW5nbGVEYXkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20uZGF5U2FtZSh0aGlzLnRvKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIdW1hbiByZWFkYWJsZSBmb3JtYXQuXG4gICAgICovXG4gICAgZ2V0IGZvcm1hdHRlZERheVJhbmdlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmZyb20uZm9ybWF0dGVkRGF5fSR7UkFOR0VfU0VQQVJBVE9SX0NIQVJ9JHt0aGlzLnRvLmZvcm1hdHRlZERheX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlc3RzIHJhbmdlcyBmb3IgaWRlbnRpdHlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbm90aGVyIHNlY29uZCByYW5nZSB0byB0ZXN0IGFnYWluc3QgY3VycmVudFxuICAgICAqIEByZXR1cm4gYHRydWVgIGlmIGRheXMgYXJlIGlkZW50aWNhbFxuICAgICAqL1xuICAgIGRheVNhbWUoYW5vdGhlcjogVHVpRGF5UmFuZ2UpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbS5kYXlTYW1lKGFub3RoZXIuZnJvbSkgJiYgdGhpcy50by5kYXlTYW1lKGFub3RoZXIudG8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvY2tzIHJhbmdlIGJldHdlZW4gdHdvIGRheXMgaW5jbHVkZWQsIG9yIGxpbWl0cyBmcm9tIG9uZSBzaWRlIGlmIHRoZSBvdGhlciBpcyBudWxsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWluXG4gICAgICogQHBhcmFtIG1heFxuICAgICAqIEByZXR1cm4gcmFuZ2Ug4oCUIGNsYW1wZWQgcmFuZ2VcbiAgICAgKi9cbiAgICBkYXlMaW1pdChtaW46IFR1aURheSB8IG51bGwsIG1heDogVHVpRGF5IHwgbnVsbCk6IFR1aURheVJhbmdlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUdWlEYXlSYW5nZSh0aGlzLmZyb20uZGF5TGltaXQobWluLCBtYXgpLCB0aGlzLnRvLmRheUxpbWl0KG1pbiwgbWF4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyByYW5nZSBmcm9tIHR3byBkYXlzIGFmdGVyIHNvcnRpbmcgdGhlbVxuICAgICAqXG4gICAgICogQHBhcmFtIGRheTFcbiAgICAgKiBAcGFyYW0gZGF5MlxuICAgICAqIEByZXR1cm4gbmV3IHJhbmdlIHdpdGggc29ydGVkIGRheXNcbiAgICAgKi9cbiAgICBzdGF0aWMgc29ydChkYXkxOiBUdWlEYXksIGRheTI6IFR1aURheSk6IFR1aURheVJhbmdlIHtcbiAgICAgICAgcmV0dXJuIGRheTEuZGF5U2FtZU9yQmVmb3JlKGRheTIpXG4gICAgICAgICAgICA/IG5ldyBUdWlEYXlSYW5nZShkYXkxLCBkYXkyKVxuICAgICAgICAgICAgOiBuZXcgVHVpRGF5UmFuZ2UoZGF5MiwgZGF5MSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgYW5kIGNvcnJlY3QgYSBkYXkgcmFuZ2UgaW4gc3RyaW5nIGZvcm1hdFxuICAgICAqXG4gICAgICogQHBhcmFtIHJhbmdlU3RyaW5nIGEgc3RyaW5nIG9mIGRhdGVzIGluIGEgZm9ybWF0IGRkLm1tLnl5eXkgLSBkZC5tbS55eXl5XG4gICAgICogQHJldHVybiBub3JtYWxpemVkIGRheSByYW5nZSBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgbm9ybWFsaXplUGFyc2UoXG4gICAgICAgIHJhbmdlU3RyaW5nOiBzdHJpbmcsXG4gICAgICAgIGRhdGVGaWxsZXI6IHN0cmluZyxcbiAgICAgICAgZGF0ZVJhbmdlRmlsbGVyOiBzdHJpbmcsXG4gICAgKTogVHVpRGF5UmFuZ2Uge1xuICAgICAgICBjb25zdCBsZWZ0RGF5ID0gVHVpRGF5Lm5vcm1hbGl6ZVBhcnNlKHJhbmdlU3RyaW5nLnNsaWNlKDAsIGRhdGVGaWxsZXIubGVuZ3RoKSk7XG5cbiAgICAgICAgaWYgKHJhbmdlU3RyaW5nLmxlbmd0aCA8IGRhdGVSYW5nZUZpbGxlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHVpRGF5UmFuZ2UobGVmdERheSwgbGVmdERheSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gVHVpRGF5UmFuZ2Uuc29ydChcbiAgICAgICAgICAgIGxlZnREYXksXG4gICAgICAgICAgICBUdWlEYXkubm9ybWFsaXplUGFyc2UoXG4gICAgICAgICAgICAgICAgcmFuZ2VTdHJpbmcuc2xpY2UoZGF0ZUZpbGxlci5sZW5ndGggKyBSQU5HRV9TRVBBUkFUT1JfQ0hBUi5sZW5ndGgpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=