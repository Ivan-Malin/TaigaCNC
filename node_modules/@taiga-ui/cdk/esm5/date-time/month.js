import { __extends } from "tslib";
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { padStart } from '@taiga-ui/cdk/utils/format';
import { inRange, normalizeToIntNumber } from '@taiga-ui/cdk/utils/math';
import { DAYS_IN_WEEK, MAX_MONTH, MIN_MONTH, MONTHS_IN_YEAR } from './date-time';
import { TuiYear } from './year';
/**
 * Immutable object consisting of year and month
 */
var TuiMonth = /** @class */ (function (_super) {
    __extends(TuiMonth, _super);
    /**
     * @param year
     * @param month (starting with 0)
     */
    function TuiMonth(year, month) {
        var _this = _super.call(this, year) || this;
        _this.month = month;
        tuiAssert.assert(TuiMonth.isValidMonth(year, month));
        return _this;
    }
    Object.defineProperty(TuiMonth.prototype, "formattedMonthPart", {
        get: function () {
            return padStart((this.month + 1).toString(), 2, '0');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMonth.prototype, "formattedMonth", {
        /**
         * Formatter month and year
         */
        get: function () {
            return this.formattedMonthPart + "." + this.formattedYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMonth.prototype, "weeksRowsCount", {
        /**
         * Calculates number of weeks in a month (counting non-full weeks)
         */
        get: function () {
            return Math.ceil((this.monthStartDaysOffset + this.daysCount) / DAYS_IN_WEEK);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMonth.prototype, "daysCount", {
        /**
         * Returns days in a month
         */
        get: function () {
            return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMonth.prototype, "monthStartDaysOffset", {
        /**
         * Computes day of week offset of the beginning of the month
         */
        get: function () {
            var result = this.yearStartDaysOffset;
            for (var currentMonth = 0; currentMonth <= this.month - 1; currentMonth++) {
                result += TuiMonth.getMonthDaysCount(currentMonth, this.isLeapYear);
            }
            return result % DAYS_IN_WEEK;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Passed month and year are after current
     */
    TuiMonth.prototype.monthBefore = function (another) {
        return (this.yearBefore(another) ||
            (this.yearSame(another) && this.month < another.month));
    };
    /**
     * Passed month and year are after or the same as current
     */
    TuiMonth.prototype.monthSameOrBefore = function (another) {
        return (this.yearBefore(another) ||
            (this.yearSame(another) && this.month <= another.month));
    };
    /**
     * Passed month and year are the same as current
     */
    TuiMonth.prototype.monthSame = function (another) {
        return this.yearSame(another) && this.month === another.month;
    };
    /**
     * Passed month and year are either before or equal to current
     */
    TuiMonth.prototype.monthSameOrAfter = function (another) {
        return (this.yearAfter(another) ||
            (this.yearSame(another) && this.month >= another.month));
    };
    /**
     * Passed month and year are before current
     */
    TuiMonth.prototype.monthAfter = function (another) {
        return (this.yearAfter(another) ||
            (this.yearSame(another) && this.month > another.month));
    };
    // TODO: Consider removing `backwards` option
    /**
     * Immutably alters current month and year by passed offset
     *
     * @param offset
     * @param backwards shift date backwards
     * @return new month and year object as a result of offsetting current
     */
    TuiMonth.prototype.append = function (_a, backwards) {
        var _b = _a.year, year = _b === void 0 ? 0 : _b, _c = _a.month, month = _c === void 0 ? 0 : _c;
        if (backwards === void 0) { backwards = false; }
        if (backwards) {
            year *= -1;
            month *= -1;
        }
        var totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;
        return new TuiMonth(Math.floor(totalMonths / MONTHS_IN_YEAR), totalMonths % MONTHS_IN_YEAR);
    };
    TuiMonth.prototype.toString = function () {
        return this.formattedMonth;
    };
    TuiMonth.prototype.toJSON = function () {
        return _super.prototype.toJSON.call(this) + "-" + this.formattedMonthPart;
    };
    /**
     * Returns native {@link Date} based on local time zone
     */
    TuiMonth.prototype.toLocalNativeDate = function () {
        return new Date(this.year, this.month);
    };
    /**
     * Returns native {@link Date} based on UTC
     */
    TuiMonth.prototype.toUtcNativeDate = function () {
        return new Date(Date.UTC(this.year, this.month));
    };
    /**
     * Tests month and year for validity
     */
    TuiMonth.isValidMonth = function (year, month) {
        return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);
    };
    /**
     * Returns number of days in a month
     */
    TuiMonth.getMonthDaysCount = function (month, isLeapYear) {
        tuiAssert.assert(TuiMonth.isValidMonthPart(month));
        switch (month) {
            case 1 /* February */:
                return isLeapYear ? 29 : 28;
            case 3 /* April */:
            case 5 /* June */:
            case 8 /* September */:
            case 10 /* November */:
                return 30;
            default:
                return 31;
        }
    };
    /**
     * Returns current month and year based on local time zone
     * @nosideeffects
     */
    TuiMonth.currentLocal = function () {
        var nativeDate = new Date();
        return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());
    };
    /**
     * Returns current month and year based on UTC
     */
    TuiMonth.currentUtc = function () {
        var nativeDate = new Date();
        return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());
    };
    TuiMonth.lengthBetween = function (from, to) {
        var absoluteFrom = from.month + from.year * 12;
        var absoluteTo = to.month + to.year * 12;
        return absoluteTo - absoluteFrom;
    };
    /**
     * Normalizes number by clamping it between min and max month
     */
    TuiMonth.normalizeMonthPart = function (month) {
        return normalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);
    };
    /**
     * Tests month for validity
     */
    TuiMonth.isValidMonthPart = function (month) {
        return Number.isInteger(month) && inRange(month, MIN_MONTH, MAX_MONTH + 1);
    };
    return TuiMonth;
}(TuiYear));
export { TuiMonth };
//# sourceMappingURL=data:application/json;base64,