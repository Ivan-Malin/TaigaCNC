import { tuiAssert } from '@taiga-ui/cdk/classes';
import { padStart } from '@taiga-ui/cdk/utils/format';
import { inRange, normalizeToIntNumber } from '@taiga-ui/cdk/utils/math';
import { DAYS_IN_LEAP_YEAR, DAYS_IN_NORMAL_YEAR, DAYS_IN_WEEK, MAX_YEAR, MIN_YEAR, } from './date-time';
/**
 * Immutable year object
 * @nosideeffects
 */
var TuiYear = /** @class */ (function () {
    function TuiYear(year) {
        this.year = year;
        tuiAssert.assert(TuiYear.isValidYear(year));
    }
    Object.defineProperty(TuiYear.prototype, "formattedYear", {
        get: function () {
            return padStart(this.year.toString(), 4, '0');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiYear.prototype, "isLeapYear", {
        get: function () {
            return TuiYear.isLeapYear(this.year);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiYear.prototype, "absoluteLeapYears", {
        /**
         * Returns amount of leap years from year 0 to current
         */
        get: function () {
            return TuiYear.getAbsoluteLeapYears(this.year);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiYear.prototype, "yearStartDaysOffset", {
        /**
         * Returns day of week offset of the beginning of the current year
         */
        get: function () {
            return TuiYear.getYearStartDaysOffset(this.year, this.absoluteLeapYears);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Passed year is after current
     */
    TuiYear.prototype.yearBefore = function (_a) {
        var year = _a.year;
        return this.year < year;
    };
    /**
     * Passed year is the same or after current
     */
    TuiYear.prototype.yearSameOrBefore = function (_a) {
        var year = _a.year;
        return this.year <= year;
    };
    /**
     * Passed year is the same as current
     */
    TuiYear.prototype.yearSame = function (_a) {
        var year = _a.year;
        return this.year === year;
    };
    /**
     * Passed year is either the same of before the current
     */
    TuiYear.prototype.yearSameOrAfter = function (_a) {
        var year = _a.year;
        return this.year >= year;
    };
    /**
     * Passed year is before current
     */
    TuiYear.prototype.yearAfter = function (_a) {
        var year = _a.year;
        return this.year > year;
    };
    // TODO: Consider removing `backwards` option
    /**
     * Immutably offsets year
     */
    TuiYear.prototype.append = function (_a, backwards) {
        var _b = _a.year, year = _b === void 0 ? 0 : _b;
        if (backwards === void 0) { backwards = false; }
        tuiAssert.assert(Number.isInteger(year));
        if (backwards) {
            year *= -1;
        }
        var resultYear = this.year + year;
        tuiAssert.assert(TuiYear.isValidYear(resultYear));
        return new TuiYear(resultYear);
    };
    TuiYear.prototype.toString = function () {
        return this.formattedYear;
    };
    TuiYear.prototype.toJSON = function () {
        return this.formattedYear;
    };
    /**
     * Checks year for validity
     */
    TuiYear.isValidYear = function (year) {
        return Number.isInteger(year) && inRange(year, MIN_YEAR, MAX_YEAR + 1);
    };
    /**
     * Check if passed year is a leap year
     */
    TuiYear.isLeapYear = function (year) {
        tuiAssert.assert(TuiYear.isValidYear(year));
        return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);
    };
    /**
     * Returns amount of leap years from year 0 to the passed one
     */
    TuiYear.getAbsoluteLeapYears = function (year) {
        tuiAssert.assert(TuiYear.isValidYear(year));
        return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));
    };
    /**
     * Returns day of week offset of the beginning of the passed year
     *
     * @param year
     * @param absoluteLeapYears amount of leap years prior to the passed one
     * @return offset in days
     */
    TuiYear.getYearStartDaysOffset = function (year, absoluteLeapYears) {
        tuiAssert.assert(TuiYear.isValidYear(year));
        tuiAssert.assert(Number.isInteger(absoluteLeapYears));
        tuiAssert.assert(year >= absoluteLeapYears);
        tuiAssert.assert(absoluteLeapYears >= 0);
        return ((absoluteLeapYears * DAYS_IN_LEAP_YEAR +
            (year - absoluteLeapYears) * DAYS_IN_NORMAL_YEAR +
            5) %
            DAYS_IN_WEEK);
    };
    TuiYear.lengthBetween = function (from, to) {
        return to.year - from.year;
    };
    /**
     * Normalizes year by clamping it between min and max years
     */
    TuiYear.normalizeYearPart = function (year) {
        return normalizeToIntNumber(year, MIN_YEAR, MAX_YEAR);
    };
    return TuiYear;
}());
export { TuiYear };
//# sourceMappingURL=data:application/json;base64,