import { __read, __spread } from "tslib";
import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * See {@link createPropDecorator} for more details.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
export function tuiDefaultProp(assertion) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return function (target, key) {
        var name = target.constructor.name;
        var errorGetDefaultMessage = errorGetDefault(key, name);
        var errorSetDefaultMessage = errorSetDefault(key, name);
        Object.defineProperty(target, key, {
            get: function () {
                tuiAssert.assert(false, errorGetDefaultMessage);
                return undefined;
            },
            set: function (initialValue) {
                var isValid = initialValue !== undefined;
                var errorMessage = errorSetDefaultInitial(key, name);
                var currentValue = initialValue;
                tuiAssert.assert(isValid, errorMessage);
                if (isValid && assertion) {
                    tuiAssert.assert.apply(tuiAssert, __spread([assertion.call(this, initialValue),
                        String(key) + " in " + name + " received:",
                        initialValue], args));
                }
                Object.defineProperty(this, key, {
                    get: function () {
                        return currentValue;
                    },
                    set: function (value) {
                        var isValid = value !== undefined;
                        var backupValue = initialValue;
                        tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
                        if (isValid && assertion) {
                            tuiAssert.assert.apply(tuiAssert, __spread([assertion.call(this, value),
                                String(key) + " in " + name + " received:",
                                value], args));
                        }
                        currentValue = isValid ? value : backupValue;
                    },
                });
            },
        });
    };
}
function errorGetDefault(key, component) {
    return "Default value for " + String(key) + " was not provided in " + component + ", error in Taiga UI Angular Kit";
}
function errorSetDefault(key, component) {
    return "Undefined was passed as " + String(key) + " to " + component + ", which is invalid input, using default value:";
}
function errorSetDefaultInitial(key, component) {
    return "Undefined was passed as default value for " + String(key) + " to " + component + ", error in Taiga UI Angular Kit";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcm9wLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzLyIsInNvdXJjZXMiOlsiZGVmYXVsdC1wcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFHaEQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzFCLFNBQW1DO0lBQ25DLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQsNkJBQWM7O0lBRWQsT0FBTyxVQUFDLE1BQU0sRUFBRSxHQUFHO1FBQ1IsSUFBQSw4QkFBSSxDQUF1QjtRQUNsQyxJQUFNLHNCQUFzQixHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUQsSUFBTSxzQkFBc0IsR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTFELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUMvQixHQUFHLEVBQUg7Z0JBQ0ksU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztnQkFFaEQsT0FBTyxTQUFTLENBQUM7WUFDckIsQ0FBQztZQUNELEdBQUcsRUFBSCxVQUFhLFlBQWtCO2dCQUMzQixJQUFNLE9BQU8sR0FBRyxZQUFZLEtBQUssU0FBUyxDQUFDO2dCQUMzQyxJQUFNLFlBQVksR0FBRyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZELElBQUksWUFBWSxHQUFHLFlBQVksQ0FBQztnQkFFaEMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBRXhDLElBQUksT0FBTyxJQUFJLFNBQVMsRUFBRTtvQkFDdEIsU0FBUyxDQUFDLE1BQU0sT0FBaEIsU0FBUyxZQUNMLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQzt3QkFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFPLElBQUksZUFBWTt3QkFDckMsWUFBWSxHQUNULElBQUksR0FDVDtpQkFDTDtnQkFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7b0JBQzdCLEdBQUcsRUFBSDt3QkFDSSxPQUFPLFlBQVksQ0FBQztvQkFDeEIsQ0FBQztvQkFDRCxHQUFHLEVBQUgsVUFBYSxLQUFXO3dCQUNwQixJQUFNLE9BQU8sR0FBRyxLQUFLLEtBQUssU0FBUyxDQUFDO3dCQUNwQyxJQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7d0JBRWpDLFNBQVMsQ0FBQyxNQUFNLENBQ1osT0FBTyxFQUNQLHNCQUFzQixFQUN0QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQ3RCLENBQUM7d0JBRUYsSUFBSSxPQUFPLElBQUksU0FBUyxFQUFFOzRCQUN0QixTQUFTLENBQUMsTUFBTSxPQUFoQixTQUFTLFlBQ0wsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO2dDQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLFlBQU8sSUFBSSxlQUFZO2dDQUNyQyxLQUFLLEdBQ0YsSUFBSSxHQUNUO3lCQUNMO3dCQUVELFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO29CQUNqRCxDQUFDO2lCQUNKLENBQUMsQ0FBQztZQUNQLENBQUM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsR0FBb0IsRUFBRSxTQUFpQjtJQUM1RCxPQUFPLHVCQUFxQixNQUFNLENBQzlCLEdBQUcsQ0FDTiw2QkFBd0IsU0FBUyxvQ0FBaUMsQ0FBQztBQUN4RSxDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsR0FBb0IsRUFBRSxTQUFpQjtJQUM1RCxPQUFPLDZCQUEyQixNQUFNLENBQ3BDLEdBQUcsQ0FDTixZQUFPLFNBQVMsbURBQWdELENBQUM7QUFDdEUsQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQUMsR0FBb0IsRUFBRSxTQUFpQjtJQUNuRSxPQUFPLCtDQUE2QyxNQUFNLENBQ3RELEdBQUcsQ0FDTixZQUFPLFNBQVMsb0NBQWlDLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuaW1wb3J0IHtUdWlCb29sZWFuSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBjaGVja2luZyBpbnB1dCB2YWx1ZXMgZm9yIHVuZGVmaW5lZC4gWW91IGNhbiBhbHNvIHBhc3NcbiAqIG9wdGlvbmFsIGFzc2VydGlvbiB0byBjaGVjayBpbnB1dCBhZ2FpbnN0LlxuICpcbiAqIFNlZSB7QGxpbmsgY3JlYXRlUHJvcERlY29yYXRvcn0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBDQVVUSU9OOiBUaGlzIGRlY29yYXRvciBvdmVyd3JpdGVzIG90aGVyIGdldHRlcnMgYW5kIHNldHRlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0dWlEZWZhdWx0UHJvcDxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgYXNzZXJ0aW9uPzogVHVpQm9vbGVhbkhhbmRsZXI8VFtLXT4sXG4gICAgLi4uYXJnczogYW55W11cbik6IFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICByZXR1cm4gKHRhcmdldCwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHtuYW1lfSA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgZXJyb3JHZXREZWZhdWx0TWVzc2FnZSA9IGVycm9yR2V0RGVmYXVsdChrZXksIG5hbWUpO1xuICAgICAgICBjb25zdCBlcnJvclNldERlZmF1bHRNZXNzYWdlID0gZXJyb3JTZXREZWZhdWx0KGtleSwgbmFtZSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICBnZXQoKTogdW5kZWZpbmVkIHtcbiAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KGZhbHNlLCBlcnJvckdldERlZmF1bHRNZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHRoaXM6IFQsIGluaXRpYWxWYWx1ZTogVFtLXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBpbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvclNldERlZmF1bHRJbml0aWFsKGtleSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoaXNWYWxpZCwgZXJyb3JNZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmIGFzc2VydGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uLmNhbGwodGhpcywgaW5pdGlhbFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke1N0cmluZyhrZXkpfSBpbiAke25hbWV9IHJlY2VpdmVkOmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0KCk6IFRbS10ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0KHRoaXM6IFQsIHZhbHVlOiBUW0tdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhY2t1cFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JTZXREZWZhdWx0TWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoYmFja3VwVmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgYXNzZXJ0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uLmNhbGwodGhpcywgdmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtTdHJpbmcoa2V5KX0gaW4gJHtuYW1lfSByZWNlaXZlZDpgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBpc1ZhbGlkID8gdmFsdWUgOiBiYWNrdXBWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGVycm9yR2V0RGVmYXVsdChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgRGVmYXVsdCB2YWx1ZSBmb3IgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB3YXMgbm90IHByb3ZpZGVkIGluICR7Y29tcG9uZW50fSwgZXJyb3IgaW4gVGFpZ2EgVUkgQW5ndWxhciBLaXRgO1xufVxuXG5mdW5jdGlvbiBlcnJvclNldERlZmF1bHQoa2V5OiBzdHJpbmcgfCBzeW1ib2wsIGNvbXBvbmVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFVuZGVmaW5lZCB3YXMgcGFzc2VkIGFzICR7U3RyaW5nKFxuICAgICAgICBrZXksXG4gICAgKX0gdG8gJHtjb21wb25lbnR9LCB3aGljaCBpcyBpbnZhbGlkIGlucHV0LCB1c2luZyBkZWZhdWx0IHZhbHVlOmA7XG59XG5cbmZ1bmN0aW9uIGVycm9yU2V0RGVmYXVsdEluaXRpYWwoa2V5OiBzdHJpbmcgfCBzeW1ib2wsIGNvbXBvbmVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFVuZGVmaW5lZCB3YXMgcGFzc2VkIGFzIGRlZmF1bHQgdmFsdWUgZm9yICR7U3RyaW5nKFxuICAgICAgICBrZXksXG4gICAgKX0gdG8gJHtjb21wb25lbnR9LCBlcnJvciBpbiBUYWlnYSBVSSBBbmd1bGFyIEtpdGA7XG59XG4iXX0=