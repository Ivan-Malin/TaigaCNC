import { __decorate, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostListener, Inject, Output, } from '@angular/core';
import { typedFromEvent, watch } from '@taiga-ui/cdk/observables';
import { TuiDestroyService, TuiDirectiveStylesService } from '@taiga-ui/cdk/services';
import { Observable } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
var ON = 'tuiAutofillOn';
var OFF = 'tuiAutofillOff';
var STYLE = "\n@keyframes " + ON + " {\n    from {\n        content: '1';\n    }\n\n    to {\n        content: '2';\n    }\n}\n\n@keyframes " + OFF + " {\n    from {\n        content: '2';\n    }\n\n    to {\n        content: '1';\n    }\n}";
// @dynamic
var TuiAutofilledDirective = /** @class */ (function () {
    function TuiAutofilledDirective(directiveStyles, _a, changeDetectorRef, destroy$) {
        var nativeElement = _a.nativeElement;
        this.tuiAutofilledChange = new EventEmitter();
        directiveStyles.addStyle(STYLE, 'TuiAutofilledDirective');
        // Subscribing to synthetic keydown event on page reload autofill in Chrome
        typedFromEvent(nativeElement, 'keydown')
            .pipe(take(1), takeUntil(destroy$), watch(changeDetectorRef))
            .subscribe();
    }
    TuiAutofilledDirective.prototype.onAnimationStart = function (_a) {
        var animationName = _a.animationName;
        if (animationName === ON) {
            this.tuiAutofilledChange.emit(true);
        }
        else if (animationName === OFF) {
            this.tuiAutofilledChange.emit(false);
        }
    };
    TuiAutofilledDirective.ctorParameters = function () { return [
        { type: TuiDirectiveStylesService, decorators: [{ type: Inject, args: [TuiDirectiveStylesService,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Output()
    ], TuiAutofilledDirective.prototype, "tuiAutofilledChange", void 0);
    __decorate([
        HostListener('animationstart', ['$event'])
    ], TuiAutofilledDirective.prototype, "onAnimationStart", null);
    TuiAutofilledDirective = __decorate([
        Directive({
            selector: 'input[tuiAutofilledChange]',
            host: {
                class: 'tui-autofill',
            },
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(TuiDirectiveStylesService)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(ChangeDetectorRef)),
        __param(3, Inject(TuiDestroyService))
    ], TuiAutofilledDirective);
    return TuiAutofilledDirective;
}());
export { TuiAutofilledDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZpbGxlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYXV0b2ZpbGxlZC8iLCJzb3VyY2VzIjpbImF1dG9maWxsZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixNQUFNLEVBQ04sTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxjQUFjLEVBQUUsS0FBSyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGlCQUFpQixFQUFFLHlCQUF5QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDcEYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLElBQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQztBQUMzQixJQUFNLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQztBQUM3QixJQUFNLEtBQUssR0FBRyxrQkFDRCxFQUFFLGdIQVVGLEdBQUcsOEZBUWQsQ0FBQztBQUVILFdBQVc7QUFRWDtJQWFJLGdDQUVJLGVBQTBDLEVBQ3RCLEVBQTZDLEVBQ3RDLGlCQUFvQyxFQUNwQyxRQUEwQjtZQUZoQyxnQ0FBYTtRQWQ3Qix3QkFBbUIsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBa0J2RCxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRTFELDJFQUEyRTtRQUMzRSxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQzthQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUM1RCxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBckJELGlEQUFnQixHQUFoQixVQUFpQixFQUErQjtZQUE5QixnQ0FBYTtRQUMzQixJQUFJLGFBQWEsS0FBSyxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QzthQUFNLElBQUksYUFBYSxLQUFLLEdBQUcsRUFBRTtZQUM5QixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQzs7Z0JBSW9CLHlCQUF5Qix1QkFEekMsTUFBTSxTQUFDLHlCQUF5QjtnQkFFSSxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtnQkFDNEIsaUJBQWlCLHVCQUE5RCxNQUFNLFNBQUMsaUJBQWlCO2dCQUNZLFVBQVUsdUJBQTlDLE1BQU0sU0FBQyxpQkFBaUI7O0lBaEI3QjtRQURDLE1BQU0sRUFBRTt1RUFDa0Q7SUFHM0Q7UUFEQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztrRUFPMUM7SUFYUSxzQkFBc0I7UUFQbEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLDRCQUE0QjtZQUN0QyxJQUFJLEVBQUU7Z0JBQ0YsS0FBSyxFQUFFLGNBQWM7YUFDeEI7WUFDRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUNqQyxDQUFDO1FBZU8sV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTtRQUVqQyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNsQixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7T0FsQnJCLHNCQUFzQixDQTJCbEM7SUFBRCw2QkFBQztDQUFBLEFBM0JELElBMkJDO1NBM0JZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHlwZWRGcm9tRXZlbnQsIHdhdGNofSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2UsIFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZSwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IE9OID0gJ3R1aUF1dG9maWxsT24nO1xuY29uc3QgT0ZGID0gJ3R1aUF1dG9maWxsT2ZmJztcbmNvbnN0IFNUWUxFID0gYFxuQGtleWZyYW1lcyAke09OfSB7XG4gICAgZnJvbSB7XG4gICAgICAgIGNvbnRlbnQ6ICcxJztcbiAgICB9XG5cbiAgICB0byB7XG4gICAgICAgIGNvbnRlbnQ6ICcyJztcbiAgICB9XG59XG5cbkBrZXlmcmFtZXMgJHtPRkZ9IHtcbiAgICBmcm9tIHtcbiAgICAgICAgY29udGVudDogJzInO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgICAgY29udGVudDogJzEnO1xuICAgIH1cbn1gO1xuXG4vLyBAZHluYW1pY1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dFt0dWlBdXRvZmlsbGVkQ2hhbmdlXScsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ3R1aS1hdXRvZmlsbCcsXG4gICAgfSxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUF1dG9maWxsZWREaXJlY3RpdmUge1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aUF1dG9maWxsZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBASG9zdExpc3RlbmVyKCdhbmltYXRpb25zdGFydCcsIFsnJGV2ZW50J10pXG4gICAgb25BbmltYXRpb25TdGFydCh7YW5pbWF0aW9uTmFtZX06IEFuaW1hdGlvbkV2ZW50KSB7XG4gICAgICAgIGlmIChhbmltYXRpb25OYW1lID09PSBPTikge1xuICAgICAgICAgICAgdGhpcy50dWlBdXRvZmlsbGVkQ2hhbmdlLmVtaXQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uTmFtZSA9PT0gT0ZGKSB7XG4gICAgICAgICAgICB0aGlzLnR1aUF1dG9maWxsZWRDaGFuZ2UuZW1pdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlEaXJlY3RpdmVTdHlsZXNTZXJ2aWNlKVxuICAgICAgICBkaXJlY3RpdmVTdHlsZXM6IFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHZvaWQ+LFxuICAgICkge1xuICAgICAgICBkaXJlY3RpdmVTdHlsZXMuYWRkU3R5bGUoU1RZTEUsICdUdWlBdXRvZmlsbGVkRGlyZWN0aXZlJyk7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJpbmcgdG8gc3ludGhldGljIGtleWRvd24gZXZlbnQgb24gcGFnZSByZWxvYWQgYXV0b2ZpbGwgaW4gQ2hyb21lXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdrZXlkb3duJylcbiAgICAgICAgICAgIC5waXBlKHRha2UoMSksIHRha2VVbnRpbChkZXN0cm95JCksIHdhdGNoKGNoYW5nZURldGVjdG9yUmVmKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4iXX0=