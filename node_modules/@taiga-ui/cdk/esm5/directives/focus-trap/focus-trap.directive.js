import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, OnDestroy, Renderer2, } from '@angular/core';
import { containsOrAfter } from '@taiga-ui/cdk/utils/dom';
import { blurNativeFocused, getClosestKeyboardFocusable, getNativeFocused, setNativeFocused, } from '@taiga-ui/cdk/utils/focus';
// @dynamic
var TuiFocusTrapDirective = /** @class */ (function () {
    function TuiFocusTrapDirective(documentRef, elementRef, renderer) {
        var _this = this;
        this.documentRef = documentRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.activeElement = getNativeFocused(this.documentRef);
        /**
         * This would cause currently focused element to lose focus
         * but it might cause ExpressionChanged error due to potential HostBinding.
         * Microtask keeps it in the same frame but allows change detection to run
         */
        Promise.resolve().then(function () {
            setNativeFocused(_this.elementRef.nativeElement);
        });
    }
    TuiFocusTrapDirective.prototype.onBlur = function () {
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'tabIndex');
    };
    TuiFocusTrapDirective.prototype.onFocusIn = function (node) {
        if (containsOrAfter(this.elementRef.nativeElement, node)) {
            return;
        }
        var focusable = getClosestKeyboardFocusable(this.elementRef.nativeElement, false, this.elementRef.nativeElement);
        if (focusable) {
            setNativeFocused(focusable);
        }
    };
    TuiFocusTrapDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        blurNativeFocused(this.documentRef);
        /**
         * HostListeners are triggered even after ngOnDestroy
         * {@link https://github.com/angular/angular/issues/38100}
         * so we need to delay it but stay in the same sync cycle,
         * therefore using Promise instead of setTimeout
         */
        Promise.resolve().then(function () {
            if (_this.activeElement instanceof HTMLElement) {
                setNativeFocused(_this.activeElement);
            }
        });
    };
    TuiFocusTrapDirective.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }
    ]; };
    __decorate([
        HostListener('blur')
    ], TuiFocusTrapDirective.prototype, "onBlur", null);
    __decorate([
        HostListener('window:focusin.silent', ['$event.target'])
    ], TuiFocusTrapDirective.prototype, "onFocusIn", null);
    TuiFocusTrapDirective = __decorate([
        Directive({
            selector: '[tuiFocusTrap]',
            host: {
                tabIndex: '0',
            },
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(Renderer2))
    ], TuiFocusTrapDirective);
    return TuiFocusTrapDirective;
}());
export { TuiFocusTrapDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdHJhcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvZm9jdXMtdHJhcC8iLCJzb3VyY2VzIjpbImZvY3VzLXRyYXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLDJCQUEyQixFQUMzQixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEdBQ25CLE1BQU0sMkJBQTJCLENBQUM7QUFFbkMsV0FBVztBQU9YO0lBR0ksK0JBQ3VDLFdBQXFCLEVBRXZDLFVBQW1DLEVBQ2hCLFFBQW1CO1FBSjNELGlCQWNDO1FBYnNDLGdCQUFXLEdBQVgsV0FBVyxDQUFVO1FBRXZDLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFOMUMsa0JBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFRaEU7Ozs7V0FJRztRQUNILE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDbkIsZ0JBQWdCLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxzQ0FBTSxHQUFOO1FBQ0ksSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUdELHlDQUFTLEdBQVQsVUFBVSxJQUFVO1FBQ2hCLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ3RELE9BQU87U0FDVjtRQUVELElBQU0sU0FBUyxHQUFHLDJCQUEyQixDQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFDN0IsS0FBSyxFQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUNoQyxDQUFDO1FBRUYsSUFBSSxTQUFTLEVBQUU7WUFDWCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvQjtJQUNMLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQUEsaUJBY0M7UUFiRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFcEM7Ozs7O1dBS0c7UUFDSCxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ25CLElBQUksS0FBSSxDQUFDLGFBQWEsWUFBWSxXQUFXLEVBQUU7Z0JBQzNDLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN4QztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBbkRtRCxRQUFRLHVCQUF2RCxNQUFNLFNBQUMsUUFBUTtnQkFFYSxVQUFVLHVCQUR0QyxNQUFNLFNBQUMsVUFBVTtnQkFFNEIsU0FBUyx1QkFBdEQsTUFBTSxTQUFDLFNBQVM7O0lBYXJCO1FBREMsWUFBWSxDQUFDLE1BQU0sQ0FBQzt1REFHcEI7SUFHRDtRQURDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzBEQWV4RDtJQXZDUSxxQkFBcUI7UUFOakMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixJQUFJLEVBQUU7Z0JBQ0YsUUFBUSxFQUFFLEdBQUc7YUFDaEI7U0FDSixDQUFDO1FBS08sV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEIsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFbEIsV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7T0FQYixxQkFBcUIsQ0F3RGpDO0lBQUQsNEJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIE9uRGVzdHJveSxcbiAgICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtjb250YWluc09yQWZ0ZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7XG4gICAgYmx1ck5hdGl2ZUZvY3VzZWQsXG4gICAgZ2V0Q2xvc2VzdEtleWJvYXJkRm9jdXNhYmxlLFxuICAgIGdldE5hdGl2ZUZvY3VzZWQsXG4gICAgc2V0TmF0aXZlRm9jdXNlZCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9mb2N1cyc7XG5cbi8vIEBkeW5hbWljXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlGb2N1c1RyYXBdJyxcbiAgICBob3N0OiB7XG4gICAgICAgIHRhYkluZGV4OiAnMCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRm9jdXNUcmFwRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFjdGl2ZUVsZW1lbnQgPSBnZXROYXRpdmVGb2N1c2VkKHRoaXMuZG9jdW1lbnRSZWYpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnRSZWY6IERvY3VtZW50LFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoUmVuZGVyZXIyKSBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHdvdWxkIGNhdXNlIGN1cnJlbnRseSBmb2N1c2VkIGVsZW1lbnQgdG8gbG9zZSBmb2N1c1xuICAgICAgICAgKiBidXQgaXQgbWlnaHQgY2F1c2UgRXhwcmVzc2lvbkNoYW5nZWQgZXJyb3IgZHVlIHRvIHBvdGVudGlhbCBIb3N0QmluZGluZy5cbiAgICAgICAgICogTWljcm90YXNrIGtlZXBzIGl0IGluIHRoZSBzYW1lIGZyYW1lIGJ1dCBhbGxvd3MgY2hhbmdlIGRldGVjdGlvbiB0byBydW5cbiAgICAgICAgICovXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2V0TmF0aXZlRm9jdXNlZCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICAgIG9uQmx1cigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0YWJJbmRleCcpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpmb2N1c2luLnNpbGVudCcsIFsnJGV2ZW50LnRhcmdldCddKVxuICAgIG9uRm9jdXNJbihub2RlOiBOb2RlKSB7XG4gICAgICAgIGlmIChjb250YWluc09yQWZ0ZXIodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb2N1c2FibGUgPSBnZXRDbG9zZXN0S2V5Ym9hcmRGb2N1c2FibGUoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGZvY3VzYWJsZSkge1xuICAgICAgICAgICAgc2V0TmF0aXZlRm9jdXNlZChmb2N1c2FibGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGJsdXJOYXRpdmVGb2N1c2VkKHRoaXMuZG9jdW1lbnRSZWYpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3N0TGlzdGVuZXJzIGFyZSB0cmlnZ2VyZWQgZXZlbiBhZnRlciBuZ09uRGVzdHJveVxuICAgICAgICAgKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzgxMDB9XG4gICAgICAgICAqIHNvIHdlIG5lZWQgdG8gZGVsYXkgaXQgYnV0IHN0YXkgaW4gdGhlIHNhbWUgc3luYyBjeWNsZSxcbiAgICAgICAgICogdGhlcmVmb3JlIHVzaW5nIFByb21pc2UgaW5zdGVhZCBvZiBzZXRUaW1lb3V0XG4gICAgICAgICAqL1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHNldE5hdGl2ZUZvY3VzZWQodGhpcy5hY3RpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19