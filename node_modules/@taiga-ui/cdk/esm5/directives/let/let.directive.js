import { __decorate, __param } from "tslib";
import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { TuiLetContext } from './let-context';
/**
 * Works like *ngIf but does not have a condition â€” use it to declare
 * the result of pipes calculation (i.e. async pipe)
 */
var TuiLetDirective = /** @class */ (function () {
    function TuiLetDirective(viewContainer, templateRef) {
        viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
    }
    /**
     * Asserts the correct type of the context for the template that `TuiLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `TuiLet` structural directive renders its template with a specific context type.
     */
    TuiLetDirective.ngTemplateContextGuard = function (_dir, _ctx) {
        return true;
    };
    TuiLetDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiLetDirective.prototype, "tuiLet", void 0);
    TuiLetDirective = __decorate([
        Directive({
            selector: '[tuiLet]',
        }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(TemplateRef))
    ], TuiLetDirective);
    return TuiLetDirective;
}());
export { TuiLetDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9sZXQvIiwic291cmNlcyI6WyJsZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFNUM7OztHQUdHO0FBSUg7SUFJSSx5QkFDOEIsYUFBK0IsRUFDcEMsV0FBMEM7UUFFL0QsYUFBYSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxJQUFJLGFBQWEsQ0FBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLHNDQUFzQixHQUE3QixVQUNJLElBQXdCLEVBQ3hCLElBQVM7UUFFVCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOztnQkFqQjRDLGdCQUFnQix1QkFBeEQsTUFBTSxTQUFDLGdCQUFnQjtnQkFDVSxXQUFXLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7SUFKdkI7UUFEQyxLQUFLLEVBQUU7bURBQ0c7SUFGRixlQUFlO1FBSDNCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1NBQ3ZCLENBQUM7UUFNTyxXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1FBQ3hCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO09BTmYsZUFBZSxDQXVCM0I7SUFBRCxzQkFBQztDQUFBLEFBdkJELElBdUJDO1NBdkJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlMZXRDb250ZXh0fSBmcm9tICcuL2xldC1jb250ZXh0JztcblxuLyoqXG4gKiBXb3JrcyBsaWtlICpuZ0lmIGJ1dCBkb2VzIG5vdCBoYXZlIGEgY29uZGl0aW9uIOKAlCB1c2UgaXQgdG8gZGVjbGFyZVxuICogdGhlIHJlc3VsdCBvZiBwaXBlcyBjYWxjdWxhdGlvbiAoaS5lLiBhc3luYyBwaXBlKVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlMZXRdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTGV0RGlyZWN0aXZlPFQ+IHtcbiAgICBASW5wdXQoKVxuICAgIHR1aUxldCE6IFQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBASW5qZWN0KFRlbXBsYXRlUmVmKSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8VHVpTGV0Q29udGV4dDxUPj4sXG4gICAgKSB7XG4gICAgICAgIHZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRlbXBsYXRlUmVmLCBuZXcgVHVpTGV0Q29udGV4dDxUPih0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzZXJ0cyB0aGUgY29ycmVjdCB0eXBlIG9mIHRoZSBjb250ZXh0IGZvciB0aGUgdGVtcGxhdGUgdGhhdCBgVHVpTGV0YCB3aWxsIHJlbmRlci5cbiAgICAgKlxuICAgICAqIFRoZSBwcmVzZW5jZSBvZiB0aGlzIG1ldGhvZCBpcyBhIHNpZ25hbCB0byB0aGUgSXZ5IHRlbXBsYXRlIHR5cGUtY2hlY2sgY29tcGlsZXIgdGhhdCB0aGVcbiAgICAgKiBgVHVpTGV0YCBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZSByZW5kZXJzIGl0cyB0ZW1wbGF0ZSB3aXRoIGEgc3BlY2lmaWMgY29udGV4dCB0eXBlLlxuICAgICAqL1xuICAgIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkPFQ+KFxuICAgICAgICBfZGlyOiBUdWlMZXREaXJlY3RpdmU8VD4sXG4gICAgICAgIF9jdHg6IGFueSxcbiAgICApOiBfY3R4IGlzIFR1aUxldERpcmVjdGl2ZTxUPiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiJdfQ==