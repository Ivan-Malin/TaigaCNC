import { __decorate, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
export function nonNegativeFiniteAssertion(value) {
    return isFinite(value) && value >= 0;
}
export function volumeAssertion(volume) {
    return isFinite(volume) && volume >= 0 && volume <= 1;
}
var TuiMediaDirective = /** @class */ (function () {
    function TuiMediaDirective(elementRef) {
        this.elementRef = elementRef;
        this.volume = 1;
        this.currentTimeChange = new EventEmitter();
        this.pausedChange = new EventEmitter();
        this.volumeChange = new EventEmitter();
        this.playbackRate = 1;
    }
    Object.defineProperty(TuiMediaDirective.prototype, "playbackRateSetter", {
        set: function (playbackRate) {
            this.updatePlaybackRate(playbackRate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMediaDirective.prototype, "currentTime", {
        get: function () {
            return this.elementRef.nativeElement.currentTime;
        },
        set: function (currentTime) {
            if (Math.abs(currentTime - this.currentTime) > 0.001) {
                this.elementRef.nativeElement.currentTime = currentTime;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMediaDirective.prototype, "paused", {
        get: function () {
            return this.elementRef.nativeElement.paused;
        },
        set: function (paused) {
            if (paused) {
                this.elementRef.nativeElement.pause();
            }
            else {
                this.elementRef.nativeElement.play();
                this.updatePlaybackRate(this.playbackRate);
            }
        },
        enumerable: true,
        configurable: true
    });
    // @bad TODO: Make sure no other events can affect this like network issues etc.
    TuiMediaDirective.prototype.onPausedChange = function (paused) {
        this.pausedChange.emit(paused);
        this.updatePlaybackRate(this.playbackRate);
    };
    TuiMediaDirective.prototype.onVolumeChange = function () {
        this.volume = this.elementRef.nativeElement.volume;
        this.volumeChange.emit(this.volume);
    };
    TuiMediaDirective.prototype.onCurrentTimeChange = function () {
        this.currentTimeChange.emit(this.currentTime);
    };
    TuiMediaDirective.prototype.changeDetectionTrigger = function () {
        // @bad TODO: consider if other events need to trigger CD
    };
    TuiMediaDirective.prototype.updatePlaybackRate = function (playbackRate) {
        this.playbackRate = playbackRate;
        this.elementRef.nativeElement.playbackRate = this.playbackRate;
    };
    TuiMediaDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('volume'),
        tuiDefaultProp(volumeAssertion)
    ], TuiMediaDirective.prototype, "volume", void 0);
    __decorate([
        Input('playbackRate'),
        tuiRequiredSetter(nonNegativeFiniteAssertion)
    ], TuiMediaDirective.prototype, "playbackRateSetter", null);
    __decorate([
        Input(),
        tuiRequiredSetter(nonNegativeFiniteAssertion)
    ], TuiMediaDirective.prototype, "currentTime", null);
    __decorate([
        Input()
    ], TuiMediaDirective.prototype, "paused", null);
    __decorate([
        Output()
    ], TuiMediaDirective.prototype, "currentTimeChange", void 0);
    __decorate([
        Output()
    ], TuiMediaDirective.prototype, "pausedChange", void 0);
    __decorate([
        Output()
    ], TuiMediaDirective.prototype, "volumeChange", void 0);
    __decorate([
        HostListener('ended', ['true']),
        HostListener('pause', ['true']),
        HostListener('play', ['false'])
    ], TuiMediaDirective.prototype, "onPausedChange", null);
    __decorate([
        HostListener('volumechange')
    ], TuiMediaDirective.prototype, "onVolumeChange", null);
    __decorate([
        HostListener('timeupdate'),
        HostListener('seeking'),
        HostListener('seeked')
    ], TuiMediaDirective.prototype, "onCurrentTimeChange", null);
    __decorate([
        HostListener('durationchange')
    ], TuiMediaDirective.prototype, "changeDetectionTrigger", null);
    TuiMediaDirective = __decorate([
        Directive({
            selector: 'video[tuiMedia], audio[tuiMedia]',
            exportAs: 'tuiMedia',
        }),
        __param(0, Inject(ElementRef))
    ], TuiMediaDirective);
    return TuiMediaDirective;
}());
export { TuiMediaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL21lZGlhLyIsInNvdXJjZXMiOlsibWVkaWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFM0UsTUFBTSxVQUFVLDBCQUEwQixDQUFDLEtBQWE7SUFDcEQsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFjO0lBQzFDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBTUQ7SUF5Q0ksMkJBRXFCLFVBQXdDO1FBQXhDLGVBQVUsR0FBVixVQUFVLENBQThCO1FBdkM3RCxXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBMkJGLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHL0MsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRzNDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUUzQyxpQkFBWSxHQUFHLENBQUMsQ0FBQztJQUt0QixDQUFDO0lBcENKLHNCQUFJLGlEQUFrQjthQUF0QixVQUF1QixZQUFvQjtZQUN2QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7SUFJRCxzQkFBSSwwQ0FBVzthQW9DZjtZQUNJLE9BQU8sSUFBSSxDQUFD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Q0FBQztZQUNQLFFBQVEsRUFBRSxrQ0FBa0M7WUFDNUMsUUFBUSxFQUFFLFVBQVU7U0FDdkIsQ0FBQztRQTJDTyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQTFDZCxpQkFBaUIsQ0FxRjdCO0lBQUQsd0JBQUM7Q0FBQSxBQXJGRCxJQXFGQztTQXJGWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCB0dWlSZXF1aXJlZFNldHRlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vbk5lZ2F0aXZlRmluaXRlQXNzZXJ0aW9uKHZhbHVlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpICYmIHZhbHVlID49IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2b2x1bWVBc3NlcnRpb24odm9sdW1lOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNGaW5pdGUodm9sdW1lKSAmJiB2b2x1bWUgPj0gMCAmJiB2b2x1bWUgPD0gMTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd2aWRlb1t0dWlNZWRpYV0sIGF1ZGlvW3R1aU1lZGlhXScsXG4gICAgZXhwb3J0QXM6ICd0dWlNZWRpYScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU1lZGlhRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygndm9sdW1lJylcbiAgICBAdHVpRGVmYXVsdFByb3Aodm9sdW1lQXNzZXJ0aW9uKVxuICAgIHZvbHVtZSA9IDE7XG5cbiAgICBASW5wdXQoJ3BsYXliYWNrUmF0ZScpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKG5vbk5lZ2F0aXZlRmluaXRlQXNzZXJ0aW9uKVxuICAgIHNldCBwbGF5YmFja1JhdGVTZXR0ZXIocGxheWJhY2tSYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlSZXF1aXJlZFNldHRlcihub25OZWdhdGl2ZUZpbml0ZUFzc2VydGlvbilcbiAgICBzZXQgY3VycmVudFRpbWUoY3VycmVudFRpbWU6IG51bWJlcikge1xuICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudFRpbWUgLSB0aGlzLmN1cnJlbnRUaW1lKSA+IDAuMDAxKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgcGF1c2VkKHBhdXNlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAocGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5wYXVzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGxheSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja1JhdGUodGhpcy5wbGF5YmFja1JhdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgY3VycmVudFRpbWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHBhdXNlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHZvbHVtZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gICAgcHJpdmF0ZSBwbGF5YmFja1JhdGUgPSAxO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxNZWRpYUVsZW1lbnQ+LFxuICAgICkge31cblxuICAgIGdldCBwYXVzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5wYXVzZWQ7XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRUaW1lKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jdXJyZW50VGltZTtcbiAgICB9XG5cbiAgICAvLyBAYmFkIFRPRE86IE1ha2Ugc3VyZSBubyBvdGhlciBldmVudHMgY2FuIGFmZmVjdCB0aGlzIGxpa2UgbmV0d29yayBpc3N1ZXMgZXRjLlxuICAgIEBIb3N0TGlzdGVuZXIoJ2VuZGVkJywgWyd0cnVlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcigncGF1c2UnLCBbJ3RydWUnXSlcbiAgICBASG9zdExpc3RlbmVyKCdwbGF5JywgWydmYWxzZSddKVxuICAgIG9uUGF1c2VkQ2hhbmdlKHBhdXNlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnBhdXNlZENoYW5nZS5lbWl0KHBhdXNlZCk7XG4gICAgICAgIHRoaXMudXBkYXRlUGxheWJhY2tSYXRlKHRoaXMucGxheWJhY2tSYXRlKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd2b2x1bWVjaGFuZ2UnKVxuICAgIG9uVm9sdW1lQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLnZvbHVtZSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnZvbHVtZTtcbiAgICAgICAgdGhpcy52b2x1bWVDaGFuZ2UuZW1pdCh0aGlzLnZvbHVtZSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigndGltZXVwZGF0ZScpXG4gICAgQEhvc3RMaXN0ZW5lcignc2Vla2luZycpXG4gICAgQEhvc3RMaXN0ZW5lcignc2Vla2VkJylcbiAgICBvbkN1cnJlbnRUaW1lQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lQ2hhbmdlLmVtaXQodGhpcy5jdXJyZW50VGltZSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZHVyYXRpb25jaGFuZ2UnKVxuICAgIGNoYW5nZURldGVjdGlvblRyaWdnZXIoKSB7XG4gICAgICAgIC8vIEBiYWQgVE9ETzogY29uc2lkZXIgaWYgb3RoZXIgZXZlbnRzIG5lZWQgdG8gdHJpZ2dlciBDRFxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlUGxheWJhY2tSYXRlKHBsYXliYWNrUmF0ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGxheWJhY2tSYXRlID0gcGxheWJhY2tSYXRlO1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5wbGF5YmFja1JhdGUgPSB0aGlzLnBsYXliYWNrUmF0ZTtcbiAgICB9XG59XG4iXX0=