import { __decorate } from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS, } from '@angular/forms';
import { EMPTY_FUNCTION, EMPTY_VALIDATOR } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
var TuiValidatorDirective = /** @class */ (function () {
    function TuiValidatorDirective() {
        this.onChange = EMPTY_FUNCTION;
        this.tuiValidator = EMPTY_VALIDATOR;
    }
    TuiValidatorDirective_1 = TuiValidatorDirective;
    TuiValidatorDirective.prototype.validate = function (control) {
        return this.tuiValidator(control);
    };
    TuiValidatorDirective.prototype.registerOnValidatorChange = function (onChange) {
        this.onChange = onChange;
    };
    TuiValidatorDirective.prototype.ngOnChanges = function () {
        this.onChange();
    };
    TuiValidatorDirective.prototype.ngOnDestroy = function () {
        this.tuiValidator = EMPTY_VALIDATOR;
    };
    var TuiValidatorDirective_1;
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiValidatorDirective.prototype, "tuiValidator", void 0);
    TuiValidatorDirective = TuiValidatorDirective_1 = __decorate([
        Directive({
            selector: '[tuiValidator]',
            providers: [
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return TuiValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], TuiValidatorDirective);
    return TuiValidatorDirective;
}());
export { TuiValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy92YWxpZGF0b3IvIiwic291cmNlcyI6WyJ2YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFFSCxhQUFhLEdBSWhCLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFDLGNBQWMsRUFBRSxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFZeEQ7SUFBQTtRQUNZLGFBQVEsR0FBRyxjQUFjLENBQUM7UUFJbEMsaUJBQVksR0FBZ0IsZUFBZSxDQUFDO0lBaUJoRCxDQUFDOzhCQXRCWSxxQkFBcUI7SUFPOUIsd0NBQVEsR0FBUixVQUFTLE9BQXdCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQseURBQXlCLEdBQXpCLFVBQTBCLFFBQWtCO1FBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxlQUFlLENBQUM7SUFDeEMsQ0FBQzs7SUFoQkQ7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7K0RBQzJCO0lBTG5DLHFCQUFxQjtRQVZqQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsYUFBYTtvQkFDdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsdUJBQXFCLEVBQXJCLENBQXFCLENBQUM7b0JBQ3BELEtBQUssRUFBRSxJQUFJO2lCQUNkO2FBQ0o7U0FDSixDQUFDO09BQ1cscUJBQXFCLENBc0JqQztJQUFELDRCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0F0QlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGZvcndhcmRSZWYsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0Q29udHJvbCxcbiAgICBOR19WQUxJREFUT1JTLFxuICAgIFZhbGlkYXRpb25FcnJvcnMsXG4gICAgVmFsaWRhdG9yLFxuICAgIFZhbGlkYXRvckZuLFxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0VNUFRZX0ZVTkNUSU9OLCBFTVBUWV9WQUxJREFUT1J9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGVjb3JhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVZhbGlkYXRvcl0nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVHVpVmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgb25DaGFuZ2UgPSBFTVBUWV9GVU5DVElPTjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICB0dWlWYWxpZGF0b3I6IFZhbGlkYXRvckZuID0gRU1QVFlfVkFMSURBVE9SO1xuXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy50dWlWYWxpZGF0b3IoY29udHJvbCk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShvbkNoYW5nZTogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudHVpVmFsaWRhdG9yID0gRU1QVFlfVkFMSURBVE9SO1xuICAgIH1cbn1cbiJdfQ==