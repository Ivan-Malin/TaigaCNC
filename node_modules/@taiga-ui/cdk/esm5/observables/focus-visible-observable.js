import { isNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { concat, merge } from 'rxjs';
import { distinctUntilChanged, filter, ignoreElements, mapTo, repeat, shareReplay, startWith, switchMapTo, take, withLatestFrom, } from 'rxjs/operators';
import { tuiIsAlive } from './is-alive';
import { typedFromEvent } from './typed-from-event';
var documentMouseUpIsAlive$;
var documentMouseDownIsAlive$;
export function focusVisibleObservable(element) {
    var elementBlur$ = typedFromEvent(element, 'blur');
    var ownerDocument = element.ownerDocument;
    if (!ownerDocument) {
        throw new Error('element does not have ownerDocument');
    }
    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
        documentMouseUpIsAlive$ = typedFromEvent(ownerDocument, 'mouseup', {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay(1));
        documentMouseDownIsAlive$ = typedFromEvent(ownerDocument, 'mousedown', {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay(1));
    }
    return merge(
    // focus events excluding ones that came right after mouse action
    concat(typedFromEvent(element, 'focus').pipe(take(1)), 
    // filtering out blur events when element remains focused so that we ignore browser tab focus loss
    elementBlur$.pipe(filter(function () { return !isNativeFocused(element); }), take(1), ignoreElements())).pipe(repeat(), withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, function (_event, elementActual, documentActual) {
        return elementActual || documentActual;
    }), filter(function (isUserFocus) { return !isUserFocus; }))).pipe(switchMapTo(elementBlur$.pipe(mapTo(false), take(1), startWith(true))), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcy8iLCJzb3VyY2VzIjpbImZvY3VzLXZpc2libGUtb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sY0FBYyxFQUNkLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxFQUNKLGNBQWMsR0FDakIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxJQUFJLHVCQUE0QyxDQUFDO0FBQ2pELElBQUkseUJBQThDLENBQUM7QUFFbkQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE9BQWdCO0lBQ25ELElBQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUMsSUFBQSxxQ0FBYSxDQUFZO0lBRWhDLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsSUFBSSxDQUFDLHlCQUF5QixJQUFJLENBQUMsdUJBQXVCLEVBQUU7UUFDeEQsdUJBQXVCLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUU7WUFDL0QsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQseUJBQXlCLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUU7WUFDbkUsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxPQUFPLEtBQUs7SUFDUixpRUFBaUU7SUFDakUsTUFBTSxDQUNGLGNBQWMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxrR0FBa0c7SUFDbEcsWUFBWSxDQUFDLElBQUksQ0FDYixNQUFNLENBQUMsY0FBTSxPQUFBLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUF6QixDQUF5QixDQUFDLEVBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxjQUFjLEVBQUUsQ0FDbkIsQ0FDSixDQUFDLElBQUksQ0FDRixNQUFNLEVBQUUsRUFDUixjQUFjLENBQ1YseUJBQXlCLEVBQ3pCLHVCQUF1QixFQUN2QixVQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYztRQUNsQyxPQUFBLGFBQWEsSUFBSSxjQUFjO0lBQS9CLENBQStCLENBQ3RDLEVBQ0QsTUFBTSxDQUFDLFVBQUEsV0FBVyxJQUFJLE9BQUEsQ0FBQyxXQUFXLEVBQVosQ0FBWSxDQUFDLENBQ3RDLENBQ0osQ0FBQyxJQUFJLENBQ0YsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUN0RSxvQkFBb0IsRUFBRSxDQUN6QixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNOYXRpdmVGb2N1c2VkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2ZvY3VzJztcbmltcG9ydCB7Y29uY2F0LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBpZ25vcmVFbGVtZW50cyxcbiAgICBtYXBUbyxcbiAgICByZXBlYXQsXG4gICAgc2hhcmVSZXBsYXksXG4gICAgc3RhcnRXaXRoLFxuICAgIHN3aXRjaE1hcFRvLFxuICAgIHRha2UsXG4gICAgd2l0aExhdGVzdEZyb20sXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7dHVpSXNBbGl2ZX0gZnJvbSAnLi9pcy1hbGl2ZSc7XG5pbXBvcnQge3R5cGVkRnJvbUV2ZW50fSBmcm9tICcuL3R5cGVkLWZyb20tZXZlbnQnO1xuXG5sZXQgZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5sZXQgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZU9ic2VydmFibGUoZWxlbWVudDogRWxlbWVudCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGVsZW1lbnRCbHVyJCA9IHR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdibHVyJyk7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VsZW1lbnQgZG9lcyBub3QgaGF2ZSBvd25lckRvY3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkIHx8ICFkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCkge1xuICAgICAgICBkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCA9IHR5cGVkRnJvbUV2ZW50KG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywge1xuICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgfSkucGlwZSh0dWlJc0FsaXZlKCksIHN0YXJ0V2l0aChmYWxzZSksIHNoYXJlUmVwbGF5KDEpKTtcbiAgICAgICAgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCA9IHR5cGVkRnJvbUV2ZW50KG93bmVyRG9jdW1lbnQsICdtb3VzZWRvd24nLCB7XG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICB9KS5waXBlKHR1aUlzQWxpdmUoKSwgc3RhcnRXaXRoKGZhbHNlKSwgc2hhcmVSZXBsYXkoMSkpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgLy8gZm9jdXMgZXZlbnRzIGV4Y2x1ZGluZyBvbmVzIHRoYXQgY2FtZSByaWdodCBhZnRlciBtb3VzZSBhY3Rpb25cbiAgICAgICAgY29uY2F0KFxuICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZWxlbWVudCwgJ2ZvY3VzJykucGlwZSh0YWtlKDEpKSxcbiAgICAgICAgICAgIC8vIGZpbHRlcmluZyBvdXQgYmx1ciBldmVudHMgd2hlbiBlbGVtZW50IHJlbWFpbnMgZm9jdXNlZCBzbyB0aGF0IHdlIGlnbm9yZSBicm93c2VyIHRhYiBmb2N1cyBsb3NzXG4gICAgICAgICAgICBlbGVtZW50Qmx1ciQucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKCkgPT4gIWlzTmF0aXZlRm9jdXNlZChlbGVtZW50KSksXG4gICAgICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgICAgICBpZ25vcmVFbGVtZW50cygpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgcmVwZWF0KCksXG4gICAgICAgICAgICB3aXRoTGF0ZXN0RnJvbShcbiAgICAgICAgICAgICAgICBkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50TW91c2VVcElzQWxpdmUkLFxuICAgICAgICAgICAgICAgIChfZXZlbnQsIGVsZW1lbnRBY3R1YWwsIGRvY3VtZW50QWN0dWFsKSA9PlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50QWN0dWFsIHx8IGRvY3VtZW50QWN0dWFsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZpbHRlcihpc1VzZXJGb2N1cyA9PiAhaXNVc2VyRm9jdXMpLFxuICAgICAgICApLFxuICAgICkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwVG8oZWxlbWVudEJsdXIkLnBpcGUobWFwVG8oZmFsc2UpLCB0YWtlKDEpLCBzdGFydFdpdGgodHJ1ZSkpKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICApO1xufVxuIl19