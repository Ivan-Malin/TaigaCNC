import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, Renderer2 } from '@angular/core';
import { TUI_DEFAULT_RENDERER } from '@taiga-ui/cdk/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk/tokens";
/**
 * Service to use styles with directives
 * @dynamic
 */
var TuiDirectiveStylesService = /** @class */ (function () {
    function TuiDirectiveStylesService(documentRef, renderer) {
        this.documentRef = documentRef;
        this.renderer = renderer;
    }
    TuiDirectiveStylesService.prototype.addStyle = function (styles, attribute) {
        if (this.documentRef.head.querySelector("style[" + attribute + "]")) {
            return;
        }
        var style = this.renderer.createElement('style');
        this.renderer.setProperty(style, 'textContent', styles);
        this.renderer.setAttribute(style, attribute, '');
        this.documentRef.head.appendChild(style);
    };
    TuiDirectiveStylesService.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [TUI_DEFAULT_RENDERER,] }] }
    ]; };
    TuiDirectiveStylesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiDirectiveStylesService_Factory() { return new TuiDirectiveStylesService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.TUI_DEFAULT_RENDERER)); }, token: TuiDirectiveStylesService, providedIn: "root" });
    TuiDirectiveStylesService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(TUI_DEFAULT_RENDERER))
    ], TuiDirectiveStylesService);
    return TuiDirectiveStylesService;
}());
export { TuiDirectiveStylesService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLXN0eWxlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZS1zdHlsZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUUxRDs7O0dBR0c7QUFJSDtJQUNJLG1DQUN1QyxXQUFxQixFQUNULFFBQW1CO1FBRC9CLGdCQUFXLEdBQVgsV0FBVyxDQUFVO1FBQ1QsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUNuRSxDQUFDO0lBRUosNENBQVEsR0FBUixVQUFTLE1BQWMsRUFBRSxTQUFpQjtRQUN0QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFTLFNBQVMsTUFBRyxDQUFDLEVBQUU7WUFDNUQsT0FBTztTQUNWO1FBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDOztnQkFkbUQsUUFBUSx1QkFBdkQsTUFBTSxTQUFDLFFBQVE7Z0JBQ3lDLFNBQVMsdUJBQWpFLE1BQU0sU0FBQyxvQkFBb0I7OztJQUh2Qix5QkFBeUI7UUFIckMsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztRQUdPLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hCLFdBQUEsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUE7T0FIeEIseUJBQXlCLENBaUJyQztvQ0E1QkQ7Q0E0QkMsQUFqQkQsSUFpQkM7U0FqQlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfREVGQVVMVF9SRU5ERVJFUn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gdXNlIHN0eWxlcyB3aXRoIGRpcmVjdGl2ZXNcbiAqIEBkeW5hbWljXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFR1aURpcmVjdGl2ZVN0eWxlc1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICAgICAgQEluamVjdChUVUlfREVGQVVMVF9SRU5ERVJFUikgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICkge31cblxuICAgIGFkZFN0eWxlKHN0eWxlczogc3RyaW5nLCBhdHRyaWJ1dGU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5kb2N1bWVudFJlZi5oZWFkLnF1ZXJ5U2VsZWN0b3IoYHN0eWxlWyR7YXR0cmlidXRlfV1gKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShzdHlsZSwgJ3RleHRDb250ZW50Jywgc3R5bGVzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3R5bGUsIGF0dHJpYnV0ZSwgJycpO1xuICAgICAgICB0aGlzLmRvY3VtZW50UmVmLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbn1cbiJdfQ==