import { __decorate, __extends, __param } from "tslib";
import { ElementRef, Inject, Injectable, NgZone, Self } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { POLLING_TIME } from '@taiga-ui/cdk/constants';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { getElementObscurers } from '@taiga-ui/cdk/utils/dom';
import { fromEvent, interval, merge, Observable } from 'rxjs';
import { delay, distinctUntilChanged, map, startWith, takeUntil } from 'rxjs/operators';
import { TuiDestroyService } from './destroy.service';
import { TuiParentsScrollService } from './parents-scroll.service';
// @bad TODO: Consider Intersection Observer with fallback to current implementation
/**
 * Service that monitors element visibility by subscribing to scrolls
 * and polling with set interval, returns either null or an array
 * of elements that overlap given element edges
 */
// Ambient type cannot be used without dynamic https://github.com/angular/angular/issues/23395
// @dynamic
var TuiObscuredService = /** @class */ (function (_super) {
    __extends(TuiObscuredService, _super);
    function TuiObscuredService(parentsScroll$, _a, ngZone, windowRef, destroy$) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (subscriber) { return _this.obscured$.subscribe(subscriber); }) || this;
        _this.obscured$ = merge(
        // delay is added so it will not interfere with other listeners
        merge(parentsScroll$, fromEvent(windowRef, 'resize')).pipe(delay(0)), interval(POLLING_TIME)).pipe(map(function () { return getElementObscurers(nativeElement); }), startWith(null), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$));
        return _this;
    }
    TuiObscuredService.ctorParameters = function () { return [
        { type: TuiParentsScrollService, decorators: [{ type: Inject, args: [TuiParentsScrollService,] }, { type: Self }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    TuiObscuredService = __decorate([
        Injectable(),
        __param(0, Inject(TuiParentsScrollService)),
        __param(0, Self()),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(NgZone)),
        __param(3, Inject(WINDOW)),
        __param(4, Inject(TuiDestroyService))
    ], TuiObscuredService);
    return TuiObscuredService;
}(Observable));
export { TuiObscuredService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzY3VyZWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jZGsvc2VydmljZXMvIiwic291cmNlcyI6WyJvYnNjdXJlZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRWpFLG9GQUFvRjtBQUNwRjs7OztHQUlHO0FBQ0gsOEZBQThGO0FBQzlGLFdBQVc7QUFFWDtJQUF3QyxzQ0FBeUM7SUFHN0UsNEJBR0ksY0FBdUMsRUFDbkIsRUFBb0MsRUFDeEMsTUFBYyxFQUNkLFNBQWlCLEVBQ04sUUFBMEI7WUFIaEMsZ0NBQWE7UUFKdEMsWUFTSSxrQkFBTSxVQUFBLFVBQVUsSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFwQyxDQUFvQyxDQUFDLFNBYTVEO1FBWEcsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLO1FBQ2xCLCtEQUErRDtRQUMvRCxLQUFLLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BFLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDekIsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxFQUM3QyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2Ysb0JBQW9CLEVBQUUsRUFDdEIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEIsQ0FBQzs7SUFDTixDQUFDOztnQkFuQm1CLHVCQUF1Qix1QkFGdEMsTUFBTSxTQUFDLHVCQUF1QixjQUM5QixJQUFJO2dCQUVnQyxVQUFVLHVCQUE5QyxNQUFNLFNBQUMsVUFBVTtnQkFDTSxNQUFNLHVCQUE3QixNQUFNLFNBQUMsTUFBTTtnQkFDYSxNQUFNLHVCQUFoQyxNQUFNLFNBQUMsTUFBTTtnQkFDdUIsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLGlCQUFpQjs7SUFWcEIsa0JBQWtCO1FBRDlCLFVBQVUsRUFBRTtRQUtKLFdBQUEsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDL0IsV0FBQSxJQUFJLEVBQUUsQ0FBQTtRQUVOLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2QsV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDZCxXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO09BVnJCLGtCQUFrQixDQTBCOUI7SUFBRCx5QkFBQztDQUFBLEFBMUJELENBQXdDLFVBQVUsR0EwQmpEO1NBMUJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtXSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtQT0xMSU5HX1RJTUV9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB7dHVpWm9uZU9wdGltaXplZH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge2dldEVsZW1lbnRPYnNjdXJlcnN9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7ZnJvbUV2ZW50LCBpbnRlcnZhbCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWxheSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc3RhcnRXaXRoLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJy4vZGVzdHJveS5zZXJ2aWNlJztcbmltcG9ydCB7VHVpUGFyZW50c1Njcm9sbFNlcnZpY2V9IGZyb20gJy4vcGFyZW50cy1zY3JvbGwuc2VydmljZSc7XG5cbi8vIEBiYWQgVE9ETzogQ29uc2lkZXIgSW50ZXJzZWN0aW9uIE9ic2VydmVyIHdpdGggZmFsbGJhY2sgdG8gY3VycmVudCBpbXBsZW1lbnRhdGlvblxuLyoqXG4gKiBTZXJ2aWNlIHRoYXQgbW9uaXRvcnMgZWxlbWVudCB2aXNpYmlsaXR5IGJ5IHN1YnNjcmliaW5nIHRvIHNjcm9sbHNcbiAqIGFuZCBwb2xsaW5nIHdpdGggc2V0IGludGVydmFsLCByZXR1cm5zIGVpdGhlciBudWxsIG9yIGFuIGFycmF5XG4gKiBvZiBlbGVtZW50cyB0aGF0IG92ZXJsYXAgZ2l2ZW4gZWxlbWVudCBlZGdlc1xuICovXG4vLyBBbWJpZW50IHR5cGUgY2Fubm90IGJlIHVzZWQgd2l0aG91dCBkeW5hbWljIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIzMzk1XG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aU9ic2N1cmVkU2VydmljZSBleHRlbmRzIE9ic2VydmFibGU8bnVsbCB8IFJlYWRvbmx5QXJyYXk8RWxlbWVudD4+IHtcbiAgICBwcml2YXRlIG9ic2N1cmVkJDogT2JzZXJ2YWJsZTxudWxsIHwgUmVhZG9ubHlBcnJheTxFbGVtZW50Pj47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlQYXJlbnRzU2Nyb2xsU2VydmljZSlcbiAgICAgICAgQFNlbGYoKVxuICAgICAgICBwYXJlbnRzU2Nyb2xsJDogVHVpUGFyZW50c1Njcm9sbFNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoV0lORE9XKSB3aW5kb3dSZWY6IFdpbmRvdyxcbiAgICAgICAgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4gdGhpcy5vYnNjdXJlZCQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcblxuICAgICAgICB0aGlzLm9ic2N1cmVkJCA9IG1lcmdlKFxuICAgICAgICAgICAgLy8gZGVsYXkgaXMgYWRkZWQgc28gaXQgd2lsbCBub3QgaW50ZXJmZXJlIHdpdGggb3RoZXIgbGlzdGVuZXJzXG4gICAgICAgICAgICBtZXJnZShwYXJlbnRzU2Nyb2xsJCwgZnJvbUV2ZW50KHdpbmRvd1JlZiwgJ3Jlc2l6ZScpKS5waXBlKGRlbGF5KDApKSxcbiAgICAgICAgICAgIGludGVydmFsKFBPTExJTkdfVElNRSksXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIG1hcCgoKSA9PiBnZXRFbGVtZW50T2JzY3VyZXJzKG5hdGl2ZUVsZW1lbnQpKSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICB0dWlab25lT3B0aW1pemVkKG5nWm9uZSksXG4gICAgICAgICAgICB0YWtlVW50aWwoZGVzdHJveSQpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==