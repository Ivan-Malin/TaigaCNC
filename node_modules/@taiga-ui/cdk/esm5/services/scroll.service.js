import { __decorate, __param, __read } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { ANIMATION_FRAME, PERFORMANCE } from '@ng-web-apis/common';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { clamp } from '@taiga-ui/cdk/utils/math';
import { easeInOutQuad } from '@taiga-ui/cdk/utils/miscellaneous';
import { defer, Observable, of, timer } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
var SCROLL_TIME = 300;
// @dynamic
var TuiScrollService = /** @class */ (function () {
    function TuiScrollService(performanceRef, animationFrame$) {
        this.performanceRef = performanceRef;
        this.animationFrame$ = animationFrame$;
    }
    TuiScrollService.prototype.scroll$ = function (element, scrollTop, scrollLeft, duration) {
        var _this = this;
        if (scrollLeft === void 0) { scrollLeft = element.scrollLeft; }
        if (duration === void 0) { duration = SCROLL_TIME; }
        tuiAssert.assert(duration >= 0, 'Duration cannot be negative');
        tuiAssert.assert(scrollTop >= 0, 'scrollTop cannot be negative');
        tuiAssert.assert(scrollLeft >= 0, 'scrollLeft cannot be negative');
        var initialTop = element.scrollTop;
        var initialLeft = element.scrollLeft;
        var deltaTop = scrollTop - initialTop;
        var deltaLeft = scrollLeft - initialLeft;
        var observable = !duration
            ? of([scrollTop, scrollLeft])
            : defer(function () { return of(_this.performanceRef.now()); }).pipe(switchMap(function (start) { return _this.animationFrame$.pipe(map(function (now) { return now - start; })); }), takeUntil(timer(duration)), map(function (elapsed) { return easeInOutQuad(clamp(elapsed / duration, 0, 1)); }), map(function (percent) {
                return [
                    initialTop + deltaTop * percent,
                    initialLeft + deltaLeft * percent,
                ];
            }));
        return observable.pipe(tap(function (_a) {
            var _b = __read(_a, 2), scrollTop = _b[0], scrollLeft = _b[1];
            element.scrollTop = scrollTop;
            element.scrollLeft = scrollLeft;
        }));
    };
    TuiScrollService.ctorParameters = function () { return [
        { type: Performance, decorators: [{ type: Inject, args: [PERFORMANCE,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] }
    ]; };
    TuiScrollService = __decorate([
        Injectable(),
        __param(0, Inject(PERFORMANCE)),
        __param(1, Inject(ANIMATION_FRAME))
    ], TuiScrollService);
    return TuiScrollService;
}());
export { TuiScrollService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY2RrL3NlcnZpY2VzLyIsInNvdXJjZXMiOlsic2Nyb2xsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUUsV0FBVyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUMvQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDaEUsT0FBTyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNsRCxPQUFPLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUQsSUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBRXhCLFdBQVc7QUFFWDtJQUNJLDBCQUMwQyxjQUEyQixFQUN2QixlQUFtQztRQUR2QyxtQkFBYyxHQUFkLGNBQWMsQ0FBYTtRQUN2QixvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7SUFDOUUsQ0FBQztJQUVKLGtDQUFPLEdBQVAsVUFDSSxPQUFnQixFQUNoQixTQUFpQixFQUNqQixVQUF1QyxFQUN2QyxRQUE4QjtRQUpsQyxpQkFtQ0M7UUFoQ0csMkJBQUEsRUFBQSxhQUFxQixPQUFPLENBQUMsVUFBVTtRQUN2Qyx5QkFBQSxFQUFBLHNCQUE4QjtRQUU5QixTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUUsNkJBQTZCLENBQUMsQ0FBQztRQUMvRCxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDLEVBQUUsOEJBQThCLENBQUMsQ0FBQztRQUNqRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUUsK0JBQStCLENBQUMsQ0FBQztRQUVuRSxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3JDLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDdkMsSUFBTSxRQUFRLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQztRQUN4QyxJQUFNLFNBQVMsR0FBRyxVQUFVLEdBQUcsV0FBVyxDQUFDO1FBQzNDLElBQU0sVUFBVSxHQUFHLENBQUMsUUFBUTtZQUN4QixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBcUIsQ0FBQztZQUNqRCxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQU0sT0FBQSxFQUFFLENBQUMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUE3QixDQUE2QixDQUFDLENBQUMsSUFBSSxDQUMzQyxTQUFTLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLEdBQUcsS0FBSyxFQUFYLENBQVcsQ0FBQyxDQUFDLEVBQWxELENBQWtELENBQUMsRUFDdEUsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUMxQixHQUFHLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQTlDLENBQThDLENBQUMsRUFDOUQsR0FBRyxDQUNDLFVBQUEsT0FBTztnQkFDSCxPQUFBO29CQUNJLFVBQVUsR0FBRyxRQUFRLEdBQUcsT0FBTztvQkFDL0IsV0FBVyxHQUFHLFNBQVMsR0FBRyxPQUFPO2lCQUNoQjtZQUhyQixDQUdxQixDQUM1QixDQUNKLENBQUM7UUFFUixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQ2xCLEdBQUcsQ0FBQyxVQUFDLEVBQXVCO2dCQUF2QixrQkFBdUIsRUFBdEIsaUJBQVMsRUFBRSxrQkFBVTtZQUN2QixPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUM5QixPQUFPLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQzs7Z0JBdkN5RCxXQUFXLHVCQUFoRSxNQUFNLFNBQUMsV0FBVztnQkFDd0MsVUFBVSx1QkFBcEUsTUFBTSxTQUFDLGVBQWU7O0lBSGxCLGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7UUFHSixXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNuQixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtPQUhuQixnQkFBZ0IsQ0EwQzVCO0lBQUQsdUJBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQTFDWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FOSU1BVElPTl9GUkFNRSwgUEVSRk9STUFOQ0V9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHt0dWlBc3NlcnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvY2xhc3Nlcyc7XG5pbXBvcnQge2NsYW1wfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21hdGgnO1xuaW1wb3J0IHtlYXNlSW5PdXRRdWFkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtkZWZlciwgT2JzZXJ2YWJsZSwgb2YsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBzd2l0Y2hNYXAsIHRha2VVbnRpbCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IFNDUk9MTF9USU1FID0gMzAwO1xuXG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aVNjcm9sbFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFBFUkZPUk1BTkNFKSBwcml2YXRlIHJlYWRvbmx5IHBlcmZvcm1hbmNlUmVmOiBQZXJmb3JtYW5jZSxcbiAgICAgICAgQEluamVjdChBTklNQVRJT05fRlJBTUUpIHByaXZhdGUgcmVhZG9ubHkgYW5pbWF0aW9uRnJhbWUkOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgKSB7fVxuXG4gICAgc2Nyb2xsJChcbiAgICAgICAgZWxlbWVudDogRWxlbWVudCxcbiAgICAgICAgc2Nyb2xsVG9wOiBudW1iZXIsXG4gICAgICAgIHNjcm9sbExlZnQ6IG51bWJlciA9IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgZHVyYXRpb246IG51bWJlciA9IFNDUk9MTF9USU1FLFxuICAgICk6IE9ic2VydmFibGU8W251bWJlciwgbnVtYmVyXT4ge1xuICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KGR1cmF0aW9uID49IDAsICdEdXJhdGlvbiBjYW5ub3QgYmUgbmVnYXRpdmUnKTtcbiAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChzY3JvbGxUb3AgPj0gMCwgJ3Njcm9sbFRvcCBjYW5ub3QgYmUgbmVnYXRpdmUnKTtcbiAgICAgICAgdHVpQXNzZXJ0LmFzc2VydChzY3JvbGxMZWZ0ID49IDAsICdzY3JvbGxMZWZ0IGNhbm5vdCBiZSBuZWdhdGl2ZScpO1xuXG4gICAgICAgIGNvbnN0IGluaXRpYWxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3QgaW5pdGlhbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgICAgIGNvbnN0IGRlbHRhVG9wID0gc2Nyb2xsVG9wIC0gaW5pdGlhbFRvcDtcbiAgICAgICAgY29uc3QgZGVsdGFMZWZ0ID0gc2Nyb2xsTGVmdCAtIGluaXRpYWxMZWZ0O1xuICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gIWR1cmF0aW9uXG4gICAgICAgICAgICA/IG9mKFtzY3JvbGxUb3AsIHNjcm9sbExlZnRdIGFzIFtudW1iZXIsIG51bWJlcl0pXG4gICAgICAgICAgICA6IGRlZmVyKCgpID0+IG9mKHRoaXMucGVyZm9ybWFuY2VSZWYubm93KCkpKS5waXBlKFxuICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKHN0YXJ0ID0+IHRoaXMuYW5pbWF0aW9uRnJhbWUkLnBpcGUobWFwKG5vdyA9PiBub3cgLSBzdGFydCkpKSxcbiAgICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aW1lcihkdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgbWFwKGVsYXBzZWQgPT4gZWFzZUluT3V0UXVhZChjbGFtcChlbGFwc2VkIC8gZHVyYXRpb24sIDAsIDEpKSksXG4gICAgICAgICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVG9wICsgZGVsdGFUb3AgKiBwZXJjZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbExlZnQgKyBkZWx0YUxlZnQgKiBwZXJjZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdIGFzIFtudW1iZXIsIG51bWJlcl0sXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnBpcGUoXG4gICAgICAgICAgICB0YXAoKFtzY3JvbGxUb3AsIHNjcm9sbExlZnRdKSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==