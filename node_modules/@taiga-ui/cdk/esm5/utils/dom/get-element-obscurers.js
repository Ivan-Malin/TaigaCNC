import { clamp } from '@taiga-ui/cdk/utils/math';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { getDocumentOrShadowRoot } from './get-document-or-shadow-root';
/**
 * Returns array of Elements covering edges of given element or null if at least one edge middle point is visible
 *
 * CAUTION: Empty array means element if offscreen i.e. covered by no elements, rather than not covered
 */
export function getElementObscurers(element) {
    var ownerDocument = element.ownerDocument;
    if (!ownerDocument || !ownerDocument.defaultView) {
        return null;
    }
    var _a = ownerDocument.defaultView, innerWidth = _a.innerWidth, innerHeight = _a.innerHeight;
    var documentRef = getDocumentOrShadowRoot(element);
    var rect = element.getBoundingClientRect();
    var left = clamp(Math.round(rect.left) + 2, 0, innerWidth);
    var top = clamp(Math.round(rect.top) + 2, 0, innerHeight);
    var right = clamp(Math.round(rect.right) - 2, 0, innerWidth);
    var bottom = clamp(Math.round(rect.bottom) - 2, 0, innerHeight);
    var horizontalMiddle = clamp(Math.round(rect.left + rect.width / 2), 0, innerWidth);
    var verticalMiddle = clamp(Math.round(rect.top + rect.height / 2), 0, innerHeight);
    var elements = [
        documentRef.elementFromPoint(horizontalMiddle, top),
        documentRef.elementFromPoint(horizontalMiddle, bottom),
        documentRef.elementFromPoint(left, verticalMiddle),
        documentRef.elementFromPoint(right, verticalMiddle),
    ];
    var nonNull = elements.filter(isPresent);
    if (!nonNull.length) {
        return nonNull;
    }
    var filtered = nonNull.filter(function (el) { return !element.contains(el); });
    return filtered.length === 4 ? filtered : null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWVsZW1lbnQtb2JzY3VyZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2Nkay91dGlscy9kb20vIiwic291cmNlcyI6WyJnZXQtZWxlbWVudC1vYnNjdXJlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM1RCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUV0RTs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE9BQWdCO0lBQ3pDLElBQUEscUNBQWEsQ0FBWTtJQUVoQyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRTtRQUM5QyxPQUFPLElBQUksQ0FBQztLQUNmO0lBRUssSUFBQSw4QkFBcUQsRUFBcEQsMEJBQVUsRUFBRSw0QkFBd0MsQ0FBQztJQUM1RCxJQUFNLFdBQVcsR0FBRyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUM3QyxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM3RCxJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM1RCxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvRCxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRSxJQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDdEYsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNyRixJQUFNLFFBQVEsR0FBRztRQUNiLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUM7UUFDbkQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQztRQUN0RCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQztRQUNsRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQztLQUN0RCxDQUFDO0lBQ0YsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUUzQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNqQixPQUFPLE9BQU8sQ0FBQztLQUNsQjtJQUVELElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUU3RCxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjbGFtcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9tYXRoJztcbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtnZXREb2N1bWVudE9yU2hhZG93Um9vdH0gZnJvbSAnLi9nZXQtZG9jdW1lbnQtb3Itc2hhZG93LXJvb3QnO1xuXG4vKipcbiAqIFJldHVybnMgYXJyYXkgb2YgRWxlbWVudHMgY292ZXJpbmcgZWRnZXMgb2YgZ2l2ZW4gZWxlbWVudCBvciBudWxsIGlmIGF0IGxlYXN0IG9uZSBlZGdlIG1pZGRsZSBwb2ludCBpcyB2aXNpYmxlXG4gKlxuICogQ0FVVElPTjogRW1wdHkgYXJyYXkgbWVhbnMgZWxlbWVudCBpZiBvZmZzY3JlZW4gaS5lLiBjb3ZlcmVkIGJ5IG5vIGVsZW1lbnRzLCByYXRoZXIgdGhhbiBub3QgY292ZXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudE9ic2N1cmVycyhlbGVtZW50OiBFbGVtZW50KTogUmVhZG9ubHlBcnJheTxFbGVtZW50PiB8IG51bGwge1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50fSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQgfHwgIW93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qge2lubmVyV2lkdGgsIGlubmVySGVpZ2h0fSA9IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgY29uc3QgZG9jdW1lbnRSZWYgPSBnZXREb2N1bWVudE9yU2hhZG93Um9vdChlbGVtZW50KTtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBsZWZ0ID0gY2xhbXAoTWF0aC5yb3VuZChyZWN0LmxlZnQpICsgMiwgMCwgaW5uZXJXaWR0aCk7XG4gICAgY29uc3QgdG9wID0gY2xhbXAoTWF0aC5yb3VuZChyZWN0LnRvcCkgKyAyLCAwLCBpbm5lckhlaWdodCk7XG4gICAgY29uc3QgcmlnaHQgPSBjbGFtcChNYXRoLnJvdW5kKHJlY3QucmlnaHQpIC0gMiwgMCwgaW5uZXJXaWR0aCk7XG4gICAgY29uc3QgYm90dG9tID0gY2xhbXAoTWF0aC5yb3VuZChyZWN0LmJvdHRvbSkgLSAyLCAwLCBpbm5lckhlaWdodCk7XG4gICAgY29uc3QgaG9yaXpvbnRhbE1pZGRsZSA9IGNsYW1wKE1hdGgucm91bmQocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDIpLCAwLCBpbm5lcldpZHRoKTtcbiAgICBjb25zdCB2ZXJ0aWNhbE1pZGRsZSA9IGNsYW1wKE1hdGgucm91bmQocmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDIpLCAwLCBpbm5lckhlaWdodCk7XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXG4gICAgICAgIGRvY3VtZW50UmVmLmVsZW1lbnRGcm9tUG9pbnQoaG9yaXpvbnRhbE1pZGRsZSwgdG9wKSxcbiAgICAgICAgZG9jdW1lbnRSZWYuZWxlbWVudEZyb21Qb2ludChob3Jpem9udGFsTWlkZGxlLCBib3R0b20pLFxuICAgICAgICBkb2N1bWVudFJlZi5lbGVtZW50RnJvbVBvaW50KGxlZnQsIHZlcnRpY2FsTWlkZGxlKSxcbiAgICAgICAgZG9jdW1lbnRSZWYuZWxlbWVudEZyb21Qb2ludChyaWdodCwgdmVydGljYWxNaWRkbGUpLFxuICAgIF07XG4gICAgY29uc3Qgbm9uTnVsbCA9IGVsZW1lbnRzLmZpbHRlcihpc1ByZXNlbnQpO1xuXG4gICAgaWYgKCFub25OdWxsLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbm9uTnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZCA9IG5vbk51bGwuZmlsdGVyKGVsID0+ICFlbGVtZW50LmNvbnRhaW5zKGVsKSk7XG5cbiAgICByZXR1cm4gZmlsdGVyZWQubGVuZ3RoID09PSA0ID8gZmlsdGVyZWQgOiBudWxsO1xufVxuIl19