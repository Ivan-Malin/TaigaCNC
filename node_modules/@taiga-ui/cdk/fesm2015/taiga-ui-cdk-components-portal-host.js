import { __decorate, __param } from 'tslib';
import { ɵɵdefineInjectable, Injectable, Injector, ViewContainerRef, Inject, ElementRef, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';

const NO_HOST = 'Portals cannot be used without TuiPortalHostComponent';
/**
 * Service for displaying portals
 */
let TuiPortalService = class TuiPortalService {
    get safeHost() {
        if (!this.host) {
            throw new Error(NO_HOST);
        }
        return this.host;
    }
    attach(host) {
        this.host = host;
    }
    add(componentFactory, injector) {
        return this.safeHost.addComponentChild(componentFactory, injector);
    }
    remove({ hostView }) {
        hostView.destroy();
    }
    addTemplate(templateRef, context) {
        return this.safeHost.addTemplateChild(templateRef, context);
    }
    removeTemplate(viewRef) {
        viewRef.destroy();
    }
};
TuiPortalService.ɵprov = ɵɵdefineInjectable({ factory: function TuiPortalService_Factory() { return new TuiPortalService(); }, token: TuiPortalService, providedIn: "root" });
TuiPortalService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], TuiPortalService);

var TuiPortalHostComponent_1;
const BLANK_CLIENT_RECT = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
};
/**
 * Host element for dynamically created portals, for example using {@link TuiDropdownDirective}.
 */
let TuiPortalHostComponent = TuiPortalHostComponent_1 = class TuiPortalHostComponent {
    constructor(viewContainerRef, elementRef, portalService) {
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        portalService.attach(this);
    }
    get clientRect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    addComponentChild(componentFactory, injector) {
        return this.viewContainerRef.createComponent(componentFactory, undefined, Injector.create({
            parent: injector,
            providers: [
                {
                    provide: TuiPortalHostComponent_1,
                    useValue: this,
                },
            ],
        }));
    }
    addTemplateChild(templateRef, context) {
        return this.viewContainerRef.createEmbeddedView(templateRef, context);
    }
    fixedPositionOffset() {
        return this.positionFixedOffsetRef
            ? this.positionFixedOffsetRef.nativeElement.getBoundingClientRect()
            : BLANK_CLIENT_RECT;
    }
};
TuiPortalHostComponent.ctorParameters = () => [
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiPortalService, decorators: [{ type: Inject, args: [TuiPortalService,] }] }
];
__decorate([
    ViewChild('positionFixedOffset')
], TuiPortalHostComponent.prototype, "positionFixedOffsetRef", void 0);
TuiPortalHostComponent = TuiPortalHostComponent_1 = __decorate([
    Component({
        selector: 'tui-portal-host',
        template: "<div #positionFixedOffset class=\"position-fixed-offset\"></div>\n<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;height:100%;z-index:0}:host:before{content:'';display:block;overflow:hidden}.position-fixed-offset{position:fixed;left:0;top:0;pointer-events:none;visibility:hidden;width:100%;height:100%}"]
    }),
    __param(0, Inject(ViewContainerRef)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiPortalService))
], TuiPortalHostComponent);

let TuiPortalHostModule = class TuiPortalHostModule {
};
TuiPortalHostModule = __decorate([
    NgModule({
        declarations: [TuiPortalHostComponent],
        exports: [TuiPortalHostComponent],
    })
], TuiPortalHostModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPortalHostComponent, TuiPortalHostModule, TuiPortalService };
//# sourceMappingURL=taiga-ui-cdk-components-portal-host.js.map
