import { __decorate, __param } from 'tslib';
import { ChangeDetectorRef, Inject, ElementRef, Optional, Self, Renderer2, ViewContainerRef, Input, Directive, NgModule } from '@angular/core';
import { POLLING_TIME } from '@taiga-ui/cdk/constants';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
import { getClosestElement } from '@taiga-ui/cdk/utils/dom';
import { setNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { race, timer, interval } from 'rxjs';
import { map, filter, take } from 'rxjs/operators';

const IOS_TIMEOUT = 1000;
const NG_ANIMATION_SELECTOR = '.ng-animating';
// @bad TODO: Consider removing iOS hacks
let TuiAutoFocusDirective = class TuiAutoFocusDirective {
    constructor(changeDetectorRef, elementRef, tuiFocusableComponent, isIos, renderer, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.tuiFocusableComponent = tuiFocusableComponent;
        this.isIos = isIos;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.autoFocus = true;
    }
    ngAfterViewInit() {
        if (!this.autoFocus) {
            return;
        }
        const element = this.tuiFocusableComponent === null
            ? this.elementRef.nativeElement
            : this.tuiFocusableComponent.nativeFocusableElement;
        if (!(element instanceof HTMLElement)) {
            return;
        }
        if (!this.isIos) {
            setTimeout(() => {
                setNativeFocused(element);
                this.changeDetectorRef.markForCheck();
            });
            return;
        }
        this.veryVerySadIosFix(element);
    }
    veryVerySadIosFix(element) {
        const { nativeElement } = this.viewContainerRef.element;
        const decoy = this.renderer.createElement('input');
        decoy.style.position = 'absolute';
        decoy.style.opacity = '0';
        decoy.style.height = '0';
        this.renderer.setAttribute(decoy, 'readonly', 'readonly');
        this.renderer.appendChild(nativeElement, decoy);
        setNativeFocused(decoy);
        race(timer(IOS_TIMEOUT), interval(POLLING_TIME).pipe(map(() => getClosestElement(element, NG_ANIMATION_SELECTOR)), filter(element => !element), take(1))).subscribe(() => {
            setTimeout(() => {
                setNativeFocused(element);
                this.changeDetectorRef.markForCheck();
                this.renderer.removeChild(nativeElement, decoy);
            });
        });
    }
};
TuiAutoFocusDirective.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TUI_FOCUSABLE_ITEM_ACCESSOR,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] }
];
__decorate([
    Input()
], TuiAutoFocusDirective.prototype, "autoFocus", void 0);
TuiAutoFocusDirective = __decorate([
    Directive({
        selector: '[tuiAutoFocus]',
    }),
    __param(0, Inject(ChangeDetectorRef)),
    __param(1, Inject(ElementRef)),
    __param(2, Optional()),
    __param(2, Self()),
    __param(2, Inject(TUI_FOCUSABLE_ITEM_ACCESSOR)),
    __param(3, Inject(TUI_IS_IOS)),
    __param(4, Inject(Renderer2)),
    __param(5, Inject(ViewContainerRef))
], TuiAutoFocusDirective);

let TuiAutoFocusModule = class TuiAutoFocusModule {
};
TuiAutoFocusModule = __decorate([
    NgModule({
        declarations: [TuiAutoFocusDirective],
        exports: [TuiAutoFocusDirective],
    })
], TuiAutoFocusModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiAutoFocusDirective, TuiAutoFocusModule };
//# sourceMappingURL=taiga-ui-cdk-directives-auto-focus.js.map
