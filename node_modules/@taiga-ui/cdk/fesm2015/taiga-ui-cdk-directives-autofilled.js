import { __decorate, __param } from 'tslib';
import { EventEmitter, Inject, ElementRef, ChangeDetectorRef, Output, HostListener, Directive, NgModule } from '@angular/core';
import { typedFromEvent, watch } from '@taiga-ui/cdk/observables';
import { TuiDirectiveStylesService, TuiDestroyService } from '@taiga-ui/cdk/services';
import { Observable } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';

const ON = 'tuiAutofillOn';
const OFF = 'tuiAutofillOff';
const STYLE = `
@keyframes ${ON} {
    from {
        content: '1';
    }

    to {
        content: '2';
    }
}

@keyframes ${OFF} {
    from {
        content: '2';
    }

    to {
        content: '1';
    }
}`;
// @dynamic
let TuiAutofilledDirective = class TuiAutofilledDirective {
    constructor(directiveStyles, { nativeElement }, changeDetectorRef, destroy$) {
        this.tuiAutofilledChange = new EventEmitter();
        directiveStyles.addStyle(STYLE, 'TuiAutofilledDirective');
        // Subscribing to synthetic keydown event on page reload autofill in Chrome
        typedFromEvent(nativeElement, 'keydown')
            .pipe(take(1), takeUntil(destroy$), watch(changeDetectorRef))
            .subscribe();
    }
    onAnimationStart({ animationName }) {
        if (animationName === ON) {
            this.tuiAutofilledChange.emit(true);
        }
        else if (animationName === OFF) {
            this.tuiAutofilledChange.emit(false);
        }
    }
};
TuiAutofilledDirective.ctorParameters = () => [
    { type: TuiDirectiveStylesService, decorators: [{ type: Inject, args: [TuiDirectiveStylesService,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Output()
], TuiAutofilledDirective.prototype, "tuiAutofilledChange", void 0);
__decorate([
    HostListener('animationstart', ['$event'])
], TuiAutofilledDirective.prototype, "onAnimationStart", null);
TuiAutofilledDirective = __decorate([
    Directive({
        selector: 'input[tuiAutofilledChange]',
        host: {
            class: 'tui-autofill',
        },
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(TuiDirectiveStylesService)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(ChangeDetectorRef)),
    __param(3, Inject(TuiDestroyService))
], TuiAutofilledDirective);

let TuiAutofilledModule = class TuiAutofilledModule {
};
TuiAutofilledModule = __decorate([
    NgModule({
        declarations: [TuiAutofilledDirective],
        exports: [TuiAutofilledDirective],
    })
], TuiAutofilledModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiAutofilledDirective, TuiAutofilledModule };
//# sourceMappingURL=taiga-ui-cdk-directives-autofilled.js.map
