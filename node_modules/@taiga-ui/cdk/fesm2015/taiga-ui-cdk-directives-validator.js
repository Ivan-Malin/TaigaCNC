import { __decorate } from 'tslib';
import { Input, Directive, forwardRef, NgModule } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { EMPTY_FUNCTION, EMPTY_VALIDATOR } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';

var TuiValidatorDirective_1;
let TuiValidatorDirective = TuiValidatorDirective_1 = class TuiValidatorDirective {
    constructor() {
        this.onChange = EMPTY_FUNCTION;
        this.tuiValidator = EMPTY_VALIDATOR;
    }
    validate(control) {
        return this.tuiValidator(control);
    }
    registerOnValidatorChange(onChange) {
        this.onChange = onChange;
    }
    ngOnChanges() {
        this.onChange();
    }
    ngOnDestroy() {
        this.tuiValidator = EMPTY_VALIDATOR;
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], TuiValidatorDirective.prototype, "tuiValidator", void 0);
TuiValidatorDirective = TuiValidatorDirective_1 = __decorate([
    Directive({
        selector: '[tuiValidator]',
        providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => TuiValidatorDirective_1),
                multi: true,
            },
        ],
    })
], TuiValidatorDirective);

let TuiValidatorModule = class TuiValidatorModule {
};
TuiValidatorModule = __decorate([
    NgModule({
        declarations: [TuiValidatorDirective],
        exports: [TuiValidatorDirective],
    })
], TuiValidatorModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiValidatorDirective, TuiValidatorModule };
//# sourceMappingURL=taiga-ui-cdk-directives-validator.js.map
