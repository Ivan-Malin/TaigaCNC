import { __decorate, __extends, __assign, __spread, __param } from 'tslib';
import { EventEmitter, Input, Output, HostBinding, Directive, ChangeDetectorRef, Inject, Injectable } from '@angular/core';
import { NgModel, NgControl } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { fallbackValue } from '@taiga-ui/cdk/utils/miscellaneous';
import { Subject, merge, BehaviorSubject, Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiIdService } from '@taiga-ui/cdk/services';

var TUI = 'tui_interactive_';
/**
 * The most basic class for interactive components
 */
var AbstractTuiInteractive = /** @class */ (function () {
    function AbstractTuiInteractive() {
        this.hovered = false;
        this.pressed = false;
        this.focusVisible = false;
        this.pseudoHovered = null;
        this.pseudoPressed = null;
        this.pseudoFocused = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = '';
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        this.pressedChange = new EventEmitter();
        this.hoveredChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
        this.autoIdString = "" + TUI + AbstractTuiInteractive_1.autoId++ + Date.now();
    }
    AbstractTuiInteractive_1 = AbstractTuiInteractive;
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedHovered", {
        get: function () {
            return !this.computedDisabled && fallbackValue(this.pseudoHovered, this.hovered);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedPressed", {
        get: function () {
            return !this.computedDisabled && fallbackValue(this.pseudoPressed, this.pressed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusable", {
        get: function () {
            return !this.computedDisabled && (this.focusable || this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocused", {
        get: function () {
            return !this.computedDisabled && fallbackValue(this.pseudoFocused, this.focused);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusVisible", {
        get: function () {
            return (!this.computedDisabled && fallbackValue(this.pseudoFocused, this.focusVisible));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInteractive.prototype, "id", {
        get: function () {
            return !!this.nativeId ? this.nativeId : this.autoIdString;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiInteractive.prototype.updateHovered = function (hovered) {
        if (this.hovered === hovered) {
            return;
        }
        this.hovered = hovered;
        this.hoveredChange.emit(hovered);
    };
    AbstractTuiInteractive.prototype.updatePressed = function (pressed) {
        if (this.pressed === pressed) {
            return;
        }
        this.pressed = pressed;
        this.pressedChange.emit(pressed);
    };
    AbstractTuiInteractive.prototype.updateFocused = function (focused) {
        this.focusedChange.emit(focused);
    };
    AbstractTuiInteractive.prototype.updateFocusVisible = function (focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    };
    var AbstractTuiInteractive_1;
    AbstractTuiInteractive.autoId = 0;
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoHovered", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoPressed", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoFocused", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "focusable", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "nativeId", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "focusedChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "pressedChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "hoveredChange", void 0);
    __decorate([
        Output()
    ], AbstractTuiInteractive.prototype, "focusVisibleChange", void 0);
    __decorate([
        HostBinding('class._disabled')
    ], AbstractTuiInteractive.prototype, "computedDisabled", null);
    __decorate([
        HostBinding('class._hovered')
    ], AbstractTuiInteractive.prototype, "computedHovered", null);
    __decorate([
        HostBinding('class._pressed')
    ], AbstractTuiInteractive.prototype, "computedPressed", null);
    __decorate([
        HostBinding('class._focused')
    ], AbstractTuiInteractive.prototype, "computedFocused", null);
    __decorate([
        HostBinding('class._focus-visible')
    ], AbstractTuiInteractive.prototype, "computedFocusVisible", null);
    AbstractTuiInteractive = AbstractTuiInteractive_1 = __decorate([
        Directive()
    ], AbstractTuiInteractive);
    return AbstractTuiInteractive;
}());

/**
 * Basic ControlValueAccessor class to build form components upon
 */
var AbstractTuiControl = /** @class */ (function (_super) {
    __extends(AbstractTuiControl, _super);
    function AbstractTuiControl(ngControl, changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.ngControl = ngControl;
        _this.changeDetectorRef = changeDetectorRef;
        _this.onTouched = EMPTY_FUNCTION;
        _this.onChange = EMPTY_FUNCTION;
        _this.fallbackValue = _this.getFallbackValue();
        _this.destroy$ = new Subject();
        _this.readOnly = false;
        _this.pseudoInvalid = null;
        if (_this.ngControl === null) {
            tuiAssert.assert(false, "NgControl not injected in " + _this.constructor.name + "!\n", 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
        }
        else {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(AbstractTuiControl.prototype, "computedInvalid", {
        get: function () {
            return (!this.readOnly &&
                !this.disabled &&
                (this.pseudoInvalid !== null
                    ? this.pseudoInvalid
                    : this.touched && this.invalid));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "value", {
        get: function () {
            return fallbackValue(this.previousInternalValue, this.fallbackValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "safeCurrentValue", {
        get: function () {
            return fallbackValue(this.rawValue, this.fallbackValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "invalid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var invalid = _a.invalid;
                return invalid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "valid", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var valid = _a.valid;
                return valid;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "touched", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var touched = _a.touched;
                return touched;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "disabled", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var disabled = _a.disabled;
                return disabled;
            }, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "control", {
        get: function () {
            return this.safeNgControlData(function (_a) {
                var control = _a.control;
                return control;
            }, null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "computedName", {
        get: function () {
            return this.controlName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "controlName", {
        get: function () {
            return this.ngControl && this.ngControl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiControl.prototype, "rawValue", {
        get: function () {
            var ngControl = this.ngControl;
            if (ngControl === null) {
                return undefined;
            }
            return ngControl instanceof NgModel && this.previousInternalValue === undefined
                ? ngControl.viewModel
                : ngControl.value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiControl.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.ngControl ||
            !this.ngControl.valueChanges ||
            !this.ngControl.statusChanges) {
            return;
        }
        merge(this.ngControl.valueChanges, this.ngControl.statusChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(function () {
            _this.refreshLocalValue(_this.safeCurrentValue);
        });
    };
    AbstractTuiControl.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    AbstractTuiControl.prototype.checkControlUpdate = function () {
        this.changeDetectorRef.markForCheck();
    };
    AbstractTuiControl.prototype.registerOnChange = function (onChange) {
        this.onChange = onChange;
    };
    AbstractTuiControl.prototype.registerOnTouched = function (onTouched) {
        this.onTouched = onTouched;
    };
    AbstractTuiControl.prototype.setDisabledState = function () {
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.writeValue = function (value) {
        this.refreshLocalValue(this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value);
    };
    AbstractTuiControl.prototype.updateFocused = function (focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        _super.prototype.updateFocused.call(this, focused);
    };
    AbstractTuiControl.prototype.updateValue = function (value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    };
    AbstractTuiControl.prototype.valueIdenticalComparator = function (oldValue, newValue) {
        return oldValue === newValue;
    };
    AbstractTuiControl.prototype.safeNgControlData = function (extractor, defaultFieldValue) {
        return fallbackValue(this.ngControl && extractor(this.ngControl), defaultFieldValue);
    };
    AbstractTuiControl.prototype.controlMarkAsTouched = function () {
        this.onTouched();
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.controlSetValue = function (value) {
        this.onChange(value);
        this.checkControlUpdate();
    };
    AbstractTuiControl.prototype.refreshLocalValue = function (value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    };
    AbstractTuiControl.ctorParameters = function () { return [
        { type: NgControl },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        HostBinding('class._readonly'),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "readOnly", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
    __decorate([
        HostBinding('class._invalid')
    ], AbstractTuiControl.prototype, "computedInvalid", null);
    AbstractTuiControl = __decorate([
        Directive()
    ], AbstractTuiControl);
    return AbstractTuiControl;
}(AbstractTuiInteractive));

var TuiController = /** @class */ (function () {
    function TuiController() {
        this.change$ = new Subject();
    }
    TuiController.prototype.ngOnChanges = function () {
        this.change$.next();
    };
    return TuiController;
}());

var AbstractTuiDialogService = /** @class */ (function (_super) {
    __extends(AbstractTuiDialogService, _super);
    function AbstractTuiDialogService(idService) {
        var _this = _super.call(this, function (observer) { return _this.dialogs$.subscribe(observer); }) || this;
        _this.idService = idService;
        _this.dialogs$ = new BehaviorSubject([]);
        return _this;
    }
    AbstractTuiDialogService.prototype.open = function (content, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return new Observable(function (observer) {
            var completeWith = function (result) {
                observer.next(result);
                observer.complete();
            };
            var dialog = __assign(__assign(__assign({}, _this.defaultOptions), options), { content: content,
                completeWith: completeWith, $implicit: observer, component: _this.component, id: _this.idService.generate() });
            _this.dialogs$.next(__spread(_this.dialogs$.value, [dialog]));
            return function () {
                _this.dialogs$.next(_this.dialogs$.value.filter(function (item) { return item !== dialog; }));
            };
        });
    };
    AbstractTuiDialogService.ctorParameters = function () { return [
        { type: TuiIdService, decorators: [{ type: Inject, args: [TuiIdService,] }] }
    ]; };
    AbstractTuiDialogService = __decorate([
        Injectable(),
        __param(0, Inject(TuiIdService))
    ], AbstractTuiDialogService);
    return AbstractTuiDialogService;
}(Observable));

var AbstractTuiMultipleControl = /** @class */ (function (_super) {
    __extends(AbstractTuiMultipleControl, _super);
    function AbstractTuiMultipleControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractTuiMultipleControl.prototype.clear = function () {
        this.updateValue([]);
    };
    AbstractTuiMultipleControl.prototype.getFallbackValue = function () {
        return [];
    };
    AbstractTuiMultipleControl = __decorate([
        Directive()
    ], AbstractTuiMultipleControl);
    return AbstractTuiMultipleControl;
}(AbstractTuiControl));

var AbstractTuiNullableControl = /** @class */ (function (_super) {
    __extends(AbstractTuiNullableControl, _super);
    function AbstractTuiNullableControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractTuiNullableControl.prototype.getFallbackValue = function () {
        return null;
    };
    AbstractTuiNullableControl = __decorate([
        Directive()
    ], AbstractTuiNullableControl);
    return AbstractTuiNullableControl;
}(AbstractTuiControl));

/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 */
var AbstractTuiThemeSwitcher = /** @class */ (function () {
    function AbstractTuiThemeSwitcher(documentRef) {
        this.documentRef = documentRef;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        var styles = this.documentRef.head.querySelectorAll('style');
        this.constructor.style =
            styles[styles.length - 1];
    }
    Object.defineProperty(AbstractTuiThemeSwitcher.prototype, "style", {
        get: function () {
            return this.constructor.style;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiThemeSwitcher.prototype.ngOnDestroy = function () {
        this.removeTheme();
    };
    AbstractTuiThemeSwitcher.prototype.addTheme = function () {
        if (this.style && !this.documentRef.head.contains(this.style)) {
            for (var i = this.style.attributes.length - 1; i >= 0; i--) {
                this.style.removeAttribute(this.style.attributes[i].name);
            }
            this.documentRef.head.appendChild(this.style);
        }
    };
    AbstractTuiThemeSwitcher.prototype.removeTheme = function () {
        if (this.style && this.documentRef.head.contains(this.style)) {
            this.documentRef.head.removeChild(this.style);
        }
    };
    AbstractTuiThemeSwitcher.style = null;
    return AbstractTuiThemeSwitcher;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiControl, AbstractTuiDialogService, AbstractTuiInteractive, AbstractTuiMultipleControl, AbstractTuiNullableControl, AbstractTuiThemeSwitcher, TuiController };
//# sourceMappingURL=taiga-ui-cdk-abstract.js.map
