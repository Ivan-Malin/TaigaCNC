import { __decorate, __param } from 'tslib';
import { ɵɵdefineInjectable, Injectable, Injector, ViewContainerRef, Inject, ElementRef, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';

var NO_HOST = 'Portals cannot be used without TuiPortalHostComponent';
/**
 * Service for displaying portals
 */
var TuiPortalService = /** @class */ (function () {
    function TuiPortalService() {
    }
    Object.defineProperty(TuiPortalService.prototype, "safeHost", {
        get: function () {
            if (!this.host) {
                throw new Error(NO_HOST);
            }
            return this.host;
        },
        enumerable: true,
        configurable: true
    });
    TuiPortalService.prototype.attach = function (host) {
        this.host = host;
    };
    TuiPortalService.prototype.add = function (componentFactory, injector) {
        return this.safeHost.addComponentChild(componentFactory, injector);
    };
    TuiPortalService.prototype.remove = function (_a) {
        var hostView = _a.hostView;
        hostView.destroy();
    };
    TuiPortalService.prototype.addTemplate = function (templateRef, context) {
        return this.safeHost.addTemplateChild(templateRef, context);
    };
    TuiPortalService.prototype.removeTemplate = function (viewRef) {
        viewRef.destroy();
    };
    TuiPortalService.ɵprov = ɵɵdefineInjectable({ factory: function TuiPortalService_Factory() { return new TuiPortalService(); }, token: TuiPortalService, providedIn: "root" });
    TuiPortalService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TuiPortalService);
    return TuiPortalService;
}());

var BLANK_CLIENT_RECT = {
    bottom: 0,
    height: 0,
    left: 0,
    right: 0,
    top: 0,
    width: 0,
};
/**
 * Host element for dynamically created portals, for example using {@link TuiDropdownDirective}.
 */
var TuiPortalHostComponent = /** @class */ (function () {
    function TuiPortalHostComponent(viewContainerRef, elementRef, portalService) {
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        portalService.attach(this);
    }
    TuiPortalHostComponent_1 = TuiPortalHostComponent;
    Object.defineProperty(TuiPortalHostComponent.prototype, "clientRect", {
        get: function () {
            return this.elementRef.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    TuiPortalHostComponent.prototype.addComponentChild = function (componentFactory, injector) {
        return this.viewContainerRef.createComponent(componentFactory, undefined, Injector.create({
            parent: injector,
            providers: [
                {
                    provide: TuiPortalHostComponent_1,
                    useValue: this,
                },
            ],
        }));
    };
    TuiPortalHostComponent.prototype.addTemplateChild = function (templateRef, context) {
        return this.viewContainerRef.createEmbeddedView(templateRef, context);
    };
    TuiPortalHostComponent.prototype.fixedPositionOffset = function () {
        return this.positionFixedOffsetRef
            ? this.positionFixedOffsetRef.nativeElement.getBoundingClientRect()
            : BLANK_CLIENT_RECT;
    };
    var TuiPortalHostComponent_1;
    TuiPortalHostComponent.ctorParameters = function () { return [
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiPortalService, decorators: [{ type: Inject, args: [TuiPortalService,] }] }
    ]; };
    __decorate([
        ViewChild('positionFixedOffset')
    ], TuiPortalHostComponent.prototype, "positionFixedOffsetRef", void 0);
    TuiPortalHostComponent = TuiPortalHostComponent_1 = __decorate([
        Component({
            selector: 'tui-portal-host',
            template: "<div #positionFixedOffset class=\"position-fixed-offset\"></div>\n<ng-content></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{position:relative;display:block;height:100%;z-index:0}:host:before{content:'';display:block;overflow:hidden}.position-fixed-offset{position:fixed;left:0;top:0;pointer-events:none;visibility:hidden;width:100%;height:100%}"]
        }),
        __param(0, Inject(ViewContainerRef)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiPortalService))
    ], TuiPortalHostComponent);
    return TuiPortalHostComponent;
}());

var TuiPortalHostModule = /** @class */ (function () {
    function TuiPortalHostModule() {
    }
    TuiPortalHostModule = __decorate([
        NgModule({
            declarations: [TuiPortalHostComponent],
            exports: [TuiPortalHostComponent],
        })
    ], TuiPortalHostModule);
    return TuiPortalHostModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPortalHostComponent, TuiPortalHostModule, TuiPortalService };
//# sourceMappingURL=taiga-ui-cdk-components-portal-host.js.map
