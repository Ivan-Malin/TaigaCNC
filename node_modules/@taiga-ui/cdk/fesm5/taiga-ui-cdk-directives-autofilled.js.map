{"version":3,"file":"taiga-ui-cdk-directives-autofilled.js","sources":["ng://@taiga-ui/cdk/directives/autofilled/autofilled.directive.ts","ng://@taiga-ui/cdk/directives/autofilled/autofilled.module.ts","ng://@taiga-ui/cdk/directives/autofilled/taiga-ui-cdk-directives-autofilled.ts"],"sourcesContent":["import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Inject,\n    Output,\n} from '@angular/core';\nimport {typedFromEvent, watch} from '@taiga-ui/cdk/observables';\nimport {TuiDestroyService, TuiDirectiveStylesService} from '@taiga-ui/cdk/services';\nimport {Observable} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nconst ON = 'tuiAutofillOn';\nconst OFF = 'tuiAutofillOff';\nconst STYLE = `\n@keyframes ${ON} {\n    from {\n        content: '1';\n    }\n\n    to {\n        content: '2';\n    }\n}\n\n@keyframes ${OFF} {\n    from {\n        content: '2';\n    }\n\n    to {\n        content: '1';\n    }\n}`;\n\n// @dynamic\n@Directive({\n    selector: 'input[tuiAutofilledChange]',\n    host: {\n        class: 'tui-autofill',\n    },\n    providers: [TuiDestroyService],\n})\nexport class TuiAutofilledDirective {\n    @Output()\n    readonly tuiAutofilledChange = new EventEmitter<boolean>();\n\n    @HostListener('animationstart', ['$event'])\n    onAnimationStart({animationName}: AnimationEvent) {\n        if (animationName === ON) {\n            this.tuiAutofilledChange.emit(true);\n        } else if (animationName === OFF) {\n            this.tuiAutofilledChange.emit(false);\n        }\n    }\n\n    constructor(\n        @Inject(TuiDirectiveStylesService)\n        directiveStyles: TuiDirectiveStylesService,\n        @Inject(ElementRef) {nativeElement}: ElementRef<HTMLInputElement>,\n        @Inject(ChangeDetectorRef) changeDetectorRef: ChangeDetectorRef,\n        @Inject(TuiDestroyService) destroy$: Observable<void>,\n    ) {\n        directiveStyles.addStyle(STYLE, 'TuiAutofilledDirective');\n\n        // Subscribing to synthetic keydown event on page reload autofill in Chrome\n        typedFromEvent(nativeElement, 'keydown')\n            .pipe(take(1), takeUntil(destroy$), watch(changeDetectorRef))\n            .subscribe();\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {TuiAutofilledDirective} from './autofilled.directive';\n\n@NgModule({\n    declarations: [TuiAutofilledDirective],\n    exports: [TuiAutofilledDirective],\n})\nexport class TuiAutofilledModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;AAcA,IAAM,EAAE,GAAG,eAAe,CAAC;AAC3B,IAAM,GAAG,GAAG,gBAAgB,CAAC;AAC7B,IAAM,KAAK,GAAG,kBACD,EAAE,gHAUF,GAAG,8FAQd,CAAC;AAEH;;IAqBI,gCAEI,eAA0C,EACtB,EAA6C,EACtC,iBAAoC,EACpC,QAA0B;YAFhC,gCAAa;QAd7B,wBAAmB,GAAG,IAAI,YAAY,EAAW,CAAC;QAkBvD,eAAe,CAAC,QAAQ,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;;QAG1D,cAAc,CAAC,aAAa,EAAE,SAAS,CAAC;aACnC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,iBAAiB,CAAC,CAAC;aAC5D,SAAS,EAAE,CAAC;KACpB;IArBD,iDAAgB,GAAhB,UAAiB,EAA+B;YAA9B,gCAAa;QAC3B,IAAI,aAAa,KAAK,EAAE,EAAE;YACtB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvC;aAAM,IAAI,aAAa,KAAK,GAAG,EAAE;YAC9B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxC;KACJ;;gBAIoB,yBAAyB,uBADzC,MAAM,SAAC,yBAAyB;gBAEI,UAAU,uBAA9C,MAAM,SAAC,UAAU;gBAC4B,iBAAiB,uBAA9D,MAAM,SAAC,iBAAiB;gBACY,UAAU,uBAA9C,MAAM,SAAC,iBAAiB;;IAhB7B;QADC,MAAM,EAAE;uEACkD;IAG3D;QADC,YAAY,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,CAAC;kEAO1C;IAXQ,sBAAsB;QAPlC,SAAS,CAAC;YACP,QAAQ,EAAE,4BAA4B;YACtC,IAAI,EAAE;gBACF,KAAK,EAAE,cAAc;aACxB;YACD,SAAS,EAAE,CAAC,iBAAiB,CAAC;SACjC,CAAC;QAeO,WAAA,MAAM,CAAC,yBAAyB,CAAC,CAAA;QAEjC,WAAA,MAAM,CAAC,UAAU,CAAC,CAAA;QAClB,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;QACzB,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;OAlBrB,sBAAsB,CA2BlC;IAAD,6BAAC;CA3BD;;;ICtCA;KAAmC;IAAtB,mBAAmB;QAJ/B,QAAQ,CAAC;YACN,YAAY,EAAE,CAAC,sBAAsB,CAAC;YACtC,OAAO,EAAE,CAAC,sBAAsB,CAAC;SACpC,CAAC;OACW,mBAAmB,CAAG;IAAD,0BAAC;CAAnC;;ACPA;;;;;;"}