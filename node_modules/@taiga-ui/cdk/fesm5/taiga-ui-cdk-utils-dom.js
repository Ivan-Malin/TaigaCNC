import { clamp } from '@taiga-ui/cdk/utils/math';
import { isPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAssert } from '@taiga-ui/cdk/classes';

function canScroll(element, rootElement, vertical, scrollEnd) {
    return vertical
        ? canScrollVertical(element, rootElement, scrollEnd)
        : canScrollHorizontal(element, rootElement, scrollEnd);
}
function canScrollVertical(element, rootElement, scrollEnd) {
    var currentElement = element;
    while (currentElement !== rootElement.parentElement) {
        if ((Math.floor(currentElement.scrollTop) > 0 && !scrollEnd) ||
            (Math.ceil(currentElement.scrollTop + currentElement.clientHeight) <
                currentElement.scrollHeight &&
                scrollEnd)) {
            return true;
        }
        if (currentElement.parentElement) {
            currentElement = currentElement.parentElement;
        }
        else {
            return false;
        }
    }
    return false;
}
function canScrollHorizontal(element, rootElement, scrollEnd) {
    var currentElement = element;
    while (currentElement !== rootElement.parentElement) {
        if ((Math.floor(currentElement.scrollLeft) > 0 && !scrollEnd) ||
            (Math.ceil(currentElement.scrollLeft + currentElement.clientWidth) <
                currentElement.scrollWidth &&
                scrollEnd)) {
            return true;
        }
        if (currentElement.parentElement) {
            currentElement = currentElement.parentElement;
        }
        else {
            return false;
        }
    }
    return false;
}

function containsOrAfter(current, node) {
    return (current.contains(node) ||
        !!(
        // tslint:disable:no-bitwise
        (node.compareDocumentPosition(current) & Node.DOCUMENT_POSITION_PRECEDING)));
}

function tuiCustomEvent(name, _a, documentRef) {
    var _b = _a === void 0 ? {} : _a, _c = _b.bubbles, bubbles = _c === void 0 ? false : _c, _d = _b.cancelable, cancelable = _d === void 0 ? false : _d, _e = _b.detail, detail = _e === void 0 ? null : _e;
    if (typeof CustomEvent === 'function') {
        return new CustomEvent(name, { bubbles: bubbles, cancelable: cancelable, detail: detail });
    }
    var customEvent = documentRef.createEvent('CustomEvent');
    customEvent.initCustomEvent(name, bubbles, cancelable, detail);
    return customEvent;
}

/**
 * Gets actual target from open Shadow DOM if event happened within it
 */
function getActualTarget(event) {
    if ('composedPath' in event) {
        return event.composedPath()[0];
    }
    return event.target;
}

/**
 * Gets text from data of clipboardEvent, it also works in IE and Edge browsers
 */
function getClipboardDataText(event, format) {
    if (format === void 0) { format = 'text/plain'; }
    return 'clipboardData' in event && event.clipboardData !== null
        ? event.clipboardData.getData(format)
        : event.target.ownerDocument.defaultView.clipboardData.getData('text');
}

/**
 * Gets closest element by selector i.e. {@link Element.closest}
 */
function getClosestElement(element, selector) {
    var closest = Element.prototype.closest;
    if (closest) {
        return closest.call(element, selector);
    }
    var matchesSelector = Element.prototype.matches || Element.prototype.msMatchesSelector;
    do {
        if (matchesSelector.call(element, selector)) {
            return element;
        }
        element = element.parentElement;
    } while (element !== null);
    return null;
}

function getDocumentOrShadowRoot(node) {
    return 'getRootNode' in node &&
        node.ownerDocument &&
        node.ownerDocument.body.contains(node)
        ? node.getRootNode()
        : node.ownerDocument;
}

/**
 * Returns array of Elements covering edges of given element or null if at least one edge middle point is visible
 *
 * CAUTION: Empty array means element if offscreen i.e. covered by no elements, rather than not covered
 */
function getElementObscurers(element) {
    var ownerDocument = element.ownerDocument;
    if (!ownerDocument || !ownerDocument.defaultView) {
        return null;
    }
    var _a = ownerDocument.defaultView, innerWidth = _a.innerWidth, innerHeight = _a.innerHeight;
    var documentRef = getDocumentOrShadowRoot(element);
    var rect = element.getBoundingClientRect();
    var left = clamp(Math.round(rect.left) + 2, 0, innerWidth);
    var top = clamp(Math.round(rect.top) + 2, 0, innerHeight);
    var right = clamp(Math.round(rect.right) - 2, 0, innerWidth);
    var bottom = clamp(Math.round(rect.bottom) - 2, 0, innerHeight);
    var horizontalMiddle = clamp(Math.round(rect.left + rect.width / 2), 0, innerWidth);
    var verticalMiddle = clamp(Math.round(rect.top + rect.height / 2), 0, innerHeight);
    var elements = [
        documentRef.elementFromPoint(horizontalMiddle, top),
        documentRef.elementFromPoint(horizontalMiddle, bottom),
        documentRef.elementFromPoint(left, verticalMiddle),
        documentRef.elementFromPoint(right, verticalMiddle),
    ];
    var nonNull = elements.filter(isPresent);
    if (!nonNull.length) {
        return nonNull;
    }
    var filtered = nonNull.filter(function (el) { return !element.contains(el); });
    return filtered.length === 4 ? filtered : null;
}

/**
 * Calculates offset for an element relative to it's parent several levels above
 *
 * @param host parent element
 * @param element
 * @return object with offsetTop and offsetLeft number properties
 */
function getElementOffset(host, element) {
    tuiAssert.assert(host.contains(element), 'Host must contain element');
    var offsetTop = element.offsetTop, offsetLeft = element.offsetLeft, offsetParent = element.offsetParent;
    while (offsetParent && offsetParent instanceof HTMLElement && offsetParent !== host) {
        offsetTop += offsetParent.offsetTop;
        offsetLeft += offsetParent.offsetLeft;
        offsetParent = offsetParent.offsetParent;
    }
    return { offsetTop: offsetTop, offsetLeft: offsetLeft };
}

/**
 * Finds nearest parent with scroll in it
 *
 * @param element initial element
 * @param vertical flag for orientation of scroll
 */
function getScrollParent(element, vertical) {
    if (vertical === void 0) { vertical = true; }
    if (element === null) {
        return null;
    }
    if (vertical && element.scrollHeight > element.clientHeight) {
        return element;
    }
    if (!vertical && element.scrollWidth > element.clientWidth) {
        return element;
    }
    return getScrollParent(element.parentElement, vertical);
}

function isCurrentTarget(_a) {
    var target = _a.target, currentTarget = _a.currentTarget;
    return target === currentTarget;
}

/**
 * Checks if node is inside a specific selector
 *
 * @param node
 * @param selector
 * @return true if node is inside a particular selector
 */
function isNodeIn(node, selector) {
    return node.nodeType === Node.TEXT_NODE
        ? !!node.parentElement && !!getClosestElement(node.parentElement, selector)
        : node.nodeType === Node.ELEMENT_NODE &&
            !!getClosestElement(node, selector);
}

/**
 * Generated bundle index. Do not edit.
 */

export { canScroll, containsOrAfter, getActualTarget, getClipboardDataText, getClosestElement, getDocumentOrShadowRoot, getElementObscurers, getElementOffset, getScrollParent, isCurrentTarget, isNodeIn, tuiCustomEvent };
//# sourceMappingURL=taiga-ui-cdk-utils-dom.js.map
