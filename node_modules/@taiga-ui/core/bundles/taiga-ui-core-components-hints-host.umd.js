(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('@taiga-ui/core/animations'), require('@taiga-ui/core/directives/hint'), require('@taiga-ui/core/services'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@tinkoff/ng-polymorpheus'), require('@ng-web-apis/common'), require('@taiga-ui/core/directives/pointer-hint')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/components/hints-host', ['exports', '@angular/core', '@taiga-ui/cdk', '@taiga-ui/core/animations', '@taiga-ui/core/directives/hint', '@taiga-ui/core/services', 'rxjs', 'rxjs/operators', '@angular/common', '@tinkoff/ng-polymorpheus', '@ng-web-apis/common', '@taiga-ui/core/directives/pointer-hint'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].core = global['taiga-ui'].core || {}, global['taiga-ui'].core.components = global['taiga-ui'].core.components || {}, global['taiga-ui'].core.components['hints-host'] = {}), global.ng.core, global.cdk, global['taiga-ui'].core.animations, global['taiga-ui'].core.directives.hint, global['taiga-ui'].core.services, global.rxjs, global.rxjs.operators, global.ng.common, global.ngPolymorpheus, global.common$1, global['taiga-ui'].core.directives['pointer-hint']));
}(this, (function (exports, core, cdk, animations, hint, services, rxjs, operators, common, ngPolymorpheus, common$1, pointerHint) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var TuiHintsHostComponent = /** @class */ (function () {
        function TuiHintsHostComponent(elementRef, hints$, changeDetectorRef, destroy$) {
            var _this = this;
            this.elementRef = elementRef;
            this.changeDetectorRef = changeDetectorRef;
            /**
             * @awful TODO: remove hints variable
             * and use hints$ after resolving issue with Change Detection
             */
            this.hints = [];
            hints$.pipe(operators.skip(1), operators.takeUntil(destroy$)).subscribe(function (hints) {
                _this.hints = hints;
                _this.changeDetectorRef.detectChanges();
            });
        }
        Object.defineProperty(TuiHintsHostComponent.prototype, "clientRect", {
            get: function () {
                return this.elementRef.nativeElement.getBoundingClientRect();
            },
            enumerable: true,
            configurable: true
        });
        TuiHintsHostComponent.prototype.onHovered = function (hovered, directive) {
            if (directive instanceof hint.TuiHintDirective) {
                directive.componentHovered$.next(hovered);
            }
        };
        TuiHintsHostComponent.ctorParameters = function () { return [
            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] },
            { type: services.TuiHintService, decorators: [{ type: core.Inject, args: [services.TuiHintService,] }] },
            { type: core.ChangeDetectorRef, decorators: [{ type: core.Inject, args: [core.ChangeDetectorRef,] }] },
            { type: rxjs.Observable, decorators: [{ type: core.Inject, args: [cdk.TuiDestroyService,] }] }
        ]; };
        TuiHintsHostComponent = __decorate([
            core.Component({
                selector: 'tui-hints-host',
                template: "<tui-hint-box\n    *ngFor=\"let hint of hints\"\n    role=\"tooltip\"\n    [attr.id]=\"hint.id\"\n    [@tuiFadeIn]\n    [mode]=\"hint.mode\"\n    [direction]=\"hint.direction\"\n    [hint]=\"hint\"\n    (tuiHoveredChange)=\"onHovered($event, hint)\"\n>\n    <div polymorpheus-outlet [content]=\"hint.content\">\n        <ng-template let-text>\n            <span class=\"text\">{{text}}</span>\n        </ng-template>\n    </div>\n</tui-hint-box>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                animations: [animations.tuiFadeIn],
                providers: [cdk.TuiDestroyService],
                host: {
                    'aria-live': 'polite',
                },
                styles: [":host{position:fixed;bottom:0;left:0;width:100%;height:0}.text{white-space:pre-wrap}"]
            }),
            __param(0, core.Inject(core.ElementRef)),
            __param(1, core.Inject(services.TuiHintService)),
            __param(2, core.Inject(core.ChangeDetectorRef)),
            __param(3, core.Inject(cdk.TuiDestroyService))
        ], TuiHintsHostComponent);
        return TuiHintsHostComponent;
    }());

    var SPACE = 8;
    var BORDER_WIDTH = 1;
    var LEFT_PADDING = 16;
    var TOP_PADDING = 12;
    var ARROW_SIZE = 8;
    var ARROW_OFFSET = 16;
    var ARROWHEAD_OFFSET = ARROW_OFFSET + (ARROW_SIZE * Math.sqrt(2)) / 2;
    var reverseDirectionsVertical = {
        'top-left': 'bottom-left',
        'top-right': 'bottom-right',
        'bottom-left': 'top-left',
        'bottom-right': 'top-right',
        left: 'right',
        right: 'left',
    };
    var reverseDirectionsHorizontal = {
        'top-left': 'top-right',
        'top-right': 'top-left',
        'bottom-left': 'bottom-right',
        'bottom-right': 'bottom-left',
        left: 'right',
        right: 'left',
    };
    // TODO: consider abstracting UI and move to CDK
    // Ambient type cannot be used without dynamic https://github.com/angular/angular/issues/23395
    // @dynamic
    var TuiHintBoxComponent = /** @class */ (function () {
        function TuiHintBoxComponent(animationFrame$, destroy$, ngZone, elementRef, windowRef, isMobile, hintsHost) {
            var _this = this;
            this.elementRef = elementRef;
            this.windowRef = windowRef;
            this.isMobile = isMobile;
            this.hintsHost = hintsHost;
            this.direction = 'bottom-left';
            this.mode = null;
            animationFrame$.pipe(cdk.tuiZonefree(ngZone), operators.takeUntil(destroy$)).subscribe(function () {
                _this.calculatePosition();
            });
        }
        Object.defineProperty(TuiHintBoxComponent.prototype, "isUntouchable", {
            get: function () {
                return this.hint instanceof pointerHint.TuiPointerHintDirective;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Calculates wrapper position.
         * Styles are set directly to avoid visual shake of element
         */
        TuiHintBoxComponent.prototype.calculatePosition = function () {
            if (this.mode !== "overflow" /* Overflow */) {
                this.calculateCoordinates();
            }
            else {
                this.setOverflowStyles();
            }
        };
        TuiHintBoxComponent.prototype.calculateCoordinates = function () {
            if (this.isMobile) {
                this.calculateMobileCoordinates();
                return;
            }
            if (!this.hint) {
                throw new Error('Hint directive is missing');
            }
            var hostRect = this.hint.getElementClientRect();
            var portalRect = this.hintsHost.clientRect;
            var tooltip = this.elementRef.nativeElement;
            var style = tooltip.style;
            var tooltipRect = tooltip.getBoundingClientRect();
            var isHostLong = hostRect.width > ARROWHEAD_OFFSET * 2;
            var directions = [
                'left',
                'right',
                'bottom-left',
                'bottom-right',
                'top-left',
                'top-right',
            ];
            var top = 0;
            var left = 0;
            var direction = this.direction;
            var horizontalTop = hostRect.top + hostRect.height / 2 - tooltipRect.height / 2 - portalRect.top;
            var horizontalLeft = hostRect.left - tooltipRect.width - SPACE - portalRect.left;
            var horizontalRight = hostRect.left + hostRect.width + SPACE - portalRect.left;
            var verticalBottom = hostRect.bottom + SPACE - portalRect.top;
            var verticalTop = hostRect.top - tooltipRect.height - SPACE - portalRect.top;
            var verticalRight = isHostLong
                ? hostRect.left - portalRect.left
                : hostRect.left + hostRect.width / 2 - ARROWHEAD_OFFSET - portalRect.left;
            var verticalLeft = isHostLong
                ? hostRect.left - tooltipRect.width + hostRect.width - portalRect.left
                : hostRect.left -
                    tooltipRect.width +
                    hostRect.width / 2 +
                    ARROWHEAD_OFFSET -
                    portalRect.left;
            directions.splice(directions.indexOf(direction), 1);
            while (true) {
                switch (direction) {
                    case 'left':
                        top = horizontalTop;
                        left = horizontalLeft;
                        break;
                    case 'right':
                        top = horizontalTop;
                        left = horizontalRight;
                        break;
                    case 'top-right':
                        top = verticalTop;
                        left = verticalRight;
                        break;
                    case 'top-left':
                        top = verticalTop;
                        left = verticalLeft;
                        break;
                    case 'bottom-right':
                        top = verticalBottom;
                        left = verticalRight;
                        break;
                    case 'bottom-left':
                        top = verticalBottom;
                        left = verticalLeft;
                        break;
                }
                var verticalFit = top + portalRect.top > SPACE &&
                    top + tooltipRect.height + SPACE + portalRect.top <
                        this.windowRef.innerHeight;
                var horizontalFit = left > SPACE &&
                    left + tooltipRect.width + SPACE + portalRect.left < portalRect.width;
                if (directions.length === 0 || (verticalFit && horizontalFit)) {
                    break;
                }
                direction = verticalFit
                    ? reverseDirectionsHorizontal[direction]
                    : reverseDirectionsVertical[direction];
                direction =
                    directions.splice(directions.indexOf(direction), 1)[0] || direction;
            }
            style.top = cdk.px(top);
            style.left = cdk.px(left);
            tooltip.setAttribute('data-tui-host-direction', direction);
        };
        TuiHintBoxComponent.prototype.calculateMobileCoordinates = function () {
            if (!this.hint) {
                throw new Error('Hint directive is missing');
            }
            var hostRect = this.hint.getElementClientRect();
            var portalRect = this.hintsHost.clientRect;
            var tooltip = this.elementRef.nativeElement;
            var style = tooltip.style;
            var tooltipRect = tooltip.getBoundingClientRect();
            var verticalTop = hostRect.top - tooltipRect.height - SPACE - portalRect.top;
            var verticalBottom = hostRect.bottom + SPACE - portalRect.top;
            var verticalTopFit = verticalTop + portalRect.top > SPACE &&
                hostRect.top < this.windowRef.innerHeight;
            var verticalBottomFit = hostRect.bottom > 0 &&
                hostRect.bottom + 2 * SPACE + tooltipRect.height < this.windowRef.innerHeight;
            var direction = (this.direction.includes('top') && verticalTopFit) || !verticalBottomFit
                ? 'top'
                : 'bottom';
            var attemptedLeft = portalRect.left + hostRect.left + hostRect.width / 2 - tooltipRect.width / 2;
            var left = Math.max(attemptedLeft + tooltipRect.width + SPACE > portalRect.right
                ? portalRect.right - SPACE - tooltipRect.width
                : attemptedLeft, SPACE * 2);
            style.left = cdk.px(left);
            style.top = direction === 'top' ? cdk.px(verticalTop) : cdk.px(verticalBottom);
            if (this.arrow) {
                this.arrow.nativeElement.style.left = cdk.px(hostRect.left <= SPACE * 2 && hostRect.width > ARROW_OFFSET * 2
                    ? ARROW_OFFSET
                    : hostRect.left + hostRect.width / 2 - left - ARROW_SIZE / 2);
            }
            tooltip.setAttribute('data-tui-host-direction', direction);
        };
        TuiHintBoxComponent.prototype.setOverflowStyles = function () {
            if (!this.hint) {
                throw new Error('Hint directive is missing');
            }
            var hostRect = this.hint.getElementClientRect();
            var style = this.elementRef.nativeElement.style;
            style.top = cdk.px(hostRect.top - window.innerHeight - TOP_PADDING - BORDER_WIDTH);
            style.left = cdk.px(hostRect.left - LEFT_PADDING - BORDER_WIDTH);
            style.width = cdk.px(hostRect.width + LEFT_PADDING * 2 + BORDER_WIDTH * 2);
        };
        TuiHintBoxComponent.ctorParameters = function () { return [
            { type: rxjs.Observable, decorators: [{ type: core.Inject, args: [common$1.ANIMATION_FRAME,] }] },
            { type: rxjs.Observable, decorators: [{ type: core.Inject, args: [cdk.TuiDestroyService,] }] },
            { type: core.NgZone, decorators: [{ type: core.Inject, args: [core.NgZone,] }] },
            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] },
            { type: Window, decorators: [{ type: core.Inject, args: [common$1.WINDOW,] }] },
            { type: Boolean, decorators: [{ type: core.Inject, args: [cdk.TUI_IS_MOBILE,] }] },
            { type: TuiHintsHostComponent, decorators: [{ type: core.Inject, args: [TuiHintsHostComponent,] }] }
        ]; };
        __decorate([
            core.Input()
        ], TuiHintBoxComponent.prototype, "hint", void 0);
        __decorate([
            core.Input(),
            cdk.tuiDefaultProp()
        ], TuiHintBoxComponent.prototype, "direction", void 0);
        __decorate([
            core.Input(),
            core.HostBinding('attr.data-mode'),
            cdk.tuiDefaultProp()
        ], TuiHintBoxComponent.prototype, "mode", void 0);
        __decorate([
            core.ViewChild('arrow')
        ], TuiHintBoxComponent.prototype, "arrow", void 0);
        __decorate([
            cdk.tuiPure,
            core.HostBinding('class._untouchable')
        ], TuiHintBoxComponent.prototype, "isUntouchable", null);
        TuiHintBoxComponent = __decorate([
            core.Component({
                selector: 'tui-hint-box',
                template: "<!-- @bad TODO: Refactor to use this arrow in all cases -->\n<div *ngIf=\"isMobile\" #arrow class=\"arrow\"></div>\n<div class=\"tooltip\" automation-id=\"tui-hint-box__tooltip\">\n    <ng-content></ng-content>\n</div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                providers: [cdk.TuiDestroyService],
                styles: [":host{position:absolute;top:0;left:0;max-width:288px;min-height:var(--tui-height-m);padding:12px 16px;background:var(--tui-primary);border-radius:var(--tui-radius-l);color:var(--tui-primary-text);box-sizing:border-box}:host .arrow,:host:not([data-mode=overflow]):before{content:'';position:absolute;width:8px;height:8px;border-radius:2px;box-sizing:border-box;background-color:inherit;transform:rotate(45deg)}:host[data-tui-host-direction=top] .arrow{bottom:-4px}:host[data-tui-host-direction=bottom] .arrow{top:-4px}:host[data-tui-host-direction=bottom]:before,:host[data-tui-host-direction=top]:before{display:none}:host[data-tui-host-direction=top-left]:before,:host[data-tui-host-direction=top-right]:before{bottom:-4px}:host[data-tui-host-direction=bottom-left]:before,:host[data-tui-host-direction=bottom-right]:before{top:-4px}:host[data-tui-host-direction=bottom-left]:before,:host[data-tui-host-direction=top-left]:before{right:17.2px}:host[data-tui-host-direction=bottom-right]:before,:host[data-tui-host-direction=top-right]:before{left:17.2px}:host[data-tui-host-direction=left]:before,:host[data-tui-host-direction=right]:before{top:50%;margin-top:-4px}:host[data-tui-host-direction=left]:before{right:-4px}:host[data-tui-host-direction=right]:before{left:-4px}:host[data-mode=error]{background-color:var(--tui-error-fill)}:host[data-mode=onDark],:host[data-mode=overflow]{box-shadow:0 8px 16px rgba(51,51,51,.2);border:1px solid var(--tui-base-03);background-color:var(--tui-base-01);color:var(--tui-text-01)}:host[data-mode=onDark]:before,:host[data-mode=overflow]:before{border:1px solid var(--tui-base-03)}:host[data-mode=onDark][data-tui-host-direction=left]:before,:host[data-mode=overflow][data-tui-host-direction=left]:before{border-left-color:transparent;border-bottom-color:transparent}:host[data-mode=onDark][data-tui-host-direction=right]:before,:host[data-mode=overflow][data-tui-host-direction=right]:before{border-right-color:transparent;border-top-color:transparent}:host[data-mode=onDark][data-tui-host-direction=top-left]:before,:host[data-mode=onDark][data-tui-host-direction=top-right]:before,:host[data-mode=overflow][data-tui-host-direction=top-left]:before,:host[data-mode=overflow][data-tui-host-direction=top-right]:before{border-left-color:transparent;border-top-color:transparent}:host[data-mode=onDark][data-tui-host-direction=bottom-left]:before,:host[data-mode=onDark][data-tui-host-direction=bottom-right]:before,:host[data-mode=overflow][data-tui-host-direction=bottom-left]:before,:host[data-mode=overflow][data-tui-host-direction=bottom-right]:before{border-right-color:transparent;border-bottom-color:transparent}:host[data-mode=overflow]{max-width:none}:host._untouchable{pointer-events:none}.tooltip{font:var(--tui-font-text-s);word-wrap:break-word}:host[data-mode=overflow] .tooltip{font:inherit}"]
            }),
            __param(0, core.Inject(common$1.ANIMATION_FRAME)),
            __param(1, core.Inject(cdk.TuiDestroyService)),
            __param(2, core.Inject(core.NgZone)),
            __param(3, core.Inject(core.ElementRef)),
            __param(4, core.Inject(common$1.WINDOW)),
            __param(5, core.Inject(cdk.TUI_IS_MOBILE)),
            __param(6, core.Inject(TuiHintsHostComponent))
        ], TuiHintBoxComponent);
        return TuiHintBoxComponent;
    }());

    var TuiHintBoxModule = /** @class */ (function () {
        function TuiHintBoxModule() {
        }
        TuiHintBoxModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [TuiHintBoxComponent],
                exports: [TuiHintBoxComponent],
            })
        ], TuiHintBoxModule);
        return TuiHintBoxModule;
    }());

    var TuiHintsHostModule = /** @class */ (function () {
        function TuiHintsHostModule() {
        }
        TuiHintsHostModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, ngPolymorpheus.PolymorpheusModule, cdk.TuiHoveredModule, TuiHintBoxModule],
                declarations: [TuiHintsHostComponent],
                exports: [TuiHintsHostComponent],
                entryComponents: [TuiHintsHostComponent],
            })
        ], TuiHintsHostModule);
        return TuiHintsHostModule;
    }());

    exports.TuiHintBoxComponent = TuiHintBoxComponent;
    exports.TuiHintBoxModule = TuiHintBoxModule;
    exports.TuiHintsHostComponent = TuiHintsHostComponent;
    exports.TuiHintsHostModule = TuiHintsHostModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-core-components-hints-host.umd.js.map
