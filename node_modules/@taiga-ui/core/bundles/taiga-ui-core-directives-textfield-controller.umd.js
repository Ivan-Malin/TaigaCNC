(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/directives/textfield-controller', ['exports', '@angular/core', '@taiga-ui/cdk', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].core = global['taiga-ui'].core || {}, global['taiga-ui'].core.directives = global['taiga-ui'].core.directives || {}, global['taiga-ui'].core.directives['textfield-controller'] = {}), global.ng.core, global.cdk, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, cdk, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var TuiTextfieldController = /** @class */ (function () {
        function TuiTextfieldController(change$, autocompleteDirective, cleanerDirective, customContentDirective, exampleTextDirective, inputModeDirective, labelOutsideDirective, maxLengthDirective, sizeDirective, typeDirective) {
            this.change$ = change$;
            this.autocompleteDirective = autocompleteDirective;
            this.cleanerDirective = cleanerDirective;
            this.customContentDirective = customContentDirective;
            this.exampleTextDirective = exampleTextDirective;
            this.inputModeDirective = inputModeDirective;
            this.labelOutsideDirective = labelOutsideDirective;
            this.maxLengthDirective = maxLengthDirective;
            this.sizeDirective = sizeDirective;
            this.typeDirective = typeDirective;
        }
        Object.defineProperty(TuiTextfieldController.prototype, "autocomplete", {
            get: function () {
                return this.autocompleteDirective.autocomplete;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "cleaner", {
            get: function () {
                return this.cleanerDirective.cleaner;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "customContent", {
            get: function () {
                return this.customContentDirective.customContent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "exampleText", {
            get: function () {
                return this.exampleTextDirective.exampleText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "inputMode", {
            get: function () {
                return this.inputModeDirective.inputMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "labelOutside", {
            get: function () {
                return this.labelOutsideDirective.labelOutside;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "maxLength", {
            get: function () {
                return this.maxLengthDirective.maxLength;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "size", {
            get: function () {
                return this.sizeDirective.size;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TuiTextfieldController.prototype, "type", {
            get: function () {
                return this.typeDirective.type;
            },
            enumerable: true,
            configurable: true
        });
        return TuiTextfieldController;
    }());

    var TUI_TEXTFIELD_AUTOCOMPLETE = new core.InjectionToken('tuiTextfieldAutocomplete', { factory: autocompleteDirectiveFactory });
    var TuiTextfieldAutocompleteDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldAutocompleteDirective, _super);
        function TuiTextfieldAutocompleteDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.autocomplete = null;
            return _this;
        }
        TuiTextfieldAutocompleteDirective_1 = TuiTextfieldAutocompleteDirective;
        var TuiTextfieldAutocompleteDirective_1;
        __decorate([
            core.Input('tuiTextfieldAutocomplete')
        ], TuiTextfieldAutocompleteDirective.prototype, "autocomplete", void 0);
        TuiTextfieldAutocompleteDirective = TuiTextfieldAutocompleteDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldAutocomplete]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_AUTOCOMPLETE,
                        useExisting: core.forwardRef(function () { return TuiTextfieldAutocompleteDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldAutocompleteDirective);
        return TuiTextfieldAutocompleteDirective;
    }(cdk.TuiController));
    function autocompleteDirectiveFactory() {
        return new TuiTextfieldAutocompleteDirective();
    }

    var TUI_TEXTFIELD_CLEANER = new core.InjectionToken('tuiTextfieldCleaner', { factory: cleanerDirectiveFactory });
    var TuiTextfieldCleanerDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldCleanerDirective, _super);
        function TuiTextfieldCleanerDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.cleaner = false;
            return _this;
        }
        TuiTextfieldCleanerDirective_1 = TuiTextfieldCleanerDirective;
        var TuiTextfieldCleanerDirective_1;
        __decorate([
            core.Input('tuiTextfieldCleaner')
        ], TuiTextfieldCleanerDirective.prototype, "cleaner", void 0);
        TuiTextfieldCleanerDirective = TuiTextfieldCleanerDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldCleaner]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_CLEANER,
                        useExisting: core.forwardRef(function () { return TuiTextfieldCleanerDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldCleanerDirective);
        return TuiTextfieldCleanerDirective;
    }(cdk.TuiController));
    function cleanerDirectiveFactory() {
        return new TuiTextfieldCleanerDirective();
    }

    var TUI_TEXTFIELD_CUSTOM_CONTENT = new core.InjectionToken('tuiTextfieldCustomContent', { factory: customContentDirectiveFactory });
    var TuiTextfieldCustomContentDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldCustomContentDirective, _super);
        function TuiTextfieldCustomContentDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.customContent = null;
            return _this;
        }
        TuiTextfieldCustomContentDirective_1 = TuiTextfieldCustomContentDirective;
        var TuiTextfieldCustomContentDirective_1;
        __decorate([
            core.Input('tuiTextfieldCustomContent')
        ], TuiTextfieldCustomContentDirective.prototype, "customContent", void 0);
        TuiTextfieldCustomContentDirective = TuiTextfieldCustomContentDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldCustomContent]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_CUSTOM_CONTENT,
                        useExisting: core.forwardRef(function () { return TuiTextfieldCustomContentDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldCustomContentDirective);
        return TuiTextfieldCustomContentDirective;
    }(cdk.TuiController));
    function customContentDirectiveFactory() {
        return new TuiTextfieldCustomContentDirective();
    }

    var TUI_TEXTFIELD_EXAMPLE_TEXT = new core.InjectionToken('tuiTextfieldExampleText', { factory: exampleTextDirectiveFactory });
    var TuiTextfieldExampleTextDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldExampleTextDirective, _super);
        function TuiTextfieldExampleTextDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.exampleText = '';
            return _this;
        }
        TuiTextfieldExampleTextDirective_1 = TuiTextfieldExampleTextDirective;
        var TuiTextfieldExampleTextDirective_1;
        __decorate([
            core.Input('tuiTextfieldExampleText')
        ], TuiTextfieldExampleTextDirective.prototype, "exampleText", void 0);
        TuiTextfieldExampleTextDirective = TuiTextfieldExampleTextDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldExampleText]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_EXAMPLE_TEXT,
                        useExisting: core.forwardRef(function () { return TuiTextfieldExampleTextDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldExampleTextDirective);
        return TuiTextfieldExampleTextDirective;
    }(cdk.TuiController));
    function exampleTextDirectiveFactory() {
        return new TuiTextfieldExampleTextDirective();
    }

    var TUI_TEXTFIELD_INPUT_MODE = new core.InjectionToken('tuiTextfieldInputMode', { factory: inputModeDirectiveFactory });
    var TuiTextfieldInputModeDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldInputModeDirective, _super);
        function TuiTextfieldInputModeDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.inputMode = "text" /* Text */;
            return _this;
        }
        TuiTextfieldInputModeDirective_1 = TuiTextfieldInputModeDirective;
        var TuiTextfieldInputModeDirective_1;
        __decorate([
            core.Input('tuiTextfieldInputMode')
        ], TuiTextfieldInputModeDirective.prototype, "inputMode", void 0);
        TuiTextfieldInputModeDirective = TuiTextfieldInputModeDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldInputMode]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_INPUT_MODE,
                        useExisting: core.forwardRef(function () { return TuiTextfieldInputModeDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldInputModeDirective);
        return TuiTextfieldInputModeDirective;
    }(cdk.TuiController));
    function inputModeDirectiveFactory() {
        return new TuiTextfieldInputModeDirective();
    }

    var TUI_TEXTFIELD_LABEL_OUTSIDE = new core.InjectionToken('tuiTextfieldLabelOutside', { factory: labelOutsideDirectiveFactory });
    var TuiTextfieldLabelOutsideDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldLabelOutsideDirective, _super);
        function TuiTextfieldLabelOutsideDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.labelOutside = false;
            return _this;
        }
        TuiTextfieldLabelOutsideDirective_1 = TuiTextfieldLabelOutsideDirective;
        var TuiTextfieldLabelOutsideDirective_1;
        __decorate([
            core.Input('tuiTextfieldLabelOutside')
        ], TuiTextfieldLabelOutsideDirective.prototype, "labelOutside", void 0);
        TuiTextfieldLabelOutsideDirective = TuiTextfieldLabelOutsideDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldLabelOutside]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
                        useExisting: core.forwardRef(function () { return TuiTextfieldLabelOutsideDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldLabelOutsideDirective);
        return TuiTextfieldLabelOutsideDirective;
    }(cdk.TuiController));
    function labelOutsideDirectiveFactory() {
        return new TuiTextfieldLabelOutsideDirective();
    }

    var TUI_TEXTFIELD_MAX_LENGTH = new core.InjectionToken('tuiTextfieldMaxLength', { factory: maxLengthDirectiveFactory });
    var TuiTextfieldMaxLengthDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldMaxLengthDirective, _super);
        function TuiTextfieldMaxLengthDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.maxLength = null;
            return _this;
        }
        TuiTextfieldMaxLengthDirective_1 = TuiTextfieldMaxLengthDirective;
        var TuiTextfieldMaxLengthDirective_1;
        __decorate([
            core.Input('tuiTextfieldMaxLength')
        ], TuiTextfieldMaxLengthDirective.prototype, "maxLength", void 0);
        TuiTextfieldMaxLengthDirective = TuiTextfieldMaxLengthDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldMaxLength]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_MAX_LENGTH,
                        useExisting: core.forwardRef(function () { return TuiTextfieldMaxLengthDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldMaxLengthDirective);
        return TuiTextfieldMaxLengthDirective;
    }(cdk.TuiController));
    function maxLengthDirectiveFactory() {
        return new TuiTextfieldMaxLengthDirective();
    }

    var TUI_TEXTFIELD_SIZE = new core.InjectionToken('tuiTextfieldSize', { factory: sizeDirectiveFactory });
    var TuiTextfieldSizeDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldSizeDirective, _super);
        function TuiTextfieldSizeDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.size = 'l';
            return _this;
        }
        TuiTextfieldSizeDirective_1 = TuiTextfieldSizeDirective;
        var TuiTextfieldSizeDirective_1;
        __decorate([
            core.Input('tuiTextfieldSize')
        ], TuiTextfieldSizeDirective.prototype, "size", void 0);
        TuiTextfieldSizeDirective = TuiTextfieldSizeDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldSize]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_SIZE,
                        useExisting: core.forwardRef(function () { return TuiTextfieldSizeDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldSizeDirective);
        return TuiTextfieldSizeDirective;
    }(cdk.TuiController));
    function sizeDirectiveFactory() {
        return new TuiTextfieldSizeDirective();
    }

    var TUI_TEXTFIELD_TYPE = new core.InjectionToken('tuiTextfieldType', { factory: typeDirectiveFactory });
    var TuiTextfieldTypeDirective = /** @class */ (function (_super) {
        __extends(TuiTextfieldTypeDirective, _super);
        function TuiTextfieldTypeDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = "text" /* Text */;
            return _this;
        }
        TuiTextfieldTypeDirective_1 = TuiTextfieldTypeDirective;
        var TuiTextfieldTypeDirective_1;
        __decorate([
            core.Input('tuiTextfieldType')
        ], TuiTextfieldTypeDirective.prototype, "type", void 0);
        TuiTextfieldTypeDirective = TuiTextfieldTypeDirective_1 = __decorate([
            core.Directive({
                selector: '[tuiTextfieldType]',
                providers: [
                    {
                        provide: TUI_TEXTFIELD_TYPE,
                        useExisting: core.forwardRef(function () { return TuiTextfieldTypeDirective_1; }),
                    },
                ],
            })
        ], TuiTextfieldTypeDirective);
        return TuiTextfieldTypeDirective;
    }(cdk.TuiController));
    function typeDirectiveFactory() {
        return new TuiTextfieldTypeDirective();
    }

    var TuiTextfieldControllerModule = /** @class */ (function () {
        function TuiTextfieldControllerModule() {
        }
        TuiTextfieldControllerModule = __decorate([
            core.NgModule({
                declarations: [
                    TuiTextfieldAutocompleteDirective,
                    TuiTextfieldCleanerDirective,
                    TuiTextfieldCustomContentDirective,
                    TuiTextfieldExampleTextDirective,
                    TuiTextfieldInputModeDirective,
                    TuiTextfieldLabelOutsideDirective,
                    TuiTextfieldMaxLengthDirective,
                    TuiTextfieldSizeDirective,
                    TuiTextfieldTypeDirective,
                ],
                exports: [
                    TuiTextfieldAutocompleteDirective,
                    TuiTextfieldCleanerDirective,
                    TuiTextfieldCustomContentDirective,
                    TuiTextfieldExampleTextDirective,
                    TuiTextfieldInputModeDirective,
                    TuiTextfieldLabelOutsideDirective,
                    TuiTextfieldMaxLengthDirective,
                    TuiTextfieldSizeDirective,
                    TuiTextfieldTypeDirective,
                ],
            })
        ], TuiTextfieldControllerModule);
        return TuiTextfieldControllerModule;
    }());

    var TUI_TEXTIFELD_WATCHED_CONTROLLER = new core.InjectionToken('watched textfield controller');
    function textfieldWatchedControllerFactory(changeDetectorRef, destroy$) {
        var controllers = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            controllers[_i - 2] = arguments[_i];
        }
        var change$ = rxjs.merge.apply(void 0, __spread(controllers.map(function (_a) {
            var change$ = _a.change$;
            return change$ || rxjs.NEVER;
        }))).pipe(cdk.watch(changeDetectorRef), operators.takeUntil(destroy$));
        change$.subscribe();
        return new (TuiTextfieldController.bind.apply(TuiTextfieldController, __spread([void 0, change$], controllers)))();
    }
    var TEXTFIELD_CONTROLLER_PROVIDER = [
        cdk.TuiDestroyService,
        {
            provide: TUI_TEXTIFELD_WATCHED_CONTROLLER,
            deps: [
                core.ChangeDetectorRef,
                cdk.TuiDestroyService,
                TUI_TEXTFIELD_AUTOCOMPLETE,
                TUI_TEXTFIELD_CLEANER,
                TUI_TEXTFIELD_CUSTOM_CONTENT,
                TUI_TEXTFIELD_EXAMPLE_TEXT,
                TUI_TEXTFIELD_INPUT_MODE,
                TUI_TEXTFIELD_LABEL_OUTSIDE,
                TUI_TEXTFIELD_MAX_LENGTH,
                TUI_TEXTFIELD_SIZE,
                TUI_TEXTFIELD_TYPE,
            ],
            useFactory: textfieldWatchedControllerFactory,
        },
    ];

    exports.TEXTFIELD_CONTROLLER_PROVIDER = TEXTFIELD_CONTROLLER_PROVIDER;
    exports.TUI_TEXTFIELD_AUTOCOMPLETE = TUI_TEXTFIELD_AUTOCOMPLETE;
    exports.TUI_TEXTFIELD_CLEANER = TUI_TEXTFIELD_CLEANER;
    exports.TUI_TEXTFIELD_CUSTOM_CONTENT = TUI_TEXTFIELD_CUSTOM_CONTENT;
    exports.TUI_TEXTFIELD_EXAMPLE_TEXT = TUI_TEXTFIELD_EXAMPLE_TEXT;
    exports.TUI_TEXTFIELD_INPUT_MODE = TUI_TEXTFIELD_INPUT_MODE;
    exports.TUI_TEXTFIELD_LABEL_OUTSIDE = TUI_TEXTFIELD_LABEL_OUTSIDE;
    exports.TUI_TEXTFIELD_MAX_LENGTH = TUI_TEXTFIELD_MAX_LENGTH;
    exports.TUI_TEXTFIELD_SIZE = TUI_TEXTFIELD_SIZE;
    exports.TUI_TEXTFIELD_TYPE = TUI_TEXTFIELD_TYPE;
    exports.TUI_TEXTIFELD_WATCHED_CONTROLLER = TUI_TEXTIFELD_WATCHED_CONTROLLER;
    exports.TuiTextfieldAutocompleteDirective = TuiTextfieldAutocompleteDirective;
    exports.TuiTextfieldCleanerDirective = TuiTextfieldCleanerDirective;
    exports.TuiTextfieldController = TuiTextfieldController;
    exports.TuiTextfieldControllerModule = TuiTextfieldControllerModule;
    exports.TuiTextfieldCustomContentDirective = TuiTextfieldCustomContentDirective;
    exports.TuiTextfieldExampleTextDirective = TuiTextfieldExampleTextDirective;
    exports.TuiTextfieldInputModeDirective = TuiTextfieldInputModeDirective;
    exports.TuiTextfieldLabelOutsideDirective = TuiTextfieldLabelOutsideDirective;
    exports.TuiTextfieldMaxLengthDirective = TuiTextfieldMaxLengthDirective;
    exports.TuiTextfieldSizeDirective = TuiTextfieldSizeDirective;
    exports.TuiTextfieldTypeDirective = TuiTextfieldTypeDirective;
    exports.autocompleteDirectiveFactory = autocompleteDirectiveFactory;
    exports.cleanerDirectiveFactory = cleanerDirectiveFactory;
    exports.customContentDirectiveFactory = customContentDirectiveFactory;
    exports.exampleTextDirectiveFactory = exampleTextDirectiveFactory;
    exports.inputModeDirectiveFactory = inputModeDirectiveFactory;
    exports.labelOutsideDirectiveFactory = labelOutsideDirectiveFactory;
    exports.maxLengthDirectiveFactory = maxLengthDirectiveFactory;
    exports.sizeDirectiveFactory = sizeDirectiveFactory;
    exports.textfieldWatchedControllerFactory = textfieldWatchedControllerFactory;
    exports.typeDirectiveFactory = typeDirectiveFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-core-directives-textfield-controller.umd.js.map
