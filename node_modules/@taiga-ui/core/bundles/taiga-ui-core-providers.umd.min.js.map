{"version":3,"sources":["ng://@taiga-ui/core/providers/mode.provider.ts","ng://@taiga-ui/core/providers/watched-controller-provider-factory.ts"],"names":["modeFactory","MODE_PROVIDER","provide","TUI_MODE","deps","Optional","TuiModeDirective","ElementRef","useFactory","Éµ0","controller","changeDetectorRef","destroy$","change$","pipe","watch","takeUntil","subscribe"],"mappings":"0yBAQgBA,EAAAA,YAHHC,EAA0B,CACnCC,QAASC,EAAAA,SACTC,KAAM,CAAC,CAAC,IAAIC,EAAAA,SAAYC,EAAAA,kBAAmBC,EAAAA,YAC3CC,WAAUC,yDCFVC,EACAC,EACAC,GAIA,OAFAF,EAAWG,QAAQC,KAAKC,EAAAA,MAAMJ,GAAoBK,EAAAA,UAAUJ,IAAWK,YAEhEP","sourcesContent":["import {ElementRef, Optional, Provider} from '@angular/core';\nimport {TuiModeDirective} from '@taiga-ui/core/directives/mode';\nimport {TUI_MODE} from '@taiga-ui/core/tokens';\nimport {modeFactory} from '@taiga-ui/core/utils/miscellaneous';\n\nexport const MODE_PROVIDER: Provider = {\n    provide: TUI_MODE,\n    deps: [[new Optional(), TuiModeDirective], ElementRef],\n    useFactory: modeFactory,\n};\n","import {ChangeDetectorRef} from '@angular/core';\nimport {TuiController, watch} from '@taiga-ui/cdk';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nexport function watchedControllerFactory(\n    controller: TuiController,\n    changeDetectorRef: ChangeDetectorRef,\n    destroy$: Observable<void>,\n): TuiController {\n    controller.change$.pipe(watch(changeDetectorRef), takeUntil(destroy$)).subscribe();\n\n    return controller;\n}\n"]}