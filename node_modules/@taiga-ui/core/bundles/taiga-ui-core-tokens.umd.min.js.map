{"version":3,"sources":["ng://@taiga-ui/core/tokens/assert-enabled.ts","ng://@taiga-ui/core/tokens/data-list-accessor.ts","ng://@taiga-ui/core/tokens/data-list-host.ts","ng://@taiga-ui/core/tokens/document-or-shadow-root.ts","ng://@taiga-ui/core/tokens/dropdown-directive.ts","ng://@taiga-ui/core/tokens/element-ref.ts","ng://@taiga-ui/core/tokens/i18n.ts","ng://@taiga-ui/core/tokens/icons.ts","ng://@taiga-ui/core/tokens/icons-path.ts","ng://@taiga-ui/core/tokens/mode.ts","ng://@taiga-ui/core/tokens/option-content.ts","ng://@taiga-ui/core/tokens/sanitizer.ts","ng://@taiga-ui/core/tokens/scroll-ref.ts","ng://@taiga-ui/core/tokens/textfield-appearance.ts","ng://@taiga-ui/core/tokens/value-accessor.ts"],"names":["TUI_ASSERT_ENABLED","InjectionToken","factory","isDevMode","TUI_DATA_LIST_ACCESSOR","TUI_DATA_LIST_HOST","TUI_DOCUMENT_OR_SHADOW_ROOT","TUI_DROPDOWN_DIRECTIVE","TUI_ELEMENT_REF","TUI_MONTHS","extractI18n","TUI_CLOSE_WORD","TUI_NOTHING_FOUND_MESSAGE","TUI_DEFAULT_ERROR_MESSAGE","TUI_SPIN_TEXTS","TUI_SHORT_WEEK_DAYS","TUI_ICONS","TUI_ICONS_PATH","DEFAULT_ICONS_PATH","TUI_MODE","TUI_OPTION_CONTENT","TUI_SANITIZER","TOKEN","TUI_SCROLL_REF","TUI_TEXTFIELD_APPEARANCE","TUI_VALUE_ACCESSOR"],"mappings":"qjBAEaA,EAAqB,IAAIC,EAAAA,eAClC,4CACA,CACIC,QAAS,WAAM,OAAAC,EAAAA,eCFVC,EAAyB,IAAIH,EAAAA,eACtC,wBCDSI,EAAqB,IAAIJ,EAAAA,eAClC,uBCFSK,EAA8B,IAAIL,EAAAA,eAC3C,0BCASM,EAAyB,IAAIN,EAAAA,eACtC,iDCFSO,EAAkB,IAAIP,EAAAA,eAC/B,mECASQ,EAAa,IAAIR,EAAAA,eAAe,yBAA0B,CACnEC,QAASQ,EAAAA,YAAY,YAGZC,EAAiB,IAAIV,EAAAA,eAAe,oBAAqB,CAClEC,QAASQ,EAAAA,YAAY,WAGZE,EAA4B,IAAIX,EAAAA,eACzC,+BACA,CACIC,QAASQ,EAAAA,YAAY,yBAIhBG,EAA4B,IAAIZ,EAAAA,eAAe,wBAAyB,CACjFC,QAASQ,EAAAA,YAAY,yBAGZI,EAAiB,IAAIb,EAAAA,eAAe,kBAAmB,CAChEC,QAASQ,EAAAA,YAAY,eAGZK,EAAsB,IAAId,EAAAA,eAAe,uBAAwB,CAC1EC,QAASQ,EAAAA,YAAY,mBCzBZM,EAAY,IAAIf,EAAAA,eACzB,gFACA,CACIC,QAAS,WAAM,MAAA,MCAVe,EAET,IAAIhB,EAAAA,eACJ,gDACA,CACIC,QAAS,WAAM,OAAAgB,EAAAA,sBCNVC,EAET,IAAIlB,EAAAA,eACJ,qCCHSmB,EAAqB,IAAInB,EAAAA,eAEpC,mCCJWoB,EAAgBC,EAAAA,cCAhBC,EAAiB,IAAItB,EAAAA,eAC9B,wBCASuB,EAA2B,IAAIvB,EAAAA,eACxC,wBACA,CACIC,QAAS,WAAM,MAAA,eCHVuB,EAAqB,IAAIxB,EAAAA,eAClC","sourcesContent":["import {InjectionToken, isDevMode} from '@angular/core';\n\nexport const TUI_ASSERT_ENABLED = new InjectionToken(\n    'Flag to enable assertions across Taiga UI',\n    {\n        factory: () => isDevMode(),\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiDataListAccessor} from '@taiga-ui/core/interfaces';\n\nexport const TUI_DATA_LIST_ACCESSOR = new InjectionToken<TuiDataListAccessor>(\n    'Accessor for options',\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiDataListHost} from '@taiga-ui/core/interfaces';\n\nexport const TUI_DATA_LIST_HOST = new InjectionToken<TuiDataListHost<any>>(\n    'DataList controller',\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const TUI_DOCUMENT_OR_SHADOW_ROOT = new InjectionToken<DocumentOrShadowRoot>(\n    'Document or ShadowRoot',\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiDropdown} from '@taiga-ui/core/interfaces';\n\nexport const TUI_DROPDOWN_DIRECTIVE = new InjectionToken<TuiDropdown>(\n    'Directive controlling TuiDropdownBoxComponent',\n);\n","import {ElementRef, InjectionToken} from '@angular/core';\n\nexport const TUI_ELEMENT_REF = new InjectionToken<ElementRef>(\n    'ElementRef when you cannot use @Input for single time injection',\n);\n","import {InjectionToken} from '@angular/core';\nimport {extractI18n} from '@taiga-ui/i18n';\n\nexport const TUI_MONTHS = new InjectionToken('Localized months names', {\n    factory: extractI18n('months'),\n});\n\nexport const TUI_CLOSE_WORD = new InjectionToken(`i18n 'close' word`, {\n    factory: extractI18n('close'),\n});\n\nexport const TUI_NOTHING_FOUND_MESSAGE = new InjectionToken(\n    `i18n 'Nothing found' message`,\n    {\n        factory: extractI18n('nothingFoundMessage'),\n    },\n);\n\nexport const TUI_DEFAULT_ERROR_MESSAGE = new InjectionToken(`i18n of error message`, {\n    factory: extractI18n('defaultErrorMessage'),\n});\n\nexport const TUI_SPIN_TEXTS = new InjectionToken('spin i18n texts', {\n    factory: extractI18n('spinTexts'),\n});\n\nexport const TUI_SHORT_WEEK_DAYS = new InjectionToken('calendars i18n texts', {\n    factory: extractI18n('shortWeekDays'),\n});\n","import {InjectionToken} from '@angular/core';\n\nexport const TUI_ICONS = new InjectionToken<Record<string, string>>(\n    'A key/value dictionary of icon names and src to be defined with TuiSvgService',\n    {\n        factory: () => ({}),\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiStringHandler} from '@taiga-ui/cdk';\nimport {DEFAULT_ICONS_PATH} from '@taiga-ui/core/constants';\n\n// TODO: Consider renaming\nexport const TUI_ICONS_PATH: InjectionToken<\n    TuiStringHandler<string>\n> = new InjectionToken<TuiStringHandler<string>>(\n    'A handler to retrieve USE id for icon by name',\n    {\n        factory: () => DEFAULT_ICONS_PATH,\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiBrightness} from '@taiga-ui/core/types';\nimport {Observable} from 'rxjs';\n\nexport const TUI_MODE: InjectionToken<\n    Observable<TuiBrightness | null>\n> = new InjectionToken<Observable<TuiBrightness | null>>(\n    'Mode stream for private providers',\n);\n","import {InjectionToken, TemplateRef} from '@angular/core';\nimport {TuiContextWithImplicit} from '@taiga-ui/cdk';\nimport {PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\n\nexport const TUI_OPTION_CONTENT = new InjectionToken<\n    PolymorpheusContent<TuiContextWithImplicit<TemplateRef<{}>>>\n>('Content for tuiOption component');\n","import {TUI_SANITIZER as TOKEN} from '@taiga-ui/cdk';\n\nexport const TUI_SANITIZER = TOKEN;\n","import {ElementRef, InjectionToken} from '@angular/core';\n\nexport const TUI_SCROLL_REF = new InjectionToken<ElementRef<HTMLElement>>(\n    'Scrollable container',\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiAppearance} from '@taiga-ui/core/enums';\n\nexport const TUI_TEXTFIELD_APPEARANCE = new InjectionToken<string>(\n    'Appearance for inputs',\n    {\n        factory: () => TuiAppearance.Textfield,\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\n\nexport const TUI_VALUE_ACCESSOR = new InjectionToken<ControlValueAccessor>(\n    'Buffer token to pass NG_VALUE_ACCESSOR to a different Injector',\n);\n"]}