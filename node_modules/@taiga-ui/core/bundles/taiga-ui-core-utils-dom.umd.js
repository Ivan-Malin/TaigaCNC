(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/utils/dom', ['exports', '@taiga-ui/cdk'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].core = global['taiga-ui'].core || {}, global['taiga-ui'].core.utils = global['taiga-ui'].core.utils || {}, global['taiga-ui'].core.utils.dom = {}), global.cdk));
}(this, (function (exports, cdk) { 'use strict';

    /**
     * TODO: remove "any" in new TS version; https://github.com/ng-web-apis/common/pull/6
     */
    function areCssVarsSupported(cssRef, userAgent) {
        return cssRef.supports('(--a: 0)') && !cdk.isEdgeOlderThan(17, userAgent);
    }

    function checkFixedPosition(element) {
        if (!element || typeof getComputedStyle === 'undefined') {
            return false;
        }
        var style = getComputedStyle(element);
        return (style.getPropertyValue('position') === 'fixed' ||
            checkFixedPosition(element.parentElement));
    }

    /**
     * Calculates size of safe area on mobile devices (status bars)
     *
     * ATTENTION: Only use in browser environment
     */
    function getSafeAreaSize() {
        if (!CSS.supports('padding-top: env(safe-area-inset-top)')) {
            return 0;
        }
        var div = document.createElement('div');
        div.style.paddingTop = 'env(safe-area-inset-top)';
        document.body.appendChild(div);
        var safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop, 10) || 0;
        document.body.removeChild(div);
        return safeAreaSize;
    }

    function getScreenWidth(documentRef) {
        return Math.max(documentRef.documentElement.clientWidth, documentRef.defaultView ? documentRef.defaultView.innerWidth : 0);
    }

    var WIDTH_SEARCH = 'width="';
    var HEIGHT_SEARCH = 'height="';
    var START = '<svg';
    function processIcon(source, name) {
        if (source.includes("id=\"" + name + "\"")) {
            return source;
        }
        var src = source.substring(source.indexOf(START));
        var attributes = src.substring(0, src.indexOf('>'));
        if (!attributes ||
            !attributes.includes(WIDTH_SEARCH) ||
            !attributes.includes(HEIGHT_SEARCH)) {
            return (src.replace(START, "<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\"><svg") + '</g></svg>');
        }
        var indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
        var indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
        var widthOffset = indexOfWidth + WIDTH_SEARCH.length;
        var heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
        var widthString = attributes.substring(widthOffset, attributes.indexOf('"', widthOffset));
        var heightString = attributes.substring(heightOffset, attributes.indexOf('"', heightOffset));
        if (!heightString ||
            !widthString ||
            widthString.includes('%') ||
            heightString.includes('%')) {
            return src.replace(START, "<svg id=\"" + name + "\"");
        }
        var width = parseInt(widthString, 10);
        var height = parseInt(heightString, 10);
        var transform = "translate(-" + width / 2 + ",-" + height / 2 + ")";
        return "<g id=\"" + name + "\" xmlns=\"http://www.w3.org/2000/svg\" transform=\"" + transform + "\"><svg x=\"50%\" y=\"50%\">" + src + "</svg></g>";
    }

    exports.areCssVarsSupported = areCssVarsSupported;
    exports.checkFixedPosition = checkFixedPosition;
    exports.getSafeAreaSize = getSafeAreaSize;
    exports.getScreenWidth = getScreenWidth;
    exports.processIcon = processIcon;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-core-utils-dom.umd.js.map
