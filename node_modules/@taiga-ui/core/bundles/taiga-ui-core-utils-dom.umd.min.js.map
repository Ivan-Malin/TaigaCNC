{"version":3,"sources":["ng://@taiga-ui/core/utils/dom/are-css-vars-supported.ts","ng://@taiga-ui/core/utils/dom/check-fixed-position.ts","ng://@taiga-ui/core/utils/dom/get-safe-area-size.ts","ng://@taiga-ui/core/utils/dom/get-screen-width.ts","ng://@taiga-ui/core/utils/dom/process-icon.ts"],"names":["cssRef","userAgent","supports","isEdgeOlderThan","checkFixedPosition","element","getComputedStyle","getPropertyValue","parentElement","CSS","div","document","createElement","style","paddingTop","body","appendChild","safeAreaSize","parseInt","window","removeChild","documentRef","Math","max","documentElement","clientWidth","defaultView","innerWidth","source","name","includes","src","substring","indexOf","attributes","replace","indexOfWidth","indexOfHeight","widthOffset","length","heightOffset","widthString","heightString"],"mappings":"qcAKoCA,EAAaC,GAC7C,OAAOD,EAAOE,SAAS,cAAgBC,EAAAA,gBAAgB,GAAIF,kCCN/CG,EAAmBC,GAC/B,SAAKA,GAAuC,oBAArBC,oBAOoB,UAH7BA,iBAAiBD,GAGrBE,iBAAiB,aACvBH,EAAmBC,EAAQG,8CCH/B,IAAKC,IAAIP,SAAS,yCACd,OAAO,EAGX,IAAMQ,EAAMC,SAASC,cAAc,OAEnCF,EAAIG,MAAMC,WAAa,2BACvBH,SAASI,KAAKC,YAAYN,GAE1B,IAAMO,EAAeC,SAASC,OAAOb,iBAAiBI,GAAKI,WAAa,KAAO,EAI/E,OAFAH,SAASI,KAAKK,YAAYV,GAEnBO,6BCnBoBI,GAC3B,OAAOC,KAAKC,IACRF,EAAYG,gBAAgBC,YAC5BJ,EAAYK,YAAcL,EAAYK,YAAYC,WAAa,2BCC3CC,EAAgBC,GACxC,GAAID,EAAOE,SAAS,OAAOD,EAAI,KAC3B,OAAOD,EAGX,IAAMG,EAAMH,EAAOI,UAAUJ,EAAOK,QAP1B,SAQJC,EAAaH,EAAIC,UAAU,EAAGD,EAAIE,QAAQ,MAEhD,IACKC,IACAA,EAAWJ,SAdC,aAeZI,EAAWJ,SAdE,YAgBd,OACIC,EAAII,QAhBF,OAkBE,kDAAkDN,EAAI,6CACtD,aAIZ,IAAMO,EAAeF,EAAWD,QAzBf,WA0BXI,EAAgBH,EAAWD,QAzBf,YA0BZK,EAAcF,EA3BH,UA2B+BG,OAC1CC,EAAeH,EA3BH,WA2BiCE,OAC7CE,EAAcP,EAAWF,UAC3BM,EACAJ,EAAWD,QAAQ,IAAKK,IAEtBI,EAAeR,EAAWF,UAC5BQ,EACAN,EAAWD,QAAQ,IAAKO,IAG5B,OACKE,IACAD,GACDA,EAAYX,SAAS,MACrBY,EAAaZ,SAAS,KAEfC,EAAII,QA1CL,OA0CoB,YAAYN,EAAI,KAOvC,UAAUA,EAAI,oDAFH,cAFJX,SAASuB,EAAa,IAEI,EAAC,KAD1BvB,SAASwB,EAAc,IACiB,EAAC,KAEyB,0BAA0BX,EAAG","sourcesContent":["import {isEdgeOlderThan} from '@taiga-ui/cdk';\n\n/**\n * TODO: remove \"any\" in new TS version; https://github.com/ng-web-apis/common/pull/6\n */\nexport function areCssVarsSupported(cssRef: any, userAgent: string): boolean {\n    return cssRef.supports('(--a: 0)') && !isEdgeOlderThan(17, userAgent);\n}\n","export function checkFixedPosition(element: HTMLElement | null): boolean {\n    if (!element || typeof getComputedStyle === 'undefined') {\n        return false;\n    }\n\n    const style = getComputedStyle(element);\n\n    return (\n        style.getPropertyValue('position') === 'fixed' ||\n        checkFixedPosition(element.parentElement)\n    );\n}\n","/**\n * Calculates size of safe area on mobile devices (status bars)\n *\n * ATTENTION: Only use in browser environment\n */\nexport function getSafeAreaSize(): number {\n    if (!CSS.supports('padding-top: env(safe-area-inset-top)')) {\n        return 0;\n    }\n\n    const div = document.createElement('div');\n\n    div.style.paddingTop = 'env(safe-area-inset-top)';\n    document.body.appendChild(div);\n\n    const safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop!, 10) || 0;\n\n    document.body.removeChild(div);\n\n    return safeAreaSize;\n}\n","export function getScreenWidth(documentRef: Document): number {\n    return Math.max(\n        documentRef.documentElement.clientWidth,\n        documentRef.defaultView ? documentRef.defaultView.innerWidth : 0,\n    );\n}\n","const WIDTH_SEARCH = 'width=\"';\nconst HEIGHT_SEARCH = 'height=\"';\nconst START = '<svg';\n\nexport function processIcon(source: string, name: string): string {\n    if (source.includes(`id=\"${name}\"`)) {\n        return source;\n    }\n\n    const src = source.substring(source.indexOf(START));\n    const attributes = src.substring(0, src.indexOf('>'));\n\n    if (\n        !attributes ||\n        !attributes.includes(WIDTH_SEARCH) ||\n        !attributes.includes(HEIGHT_SEARCH)\n    ) {\n        return (\n            src.replace(\n                START,\n                `<svg xmlns=\"http://www.w3.org/2000/svg\"><g id=\"${name}\" xmlns=\"http://www.w3.org/2000/svg\"><svg`,\n            ) + '</g></svg>'\n        );\n    }\n\n    const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);\n    const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);\n    const widthOffset = indexOfWidth + WIDTH_SEARCH.length;\n    const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;\n    const widthString = attributes.substring(\n        widthOffset,\n        attributes.indexOf('\"', widthOffset),\n    );\n    const heightString = attributes.substring(\n        heightOffset,\n        attributes.indexOf('\"', heightOffset),\n    );\n\n    if (\n        !heightString ||\n        !widthString ||\n        widthString.includes('%') ||\n        heightString.includes('%')\n    ) {\n        return src.replace(START, `<svg id=\"${name}\"`);\n    }\n\n    const width = parseInt(widthString, 10);\n    const height = parseInt(heightString, 10);\n    const transform = `translate(-${width / 2},-${height / 2})`;\n\n    return `<g id=\"${name}\" xmlns=\"http://www.w3.org/2000/svg\" transform=\"${transform}\"><svg x=\"50%\" y=\"50%\">${src}</svg></g>`;\n}\n"]}