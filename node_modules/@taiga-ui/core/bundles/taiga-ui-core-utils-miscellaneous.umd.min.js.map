{"version":3,"sources":["ng://@taiga-ui/core/utils/miscellaneous/size-bigger.ts","ng://@taiga-ui/core/utils/miscellaneous/get-padding.ts","ng://@taiga-ui/core/utils/miscellaneous/icons-path-factory.ts","ng://@taiga-ui/core/utils/miscellaneous/is-editing-key.ts","ng://@taiga-ui/core/utils/miscellaneous/is-presumed-hTMLString.ts","ng://@taiga-ui/core/utils/miscellaneous/mode-factory.ts"],"names":["SIZES","sizeBig","hasIcon","hasCleaner","hasTooltip","hasContent","padding","staticPath","base","length","name","startsWith","DEFAULT_ICONS_PATH","key","tuiEditingKeys","indexOf","candidate","trimmed","trim","endsWith","mode","_a","nativeElement","mode$","change$","pipe","startWith","map","EMPTY","size","biggerThanSize"],"mappings":"qkBAEA,IAAMA,EAA+C,CAAC,KAAM,IAAK,IAAK,IAAK,KAAM,6BCI7EC,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAIC,EAAUL,EAXI,GADA,GA8BlB,OAhBIC,IACAI,GAbU,IAgBVH,IACAG,GAjBU,IAoBVF,IACAE,GArBU,IAwBVD,IACAC,GAxBa,IA2BVA,+BC3BsBC,GAC7B,IAAMC,EACoC,MAAtCD,EAAWA,EAAWE,OAAS,GAAaF,EAAaA,EAAa,IAE1E,OAAO,SAAAG,GACH,OAAIA,EAAKC,WAAW,WACT,GAAGH,EAAOE,EAAI,QAAQA,EAG1BE,EAAAA,mBAAmBF,6BCPLG,GACzB,OAAsB,IAAfA,EAAIJ,SAAiD,IAAjCK,EAAAA,eAAeC,QAAQF,oCCNjBG,GACjC,IAAMC,EAAUD,EAAUE,OAE1B,OAAOD,EAAQN,WAAW,MAAQM,EAAQE,SAAS,6BCInDC,EACAC,OAACC,EAAAD,EAAAC,cAEKC,EAAQH,EACRA,EAAKI,QAAQC,KACTC,EAAAA,UAAU,MACVC,EAAAA,KAAI,WAAM,OAAAP,EAAKA,SAEnBQ,EAAAA,MAEN,OAAQN,EAAc,oBAAsBC,yBLN5CM,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAA,KAEO9B,EAAMe,QAAQc,GAAQ7B,EAAMe,QAAQe","sourcesContent":["import {TuiSizeXS, TuiSizeXXL} from '@taiga-ui/core/types';\n\nconst SIZES: ReadonlyArray<TuiSizeXS | TuiSizeXXL> = ['xs', 's', 'm', 'l', 'xl', 'xxl'];\n\n/**\n * Compares size constants to determine if first size is bigger than the second\n *\n * @param size size that we need to compare\n * @param biggerThanSize size to compare with, 's' by default\n */\nexport function sizeBigger(\n    size: TuiSizeXS | TuiSizeXXL,\n    biggerThanSize: TuiSizeXS | TuiSizeXXL = 's',\n): boolean {\n    return SIZES.indexOf(size) > SIZES.indexOf(biggerThanSize);\n}\n","const PADDING_SMALL = 12;\nconst PADDING_LARGE = 16;\nconst ITEM_SIZE = 24;\nconst CONTENT_SIZE = 40;\n\nexport function getPadding(\n    sizeBig: boolean,\n    hasIcon: boolean,\n    hasCleaner: boolean = false,\n    hasTooltip: boolean = false,\n    hasContent: boolean = false,\n): number {\n    let padding = sizeBig ? PADDING_LARGE : PADDING_SMALL;\n\n    if (hasIcon) {\n        padding += ITEM_SIZE;\n    }\n\n    if (hasCleaner) {\n        padding += ITEM_SIZE;\n    }\n\n    if (hasTooltip) {\n        padding += ITEM_SIZE;\n    }\n\n    if (hasContent) {\n        padding += CONTENT_SIZE;\n    }\n\n    return padding;\n}\n","import {TuiStringHandler} from '@taiga-ui/cdk';\nimport {DEFAULT_ICONS_PATH} from '@taiga-ui/core/constants';\n\nexport function iconsPathFactory(staticPath: string): TuiStringHandler<string> {\n    const base =\n        staticPath[staticPath.length - 1] === '/' ? staticPath : staticPath + '/';\n\n    return name => {\n        if (name.startsWith('tuiIcon')) {\n            return `${base}${name}.svg#${name}`;\n        }\n\n        return DEFAULT_ICONS_PATH(name);\n    };\n}\n","import {tuiEditingKeys} from '@taiga-ui/core/constants';\n\n/**\n * Check if pressed key is interactive in terms of input field\n */\nexport function isEditingKey(key: string): boolean {\n    return key.length === 1 || tuiEditingKeys.indexOf(key) !== -1;\n}\n","export function isPresumedHTMLString(candidate: string): boolean {\n    const trimmed = candidate.trim();\n\n    return trimmed.startsWith('<') && trimmed.endsWith('>');\n}\n","import {ElementRef} from '@angular/core';\nimport {TuiModeDirective} from '@taiga-ui/core/directives/mode';\nimport {TuiBrightness} from '@taiga-ui/core/types';\nimport {EMPTY, Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport function modeFactory(\n    mode: TuiModeDirective | null,\n    {nativeElement}: ElementRef,\n): Observable<TuiBrightness | null> {\n    const mode$ = mode\n        ? mode.change$.pipe(\n              startWith(null),\n              map(() => mode.mode),\n          )\n        : EMPTY;\n\n    return (nativeElement['$.data-mode.attr'] = mode$);\n}\n"]}