import { AfterViewChecked, ElementRef, NgZone } from '@angular/core';
import { TuiDestroyService, TuiOverscrollMode, TuiPortalHostComponent } from '@taiga-ui/cdk';
import { TuiDropdownAnimation } from '@taiga-ui/core/enums';
import { TuiDropdown } from '@taiga-ui/core/interfaces';
/**
 *  This component is used to show template in a portal using default style of white rounded box with a shadow
 */
export declare class TuiDropdownBoxComponent implements AfterViewChecked {
    readonly directive: TuiDropdown;
    private readonly windowRef;
    private readonly elementRef;
    private readonly portalHost;
    private readonly userAgent;
    dropdownAnimation: TuiDropdownAnimation;
    /**
     * Is previous position on top (to prevent jumping up and down on scroll)
     */
    private prevDirectionIsTop;
    readonly contentElementRef?: ElementRef<HTMLElement>;
    constructor(destroy$: TuiDestroyService, ngZone: NgZone, directive: TuiDropdown, windowRef: Window, elementRef: ElementRef<HTMLElement>, portalHost: TuiPortalHostComponent, userAgent: string);
    ngAfterViewChecked(): void;
    onTopFocus(): void;
    onBottomFocus(): void;
    get overscroll(): TuiOverscrollMode;
    private get inModal();
    private calculatePositionAndSize;
    private getFinalAlign;
    /**
     * Calculates horizontal position
     *
     * @param style dropdownBox elementRef styles object
     * @param directiveRect ClientRect of hosting directive
     * @param hostRect ClientRect of  portal host
     */
    private calculateHorizontalPosition;
    /**
     * Calculates vertical position and height
     *
     * @param style dropdownBox elementRef styles object
     * @param directiveRect ClientRect of hosting directive
     * @param hostRect ClientRect of  portal host
     */
    private calculateVerticalPosition;
    private getFinalDirection;
    /**
     * Calculates width
     *
     * @param style dropdownBox elementRef styles object
     * @param directiveRect ClientRect of hosting directive
     */
    private calculateWidth;
    private moveFocusOutside;
}
