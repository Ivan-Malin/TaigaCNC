import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, OnDestroy, Optional, Self, TemplateRef, } from '@angular/core';
import { isNativeFocused, setNativeFocused, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT } from '@taiga-ui/core/tokens';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { TuiDataListComponent } from '../data-list.component';
export function shouldFocus({ currentTarget, }) {
    return !isNativeFocused(currentTarget);
}
// TODO: Consider all use cases for aria roles
let TuiOptionComponent = class TuiOptionComponent {
    // TODO: Fix dataList type when updated to Ivy and compilation drops metadata
    constructor(content, dataList, elementRef, host, dropdown) {
        this.content = content;
        this.dataList = dataList;
        this.elementRef = elementRef;
        this.host = host;
        this.dropdown = dropdown;
        this.size = 'm';
        this.role = 'option';
        this.disabled = false;
    }
    get active() {
        return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
    }
    onClick() {
        if (this.host && this.value !== undefined) {
            this.host.handleOption(this.value);
        }
    }
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    onMouseMove({ currentTarget }) {
        setNativeFocused(currentTarget);
    }
    // Preventing focus loss upon focused option removal
    ngOnDestroy() {
        this.dataList.handleFocusLossIfNecessary(this.elementRef.nativeElement);
    }
};
TuiOptionComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_OPTION_CONTENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => TuiDataListComponent),] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
    { type: TuiDropdownDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TuiDropdownDirective,] }] }
];
__decorate([
    Input(),
    HostBinding('attr.data-size'),
    tuiDefaultProp()
], TuiOptionComponent.prototype, "size", void 0);
__decorate([
    Input(),
    HostBinding('attr.role'),
    tuiDefaultProp()
], TuiOptionComponent.prototype, "role", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiOptionComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], TuiOptionComponent.prototype, "value", void 0);
__decorate([
    HostBinding('class._with-dropdown')
], TuiOptionComponent.prototype, "active", null);
__decorate([
    HostListener('click')
], TuiOptionComponent.prototype, "onClick", null);
__decorate([
    shouldCall(shouldFocus),
    HostListener('init.onMouseMove', ['$event']),
    HostListener('mousemove.silent', ['$event'])
], TuiOptionComponent.prototype, "onMouseMove", null);
TuiOptionComponent = __decorate([
    Component({
        selector: `button[tuiOption], a[tuiOption]`,
        template: "<span\n    *ngIf=\"content; else base\"\n    polymorpheus-outlet\n    class=\"content\"\n    [content]=\"content\"\n    [context]=\"{ $implicit: base }\"\n></span>\n<ng-template #base>\n    <ng-content></ng-content>\n    <tui-svg *ngIf=\"dropdown\" class=\"arrow\" src=\"tuiIconChevronRight\"></tui-svg>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            tabIndex: '-1',
            type: 'button',
            '[attr.disabled]': 'disabled || null',
        },
        styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0 16px;border:0;background:padding-box;font-size:inherit;line-height:inherit;font:var(--tui-font-text-m);transition-property:background;transition-duration:.3s;transition-timing-function:ease-in-out;display:flex;width:100%;align-items:center;justify-content:space-between;text-align:left;box-sizing:border-box;color:var(--tui-text-01);outline:0;text-decoration:none;cursor:pointer;border-top:8px solid transparent;border-bottom:8px solid transparent;margin:-8px 0}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:default}:host._with-dropdown,:host:focus{background-color:var(--tui-base-02)}:host::-moz-focus-inner{border:0}:host[data-size=xs]{font:var(--tui-font-text-s);min-height:48px}:host[data-size='s']{min-height:48px}:host[data-size='m']{min-height:60px}:host[data-size='l']{min-height:72px}.content{display:flex;flex:1}.arrow{margin:0 -8px 0 12px}"]
    }),
    __param(0, Optional()),
    __param(0, Inject(TUI_OPTION_CONTENT)),
    __param(1, Inject(forwardRef(() => TuiDataListComponent))),
    __param(2, Inject(ElementRef)),
    __param(3, Optional()),
    __param(3, Inject(TUI_DATA_LIST_HOST)),
    __param(4, Optional()),
    __param(4, Self()),
    __param(4, Inject(TuiDropdownDirective))
], TuiOptionComponent);
export { TuiOptionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0LyIsInNvdXJjZXMiOlsib3B0aW9uL29wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsZUFBZSxFQUNmLGdCQUFnQixFQUVoQixjQUFjLEdBRWpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBRXhFLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBQ3hCLGFBQWEsR0FDdUI7SUFDcEMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsOENBQThDO0FBWTlDLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBa0IzQiw2RUFBNkU7SUFDN0UsWUFHYSxPQUVELEVBRVMsUUFBYSxFQUNPLFVBQW1DLEVBR3ZELElBQStCLEVBSXZDLFFBQXFDO1FBWnJDLFlBQU8sR0FBUCxPQUFPLENBRVI7UUFFUyxhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQ08sZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFHdkQsU0FBSSxHQUFKLElBQUksQ0FBMkI7UUFJdkMs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dGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT25EZXN0cm95LFxuICAgIE9wdGlvbmFsLFxuICAgIFNlbGYsXG4gICAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBpc05hdGl2ZUZvY3VzZWQsXG4gICAgc2V0TmF0aXZlRm9jdXNlZCxcbiAgICBUdWlDb250ZXh0V2l0aEltcGxpY2l0LFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aUV2ZW50V2l0aCxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aURyb3Bkb3duRGlyZWN0aXZlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL2Ryb3Bkb3duJztcbmltcG9ydCB7VHVpRGF0YUxpc3RIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX0RBVEFfTElTVF9IT1NULCBUVUlfT1BUSU9OX0NPTlRFTlR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge1R1aU9wdGlvblJvbGUsIFR1aVNpemVMLCBUdWlTaXplWFN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB7c2hvdWxkQ2FsbH0gZnJvbSAnQHRpbmtvZmYvbmctZXZlbnQtcGx1Z2lucyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge1R1aURhdGFMaXN0Q29tcG9uZW50fSBmcm9tICcuLi9kYXRhLWxpc3QuY29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvY3VzKHtcbiAgICBjdXJyZW50VGFyZ2V0LFxufTogVHVpRXZlbnRXaXRoPE1vdXNlRXZlbnQsIEhUTUxFbGVtZW50Pik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhaXNOYXRpdmVGb2N1c2VkKGN1cnJlbnRUYXJnZXQpO1xufVxuXG4vLyBUT0RPOiBDb25zaWRlciBhbGwgdXNlIGNhc2VzIGZvciBhcmlhIHJvbGVzXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogYGJ1dHRvblt0dWlPcHRpb25dLCBhW3R1aU9wdGlvbl1gLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9vcHRpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vb3B0aW9uLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0OiB7XG4gICAgICAgIHRhYkluZGV4OiAnLTEnLFxuICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgJ1thdHRyLmRpc2FibGVkXSc6ICdkaXNhYmxlZCB8fCBudWxsJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlPcHRpb25Db21wb25lbnQ8VCA9IHVua25vd24+IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZVhTIHwgVHVpU2l6ZUwgPSAnbSc7XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHJvbGU6IFR1aU9wdGlvblJvbGUgPSAnb3B0aW9uJztcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICB2YWx1ZT86IFQ7XG5cbiAgICAvLyBUT0RPOiBGaXggZGF0YUxpc3QgdHlwZSB3aGVuIHVwZGF0ZWQgdG8gSXZ5IGFuZCBjb21waWxhdGlvbiBkcm9wcyBtZXRhZGF0YVxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFRVSV9PUFRJT05fQ09OVEVOVClcbiAgICAgICAgcmVhZG9ubHkgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxcbiAgICAgICAgICAgIFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8VGVtcGxhdGVSZWY8e30+PlxuICAgICAgICA+IHwgbnVsbCxcbiAgICAgICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IFR1aURhdGFMaXN0Q29tcG9uZW50KSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkYXRhTGlzdDogYW55LFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVFVJX0RBVEFfTElTVF9IT1NUKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGhvc3Q6IFR1aURhdGFMaXN0SG9zdDxUPiB8IG51bGwsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChUdWlEcm9wZG93bkRpcmVjdGl2ZSlcbiAgICAgICAgcmVhZG9ubHkgZHJvcGRvd246IFR1aURyb3Bkb3duRGlyZWN0aXZlIHwgbnVsbCxcbiAgICApIHt9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl93aXRoLWRyb3Bkb3duJylcbiAgICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmRyb3Bkb3duICYmICEhdGhpcy5kcm9wZG93bi5kcm9wZG93bkJveFJlZjtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgb25DbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdCAmJiB0aGlzLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaG9zdC5oYW5kbGVPcHRpb24odGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBAYmFkIFRPRE86IENvbnNpZGVyIGFyaWEtYWN0aXZlZGVzY2VuZGFudCBmb3IgcHJvcGVyIGFjY2Vzc2liaWxpdHkgaW1wbGVtZW50YXRpb25cbiAgICBAc2hvdWxkQ2FsbChzaG91bGRGb2N1cylcbiAgICBASG9zdExpc3RlbmVyKCdpbml0Lm9uTW91c2VNb3ZlJywgWyckZXZlbnQnXSlcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZW1vdmUuc2lsZW50JywgWyckZXZlbnQnXSlcbiAgICBvbk1vdXNlTW92ZSh7Y3VycmVudFRhcmdldH06IFR1aUV2ZW50V2l0aDxNb3VzZUV2ZW50LCBIVE1MRWxlbWVudD4pIHtcbiAgICAgICAgc2V0TmF0aXZlRm9jdXNlZChjdXJyZW50VGFyZ2V0KTtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50aW5nIGZvY3VzIGxvc3MgdXBvbiBmb2N1c2VkIG9wdGlvbiByZW1vdmFsXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGF0YUxpc3QuaGFuZGxlRm9jdXNMb3NzSWZOZWNlc3NhcnkodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbn1cbiJdfQ==