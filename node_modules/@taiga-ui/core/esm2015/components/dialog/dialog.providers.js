import { DOCUMENT } from '@angular/common';
import { ElementRef, InjectionToken } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { containsOrAfter, isCurrentTarget, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge } from 'rxjs';
import { filter, switchMapTo, take, takeUntil } from 'rxjs/operators';
export const TUI_DIALOGS_CLOSE = new InjectionToken('A stream to close dialogs', {
    factory: () => EMPTY,
});
const SCROLLBAR_PLACEHOLDER = 17;
export function dialogCloseStreamFactory(documentRef, windowRef, { nativeElement }, close$, destroy$, { dismissible }) {
    return dismissible
        ? merge(typedFromEvent(nativeElement, 'click').pipe(filter(isCurrentTarget)), typedFromEvent(documentRef, 'keydown').pipe(filter(({ key, target }) => key === 'Escape' &&
            target instanceof Element &&
            (!containsOrAfter(nativeElement, target) ||
                nativeElement.contains(target)))), typedFromEvent(documentRef, 'mousedown').pipe(filter(({ target, clientX }) => target instanceof Element &&
            windowRef.innerWidth - clientX > SCROLLBAR_PLACEHOLDER &&
            !containsOrAfter(nativeElement, target)), switchMapTo(typedFromEvent(documentRef, 'mouseup').pipe(take(1), filter(({ target }) => target instanceof Element &&
            !containsOrAfter(nativeElement, target))))), close$).pipe(takeUntil(destroy$))
        : close$;
}
export const TUI_DIALOG_CLOSE_STREAM = new InjectionToken('Dialogs closing stream');
export const TUI_DIALOG_PROVIDERS = [
    TuiDestroyService,
    {
        provide: TUI_DIALOG_CLOSE_STREAM,
        deps: [
            DOCUMENT,
            WINDOW,
            ElementRef,
            TUI_DIALOGS_CLOSE,
            TuiDestroyService,
            POLYMORPHEUS_CONTEXT,
        ],
        useFactory: dialogCloseStreamFactory,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGlhbG9nLyIsInNvdXJjZXMiOlsiZGlhbG9nLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBRSxjQUFjLEVBQVcsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFDSCxlQUFlLEVBQ2YsZUFBZSxFQUNmLGlCQUFpQixFQUVqQixjQUFjLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVwRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDL0MsMkJBQTJCLEVBQzNCO0lBQ0ksT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUs7Q0FDdkIsQ0FDSixDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFFakMsTUFBTSxVQUFVLHdCQUF3QixDQUNwQyxXQUFxQixFQUNyQixTQUFpQixFQUNqQixFQUFDLGFBQWEsRUFBMEIsRUFDeEMsTUFBd0IsRUFDeEIsUUFBMEIsRUFDMUIsRUFBQyxXQUFXLEVBQWdEO0lBRTVELE9BQU8sV0FBVztRQUNkLENBQUMsQ0FBQyxLQUFLLENBQ0QsY0FBYyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQ3BFLGNBQWMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUN2QyxNQUFNLENBQ0YsQ0FBQyxFQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUMsRUFBRSxFQUFFLENBQ2QsR0FBRyxLQUFLLFFBQVE7WUFDaEIsTUFBTSxZQUFZLE9BQU87WUFDekIsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO2dCQUNwQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQzFDLENBQ0osRUFDRCxjQUFjLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDekMsTUFBTSxDQUNGLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFDLEVBQUUsRUFBRSxDQUNsQixNQUFNLFlBQVksT0FBTztZQUN6QixTQUFTLENBQUMsVUFBVSxHQUFHLE9BQU8sR0FBRyxxQkFBcUI7WUFDdEQsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUM5QyxFQUNELFdBQVcsQ0FDUCxjQUFjLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLE1BQU0sQ0FDRixDQUFDLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBRSxDQUNULE1BQU0sWUFBWSxPQUFPO1lBQ3pCLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FDOUMsQ0FDSixDQUNKLENBQ0osRUFDRCxNQUFNLENBQ1QsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUNyRCx3QkFBd0IsQ0FDM0IsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFlO0lBQzVDLGlCQUFpQjtJQUNqQjtRQUNJLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsSUFBSSxFQUFFO1lBQ0YsUUFBUTtZQUNSLE1BQU07WUFDTixVQUFVO1lBQ1YsaUJBQWlCO1lBQ2pCLGlCQUFpQjtZQUNqQixvQkFBb0I7U0FDdkI7UUFDRCxVQUFVLEVBQUUsd0JBQXdCO0tBQ3ZDO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIGNvbnRhaW5zT3JBZnRlcixcbiAgICBpc0N1cnJlbnRUYXJnZXQsXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRGlhbG9nLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpRGlhbG9nT3B0aW9uc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1BPTFlNT1JQSEVVU19DT05URVhUfSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtFTVBUWSwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIHN3aXRjaE1hcFRvLCB0YWtlLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9ESUFMT0dTX0NMT1NFID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8dW5rbm93bj4+KFxuICAgICdBIHN0cmVhbSB0byBjbG9zZSBkaWFsb2dzJyxcbiAgICB7XG4gICAgICAgIGZhY3Rvcnk6ICgpID0+IEVNUFRZLFxuICAgIH0sXG4pO1xuXG5jb25zdCBTQ1JPTExCQVJfUExBQ0VIT0xERVIgPSAxNztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpYWxvZ0Nsb3NlU3RyZWFtRmFjdG9yeShcbiAgICBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gICAgd2luZG93UmVmOiBXaW5kb3csXG4gICAge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBjbG9zZSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgZGVzdHJveSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAge2Rpc21pc3NpYmxlfTogVHVpRGlhbG9nPFR1aURpYWxvZ09wdGlvbnM8dW5rbm93bj4sIHVua25vd24+LFxuKTogT2JzZXJ2YWJsZTx1bmtub3duPiB7XG4gICAgcmV0dXJuIGRpc21pc3NpYmxlXG4gICAgICAgID8gbWVyZ2UoXG4gICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdjbGljaycpLnBpcGUoZmlsdGVyKGlzQ3VycmVudFRhcmdldCkpLFxuICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgJ2tleWRvd24nKS5waXBlKFxuICAgICAgICAgICAgICAgICAgZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICh7a2V5LCB0YXJnZXR9KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPT09ICdFc2NhcGUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCFjb250YWluc09yQWZ0ZXIobmF0aXZlRWxlbWVudCwgdGFyZ2V0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRWxlbWVudC5jb250YWlucyh0YXJnZXQpKSxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCAnbW91c2Vkb3duJykucGlwZShcbiAgICAgICAgICAgICAgICAgIGZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAoe3RhcmdldCwgY2xpZW50WH0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93UmVmLmlubmVyV2lkdGggLSBjbGllbnRYID4gU0NST0xMQkFSX1BMQUNFSE9MREVSICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICFjb250YWluc09yQWZ0ZXIobmF0aXZlRWxlbWVudCwgdGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBzd2l0Y2hNYXBUbyhcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgJ21vdXNldXAnKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoe3RhcmdldH0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjb250YWluc09yQWZ0ZXIobmF0aXZlRWxlbWVudCwgdGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY2xvc2UkLFxuICAgICAgICAgICkucGlwZSh0YWtlVW50aWwoZGVzdHJveSQpKVxuICAgICAgICA6IGNsb3NlJDtcbn1cblxuZXhwb3J0IGNvbnN0IFRVSV9ESUFMT0dfQ0xPU0VfU1RSRUFNID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8dW5rbm93bj4+KFxuICAgICdEaWFsb2dzIGNsb3Npbmcgc3RyZWFtJyxcbik7XG5leHBvcnQgY29uc3QgVFVJX0RJQUxPR19QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfRElBTE9HX0NMT1NFX1NUUkVBTSxcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgRE9DVU1FTlQsXG4gICAgICAgICAgICBXSU5ET1csXG4gICAgICAgICAgICBFbGVtZW50UmVmLFxuICAgICAgICAgICAgVFVJX0RJQUxPR1NfQ0xPU0UsXG4gICAgICAgICAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICAgICAgICAgIFBPTFlNT1JQSEVVU19DT05URVhULFxuICAgICAgICBdLFxuICAgICAgICB1c2VGYWN0b3J5OiBkaWFsb2dDbG9zZVN0cmVhbUZhY3RvcnksXG4gICAgfSxcbl07XG4iXX0=