import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_DEFAULT_ERROR_MESSAGE, TUI_MODE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
let TuiErrorComponent = class TuiErrorComponent {
    constructor(mode$, defauleErrorMessage$) {
        this.mode$ = mode$;
        this.defauleErrorMessage$ = defauleErrorMessage$;
        this.error = null;
    }
};
TuiErrorComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DEFAULT_ERROR_MESSAGE,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiErrorComponent.prototype, "error", void 0);
TuiErrorComponent = __decorate([
    Component({
        selector: 'tui-error',
        template: "<div\n    polymorpheus-outlet\n    *ngIf=\"!!error\"\n    automation-id=\"tui-error__text\"\n    class=\"message-text\"\n    [class.message-text_light]=\"(mode$ | async) === 'onDark'\"\n    [content]=\"error.message || (defauleErrorMessage$ | async)\"\n    [context]=\"error.context || {}\"\n    [@tuiHeightCollapse]\n    [@tuiFadeIn]\n></div>\n",
        providers: [MODE_PROVIDER],
        changeDetection: ChangeDetectionStrategy.OnPush,
        animations: [tuiHeightCollapse, tuiFadeIn],
        styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);display:block;color:var(--tui-negative);word-wrap:break-word}.message-text{margin-top:4px;white-space:pre-wrap}.message-text_light{color:var(--tui-negative-night)}"]
    }),
    __param(0, Inject(TUI_MODE)),
    __param(1, Inject(TUI_DEFAULT_ERROR_MESSAGE))
], TuiErrorComponent);
export { TuiErrorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9lcnJvci8iLCJzb3VyY2VzIjpbImVycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxjQUFjLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFDLHlCQUF5QixFQUFFLFFBQVEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTFFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFVaEMsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFLMUIsWUFDK0IsS0FBdUMsRUFFekQsb0JBQXdDO1FBRnRCLFVBQUssR0FBTCxLQUFLLENBQWtDO1FBRXpELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBb0I7UUFMckQsVUFBSyxHQUE4QixJQUFJLENBQUM7SUFNckMsQ0FBQztDQUNQLENBQUE7O1lBSnlDLFVBQVUsdUJBQTNDLE1BQU0sU0FBQyxRQUFRO1lBRWUsVUFBVSx1QkFEeEMsTUFBTSxTQUFDLHlCQUF5Qjs7QUFKckM7SUFGQyxLQUFLLEVBQUU7SUFDUCxjQUFjLEVBQUU7Z0RBQ3VCO0FBSC9CLGlCQUFpQjtJQVI3QixTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsV0FBVztRQUNyQixxV0FBb0M7UUFFcEMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFVBQVUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQzs7S0FDN0MsQ0FBQztJQU9PLFdBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2hCLFdBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7R0FQN0IsaUJBQWlCLENBVTdCO1NBVlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIFR1aVZhbGlkYXRpb25FcnJvcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3R1aUZhZGVJbiwgdHVpSGVpZ2h0Q29sbGFwc2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtNT0RFX1BST1ZJREVSfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9wcm92aWRlcnMnO1xuaW1wb3J0IHtUVUlfREVGQVVMVF9FUlJPUl9NRVNTQUdFLCBUVUlfTU9ERX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7VHVpQnJpZ2h0bmVzc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktZXJyb3InLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9lcnJvci50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9lcnJvci5zdHlsZS5sZXNzJ10sXG4gICAgcHJvdmlkZXJzOiBbTU9ERV9QUk9WSURFUl0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgYW5pbWF0aW9uczogW3R1aUhlaWdodENvbGxhcHNlLCB0dWlGYWRlSW5dLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlFcnJvckNvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGVycm9yOiBUdWlWYWxpZGF0aW9uRXJyb3IgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9NT0RFKSByZWFkb25seSBtb2RlJDogT2JzZXJ2YWJsZTxUdWlCcmlnaHRuZXNzIHwgbnVsbD4sXG4gICAgICAgIEBJbmplY3QoVFVJX0RFRkFVTFRfRVJST1JfTUVTU0FHRSlcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsZUVycm9yTWVzc2FnZSQ6IE9ic2VydmFibGU8c3RyaW5nPixcbiAgICApIHt9XG59XG4iXX0=