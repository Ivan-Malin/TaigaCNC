import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, HostBinding, HostListener, Inject, Input, ViewChild, } from '@angular/core';
import { isCurrentTarget, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { TUI_EXPAND_LOADED } from '@taiga-ui/core/constants';
import { TuiExpandContentDirective } from './expand-content.directive';
var State;
(function (State) {
    State[State["Idle"] = 0] = "Idle";
    State[State["Loading"] = 1] = "Loading";
    State[State["Prepared"] = 2] = "Prepared";
    State[State["Animated"] = 3] = "Animated";
})(State || (State = {}));
const LOADER_HEIGHT = 48;
let TuiExpandComponent = class TuiExpandComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.async = false;
        this.expanded = null;
        this.state = State.Idle;
    }
    set expandedSetter(expanded) {
        if (this.expanded === null) {
            this.expanded = expanded;
            return;
        }
        if (this.state !== State.Idle) {
            this.expanded = expanded;
            this.state = State.Animated;
            return;
        }
        this.expanded = expanded;
        this.retrigger(this.async && expanded ? State.Loading : State.Animated);
    }
    get overflow() {
        return this.state !== State.Idle;
    }
    get loading() {
        return !!this.expanded && this.async && this.state === State.Loading;
    }
    get height() {
        const { expanded, state, contentWrapper } = this;
        if ((expanded && state === State.Prepared) ||
            (!expanded && state === State.Animated)) {
            return 0;
        }
        if (contentWrapper &&
            ((!expanded && state === State.Prepared) ||
                (expanded && state === State.Animated))) {
            return contentWrapper.nativeElement.offsetHeight;
        }
        if (contentWrapper && expanded && state === State.Loading) {
            return Math.max(contentWrapper.nativeElement.offsetHeight, LOADER_HEIGHT);
        }
        return null;
    }
    get contentVisible() {
        return this.expanded || this.state !== State.Idle;
    }
    onTransitionEnd(event) {
        if (isCurrentTarget(event) &&
            event.propertyName === 'opacity' &&
            this.state === State.Animated) {
            this.state = State.Idle;
        }
    }
    onExpandLoaded(event) {
        event.stopPropagation();
        if (this.state === State.Loading) {
            this.retrigger(State.Animated);
        }
    }
    retrigger(state) {
        this.state = State.Prepared;
        // We need delay to retrigger CSS height transition from the correct number
        setTimeout(() => {
            if (this.state !== State.Prepared) {
                return;
            }
            this.state = state;
            this.changeDetectorRef.markForCheck();
        });
    }
};
TuiExpandComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiExpandComponent.prototype, "async", void 0);
__decorate([
    Input('expanded'),
    tuiRequiredSetter()
], TuiExpandComponent.prototype, "expandedSetter", null);
__decorate([
    ContentChild(TuiExpandContentDirective)
], TuiExpandComponent.prototype, "content", void 0);
__decorate([
    HostBinding('class._expanded')
], TuiExpandComponent.prototype, "expanded", void 0);
__decorate([
    ViewChild('wrapper')
], TuiExpandComponent.prototype, "contentWrapper", void 0);
__decorate([
    HostBinding('class._overflow')
], TuiExpandComponent.prototype, "overflow", null);
__decorate([
    HostBinding('class._loading')
], TuiExpandComponent.prototype, "loading", null);
__decorate([
    HostBinding('style.height.px')
], TuiExpandComponent.prototype, "height", null);
__decorate([
    HostListener('transitionend', ['$event'])
], TuiExpandComponent.prototype, "onTransitionEnd", null);
__decorate([
    HostListener(TUI_EXPAND_LOADED, ['$event'])
], TuiExpandComponent.prototype, "onExpandLoaded", null);
TuiExpandComponent = __decorate([
    Component({
        selector: 'tui-expand',
        template: "<div #wrapper class=\"wrapper\">\n    <ng-container *ngIf=\"contentVisible\">\n        <ng-content></ng-content>\n        <tui-loader size=\"l\" [overlay]=\"true\" [showLoader]=\"loading\">\n            <div polymorpheus-outlet [content]=\"content\"></div>\n        </tui-loader>\n    </ng-container>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block;transition-property:opacity,height,visibility;transition-duration:.3s,.3s;opacity:0}:host._overflow{overflow:hidden}:host._expanded{opacity:1;transform:translate3d(0,0,0)}:host._loading{opacity:.99}.wrapper:after,.wrapper:before{content:'';display:table}"]
    }),
    __param(0, Inject(ChangeDetectorRef))
], TuiExpandComponent);
export { TuiExpandComponent };
//# sourceMappingURL=data:application/json;base64,