import { __decorate } from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
let TuiGroupDirective = class TuiGroupDirective {
    constructor() {
        this.orientation = "horizontal" /* Horizontal */;
        this.adaptive = false;
        this.collapsed = false;
        this.rounded = true;
        this.size = 'm';
    }
    get orientationHorizontal() {
        return this.orientation === "horizontal" /* Horizontal */;
    }
    get orientationVertical() {
        return this.orientation === "vertical" /* Vertical */;
    }
    get sizeLarge() {
        return this.size === 'l';
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], TuiGroupDirective.prototype, "orientation", void 0);
__decorate([
    Input(),
    HostBinding('class.tui-group_adaptive'),
    tuiDefaultProp()
], TuiGroupDirective.prototype, "adaptive", void 0);
__decorate([
    Input(),
    HostBinding('class.tui-group_collapsed'),
    tuiDefaultProp()
], TuiGroupDirective.prototype, "collapsed", void 0);
__decorate([
    Input(),
    HostBinding('class.tui-group_rounded'),
    tuiDefaultProp()
], TuiGroupDirective.prototype, "rounded", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiGroupDirective.prototype, "size", void 0);
__decorate([
    HostBinding('class.tui-group_orientation_horizontal')
], TuiGroupDirective.prototype, "orientationHorizontal", null);
__decorate([
    HostBinding('class.tui-group_orientation_vertical')
], TuiGroupDirective.prototype, "orientationVertical", null);
__decorate([
    HostBinding('class.tui-group_radius_large')
], TuiGroupDirective.prototype, "sizeLarge", null);
TuiGroupDirective = __decorate([
    Directive({
        selector: '[tuiGroup]:not(ng-container)',
        host: {
            class: 'tui-group',
            role: 'group',
        },
    })
], TuiGroupDirective);
export { TuiGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9ncm91cC8iLCJzb3VyY2VzIjpbImdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFXN0MsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFBOUI7UUFHSSxnQkFBVyxpQ0FBNkM7UUFLeEQsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUtqQixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBS2xCLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFJZixTQUFJLEdBQWEsR0FBRyxDQUFDO0lBZ0J6QixDQUFDO0lBYkcsSUFBSSxxQkFBcUI7UUFDckIsT0FBTyxJQUFJLENBQUMsV0FBVyxrQ0FBOEIsQ0FBQztJQUMxRCxDQUFDO0lBR0QsSUFBSSxtQkFBbUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsV0FBVyw4QkFBNEIsQ0FBQztJQUN4RCxDQUFDO0lBR0QsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQztJQUM3QixDQUFDO0NBQ0osQ0FBQTtBQW5DRztJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTtzREFDdUM7QUFLeEQ7SUFIQyxLQUFLLEVBQUU7SUFDUCxXQUFXLENBQUMsMEJBQTBCLENBQUM7SUFDdkMsY0FBYyxFQUFFO21EQUNBO0FBS2pCO0lBSEMsS0FBSyxFQUFFO0lBQ1AsV0FBVyxDQUFDLDJCQUEyQixDQUFDO0lBQ3hDLGNBQWMsRUFBRTtvREFDQztBQUtsQjtJQUhDLEtBQUssRUFBRTtJQUNQLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQztJQUN0QyxjQUFjLEVBQUU7a0RBQ0Y7QUFJZjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTsrQ0FDSTtBQUdyQjtJQURDLFdBQVcsQ0FBQyx3Q0FBd0MsQ0FBQzs4REFHckQ7QUFHRDtJQURDLFdBQVcsQ0FBQyxzQ0FBc0MsQ0FBQzs0REFHbkQ7QUFHRDtJQURDLFdBQVcsQ0FBQyw4QkFBOEIsQ0FBQztrREFHM0M7QUFyQ1EsaUJBQWlCO0lBUDdCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSw4QkFBOEI7UUFDeEMsSUFBSSxFQUFFO1lBQ0YsS0FBSyxFQUFFLFdBQVc7WUFDbEIsSUFBSSxFQUFFLE9BQU87U0FDaEI7S0FDSixDQUFDO0dBQ1csaUJBQWlCLENBc0M3QjtTQXRDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlPcmllbnRhdGlvbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZW51bXMnO1xuaW1wb3J0IHtUdWlTaXplTH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlHcm91cF06bm90KG5nLWNvbnRhaW5lciknLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICd0dWktZ3JvdXAnLFxuICAgICAgICByb2xlOiAnZ3JvdXAnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUdyb3VwRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgb3JpZW50YXRpb246IFR1aU9yaWVudGF0aW9uID0gVHVpT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfYWRhcHRpdmUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgYWRhcHRpdmUgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfY29sbGFwc2VkJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGNvbGxhcHNlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnR1aS1ncm91cF9yb3VuZGVkJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHJvdW5kZWQgPSB0cnVlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVMID0gJ20nO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfb3JpZW50YXRpb25faG9yaXpvbnRhbCcpXG4gICAgZ2V0IG9yaWVudGF0aW9uSG9yaXpvbnRhbCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IFR1aU9yaWVudGF0aW9uLkhvcml6b250YWw7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfb3JpZW50YXRpb25fdmVydGljYWwnKVxuICAgIGdldCBvcmllbnRhdGlvblZlcnRpY2FsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbiA9PT0gVHVpT3JpZW50YXRpb24uVmVydGljYWw7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy50dWktZ3JvdXBfcmFkaXVzX2xhcmdlJylcbiAgICBnZXQgc2l6ZUxhcmdlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplID09PSAnbCc7XG4gICAgfVxufVxuIl19