var TuiHostedDropdownComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Output, ViewChild, } from '@angular/core';
import { getClosestKeyboardFocusable, isNativeFocusedIn, isNativeKeyboardFocusable, setNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiActiveZoneDirective, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { DROPDOWN_CONTROLLER_PROVIDER, TUI_DROPDOWN_WATCHED_CONTROLLER, TuiDropdownControllerDirective, } from '@taiga-ui/core/directives/dropdown-controller';
import { isEditingKey } from '@taiga-ui/core/utils/miscellaneous';
import { TuiHostedDropdownConnectorDirective } from './hosted-dropdown-connector.directive';
let TuiHostedDropdownComponent = TuiHostedDropdownComponent_1 = class TuiHostedDropdownComponent {
    constructor(elementRef, controller) {
        this.elementRef = elementRef;
        this.controller = controller;
        this.content = '';
        this.canOpen = true;
        this.open = false;
        this.openChange = new EventEmitter();
        this.focusedChange = new EventEmitter();
    }
    get host() {
        return this.dropdownHost
            ? this.dropdownHost.elementRef.nativeElement
            : this.elementRef.nativeElement;
    }
    get dropdown() {
        return !this.dropdownDirective || this.dropdownDirective.dropdownBoxRef === null
            ? null
            : this.dropdownDirective.dropdownBoxRef.location.nativeElement;
    }
    get nativeFocusableElement() {
        return isNativeKeyboardFocusable(this.host)
            ? this.host
            : getClosestKeyboardFocusable(this.host, false, this.elementRef.nativeElement);
    }
    get contentContext() {
        return this.calculateContentContext(this.activeZone);
    }
    get focused() {
        return (isNativeFocusedIn(this.host) ||
            (this.open && !!this.wrapper && isNativeFocusedIn(this.wrapper.nativeElement)));
    }
    onFocusIn({ target }) {
        const host = this.dropdownHost
            ? this.dropdownHost.elementRef.nativeElement
            : this.nativeFocusableElement || this.elementRef.nativeElement;
        if (!host.contains(target)) {
            this.updateOpen(false);
        }
    }
    onClick({ target }) {
        const host = this.nativeFocusableElement || this.host;
        const dropdownHost = this.dropdownHost
            ? this.dropdownHost.elementRef.nativeElement
            : host;
        if (!this.hostEditable &&
            target instanceof Node &&
            dropdownHost.contains(target)) {
            this.updateOpen(!this.open);
        }
    }
    onKeyDownEsc(event) {
        if (!this.open) {
            return;
        }
        event.stopPropagation();
        this.closeDropdown();
    }
    onArrowDown(event) {
        this.focusDropdown(event, true);
    }
    onArrowUp(event) {
        this.focusDropdown(event, false);
    }
    onKeydown({ key, target, defaultPrevented }) {
        if (!defaultPrevented &&
            isEditingKey(key) &&
            this.hostEditable &&
            target instanceof HTMLElement &&
            !this.isElementEditable(target)) {
            this.focusHost();
        }
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (!active) {
            this.updateOpen(false);
        }
    }
    onHostObscured(obscured) {
        if (obscured) {
            this.closeDropdown();
        }
    }
    updateOpen(open) {
        if (open && !this.canOpen) {
            return;
        }
        this.open = open;
        this.openChange.emit(open);
    }
    get hostEditable() {
        const host = this.nativeFocusableElement || this.host;
        return host instanceof HTMLElement && this.isElementEditable(host);
    }
    calculateContentContext($implicit) {
        return { $implicit };
    }
    isElementEditable(element) {
        return ((element instanceof HTMLInputElement && !element.readOnly) ||
            (element instanceof HTMLTextAreaElement && !element.readOnly) ||
            element.contentEditable === 'true');
    }
    focusDropdown(event, first) {
        const host = this.nativeFocusableElement;
        if (!host ||
            !(host instanceof HTMLElement) ||
            !(event.target instanceof Node) ||
            !host.contains(event.target)) {
            return;
        }
        if (!this.wrapper ||
            !this.open ||
            this.dropdown === null ||
            !(this.wrapper.nativeElement.nextElementSibling instanceof HTMLElement)) {
            this.updateOpen(true);
            if (!this.isElementEditable(host)) {
                event.preventDefault();
            }
            return;
        }
        const initial = first
            ? this.wrapper.nativeElement
            : this.wrapper.nativeElement.nextElementSibling;
        const focusable = getClosestKeyboardFocusable(initial, !first, this.wrapper.nativeElement);
        if (focusable === null) {
            return;
        }
        setNativeFocused(focusable);
        event.preventDefault();
    }
    closeDropdown() {
        if (this.focused) {
            this.focusHost();
        }
        this.updateOpen(false);
    }
    focusHost() {
        const host = this.nativeFocusableElement;
        if (host !== null) {
            setNativeFocused(host, true, true);
        }
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
};
TuiHostedDropdownComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiDropdownControllerDirective, decorators: [{ type: Inject, args: [TUI_DROPDOWN_WATCHED_CONTROLLER,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHostedDropdownComponent.prototype, "content", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHostedDropdownComponent.prototype, "canOpen", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHostedDropdownComponent.prototype, "open", void 0);
__decorate([
    Output()
], TuiHostedDropdownComponent.prototype, "openChange", void 0);
__decorate([
    Output()
], TuiHostedDropdownComponent.prototype, "focusedChange", void 0);
__decorate([
    ViewChild(TuiActiveZoneDirective)
], TuiHostedDropdownComponent.prototype, "activeZone", void 0);
__decorate([
    ContentChild(TuiHostedDropdownConnectorDirective)
], TuiHostedDropdownComponent.prototype, "dropdownHost", void 0);
__decorate([
    ViewChild('wrapper', { read: ElementRef })
], TuiHostedDropdownComponent.prototype, "wrapper", void 0);
__decorate([
    ViewChild(TuiDropdownDirective)
], TuiHostedDropdownComponent.prototype, "dropdownDirective", void 0);
__decorate([
    HostBinding('class._hosted_dropdown_focused')
], TuiHostedDropdownComponent.prototype, "focused", null);
__decorate([
    HostListener('focusin', ['$event'])
], TuiHostedDropdownComponent.prototype, "onFocusIn", null);
__decorate([
    HostListener('click', ['$event'])
], TuiHostedDropdownComponent.prototype, "onClick", null);
__decorate([
    HostListener('keydown.esc', ['$event'])
], TuiHostedDropdownComponent.prototype, "onKeyDownEsc", null);
__decorate([
    HostListener('keydown.arrowDown', ['$event'])
], TuiHostedDropdownComponent.prototype, "onArrowDown", null);
__decorate([
    HostListener('keydown.arrowUp', ['$event'])
], TuiHostedDropdownComponent.prototype, "onArrowUp", null);
__decorate([
    tuiPure
], TuiHostedDropdownComponent.prototype, "calculateContentContext", null);
TuiHostedDropdownComponent = TuiHostedDropdownComponent_1 = __decorate([
    Component({
        selector: 'tui-hosted-dropdown',
        template: "<div\n    class=\"wrapper\"\n    [tuiDropdownAlign]=\"controller.align\"\n    [tuiDropdownDirection]=\"controller.direction\"\n    [tuiDropdownHost]=\"nativeFocusableElement\"\n    [tuiDropdownLimitWidth]=\"controller.limitWidth\"\n    [tuiDropdownMinHeight]=\"controller.minHeight\"\n    [tuiDropdownMaxHeight]=\"controller.maxHeight\"\n    [tuiDropdownSided]=\"controller.sided\"\n    [tuiDropdownContent]=\"dropdown\"\n    [tuiDropdown]=\"open && canOpen\"\n    [tuiObscuredEnabled]=\"open\"\n    (tuiObscured)=\"onHostObscured($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <ng-content></ng-content>\n    <ng-template #dropdown=\"polymorpheus\" polymorpheus>\n        <div\n            #wrapper\n            polymorpheus-outlet\n            [content]=\"content\"\n            [context]=\"contentContext\"\n            (keydown.esc)=\"onKeyDownEsc($event)\"\n            (keydown)=\"onKeydown($event)\"\n        ></div>\n        <!--This DIV is here to start backwards TreeWalker for focusing last focusable item on ArrowUp-->\n        <div></div>\n    </ng-template>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiHostedDropdownComponent_1),
            },
            DROPDOWN_CONTROLLER_PROVIDER,
        ],
        styles: [":host{display:inline-flex}.wrapper{border-radius:inherit;height:inherit;flex:1 1 auto;width:100%}.content{display:flex;flex-direction:column;min-height:0}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TUI_DROPDOWN_WATCHED_CONTROLLER))
], TuiHostedDropdownComponent);
export { TuiHostedDropdownComponent };
//# sourceMappingURL=data:application/json;base64,