import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_CLOSE_WORD } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
export const STATUS_ICON = {
    info: 'tuiIconInfo',
    success: 'tuiIconCheckCircle',
    error: 'tuiIconCancel',
    warning: 'tuiIconAttention',
};
// @bad TODO: Think about moving to kit
let TuiNotificationComponent = class TuiNotificationComponent {
    constructor(closeWord$) {
        this.closeWord$ = closeWord$;
        this.hasIcon = true;
        this.status = "info" /* Info */;
        this.close = new EventEmitter();
    }
    get icon() {
        return STATUS_ICON[this.status];
    }
    get hasClose() {
        return !!this.close.observers.length;
    }
};
TuiNotificationComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TUI_CLOSE_WORD,] }] }
];
__decorate([
    Input(),
    HostBinding('class._has-icon'),
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "hasIcon", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-tui-host-status'),
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "status", void 0);
__decorate([
    Output()
], TuiNotificationComponent.prototype, "close", void 0);
__decorate([
    HostBinding('class._has-close-button')
], TuiNotificationComponent.prototype, "hasClose", null);
TuiNotificationComponent = __decorate([
    Component({
        selector: 'tui-notification',
        template: "<tui-svg\n    *ngIf=\"hasIcon\"\n    automation-id=\"tui-notification__icon\"\n    class=\"icon\"\n    [src]=\"icon\"\n></tui-svg>\n<div class=\"content\">\n    <ng-content></ng-content>\n</div>\n<button\n    *ngIf=\"hasClose\"\n    tuiIconButton\n    type=\"button\"\n    automation-id=\"tui-notification__close\"\n    size=\"xs\"\n    class=\"close\"\n    icon=\"tuiIconCloseLarge\"\n    appearance=\"icon\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;padding:13px 16px 11px;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);overflow:hidden}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;content:'';pointer-events:none}:host._has-close-button{padding-right:32px}:host._has-icon{padding-left:44px}:host[data-tui-host-status=info]{color:var(--tui-info-fill)}:host[data-tui-host-status=info]:after{background:var(--tui-info-bg)}:host[data-tui-host-status=success]{color:var(--tui-success-fill)}:host[data-tui-host-status=success]:after{background:var(--tui-success-bg)}:host[data-tui-host-status=error]{color:var(--tui-error-fill)}:host[data-tui-host-status=error]:after{background:var(--tui-error-bg)}:host[data-tui-host-status=warning]{color:var(--tui-warning-fill)}:host[data-tui-host-status=warning]:after{background:var(--tui-warning-bg)}.content{word-wrap:break-word;color:var(--tui-text-01)}.icon{position:absolute;top:0;left:16px;display:flex;width:16px;height:100%;max-height:48px;align-items:center}.close{position:absolute;top:10px;right:8px}"]
    }),
    __param(0, Inject(TUI_CLOSE_WORD))
], TuiNotificationComponent);
export { TuiNotificationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvbm90aWZpY2F0aW9uLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRWhDLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBMkI7SUFDL0MsSUFBSSxFQUFFLGFBQWE7SUFDbkIsT0FBTyxFQUFFLG9CQUFvQjtJQUM3QixLQUFLLEVBQUUsZUFBZTtJQUN0QixPQUFPLEVBQUUsa0JBQWtCO0NBQzlCLENBQUM7QUFFRix1Q0FBdUM7QUFPdkMsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7SUFjakMsWUFBNkMsVUFBOEI7UUFBOUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFWM0UsWUFBTyxHQUFHLElBQUksQ0FBQztRQUtmLFdBQU0scUJBQXlDO1FBR3RDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBRW9DLENBQUM7SUFFL0UsSUFBSSxJQUFJO1FBQ0osT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFHRCxJQUFJLFFBQVE7UUFDUixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDekMsQ0FBQztDQUNKLENBQUE7O1lBVjRELFVBQVUsdUJBQXRELE1BQU0sU0FBQyxjQUFjOztBQVZsQztJQUhDLEtBQUssRUFBRTtJQUNQLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztJQUM5QixjQUFjLEVBQUU7eURBQ0Y7QUFLZjtJQUhDLEtBQUssRUFBRTtJQUNQLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQztJQUN4QyxjQUFjLEVBQUU7d0RBQzhCO0FBRy9DO0lBREMsTUFBTSxFQUFFO3VEQUNpQztBQVMxQztJQURDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQzt3REFHdEM7QUF2QlEsd0JBQXdCO0lBTnBDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIscWZBQTJDO1FBRTNDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztLQUNsRCxDQUFDO0lBZWUsV0FBQSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7R0FkMUIsd0JBQXdCLENBd0JwQztTQXhCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpTm90aWZpY2F0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9lbnVtcyc7XG5pbXBvcnQge1RVSV9DTE9TRV9XT1JEfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IFNUQVRVU19JQ09OOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIGluZm86ICd0dWlJY29uSW5mbycsXG4gICAgc3VjY2VzczogJ3R1aUljb25DaGVja0NpcmNsZScsXG4gICAgZXJyb3I6ICd0dWlJY29uQ2FuY2VsJyxcbiAgICB3YXJuaW5nOiAndHVpSWNvbkF0dGVudGlvbicsXG59O1xuXG4vLyBAYmFkIFRPRE86IFRoaW5rIGFib3V0IG1vdmluZyB0byBraXRcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLW5vdGlmaWNhdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL25vdGlmaWNhdGlvbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9ub3RpZmljYXRpb24uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlOb3RpZmljYXRpb25Db21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5faGFzLWljb24nKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaGFzSWNvbiA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXR1aS1ob3N0LXN0YXR1cycpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzdGF0dXM6IFR1aU5vdGlmaWNhdGlvbiA9IFR1aU5vdGlmaWNhdGlvbi5JbmZvO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFRVSV9DTE9TRV9XT1JEKSByZWFkb25seSBjbG9zZVdvcmQkOiBPYnNlcnZhYmxlPHN0cmluZz4pIHt9XG5cbiAgICBnZXQgaWNvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gU1RBVFVTX0lDT05bdGhpcy5zdGF0dXNdO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2hhcy1jbG9zZS1idXR0b24nKVxuICAgIGdldCBoYXNDbG9zZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5jbG9zZS5vYnNlcnZlcnMubGVuZ3RoO1xuICAgIH1cbn1cbiJdfQ==