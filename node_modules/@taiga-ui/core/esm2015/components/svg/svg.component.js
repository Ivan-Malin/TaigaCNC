import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, Optional, Sanitizer, SecurityContext, } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { USER_AGENT, WINDOW } from '@ng-web-apis/common';
import { getDocumentOrShadowRoot, isIE, tuiAssert, tuiCustomEvent, tuiPure, tuiRequiredSetter, TuiStaticRequestService, TuiStringHandler, } from '@taiga-ui/cdk';
import { TUI_ICON_ERROR } from '@taiga-ui/core/constants';
import { TuiSvgService } from '@taiga-ui/core/services';
import { TUI_ICONS_PATH, TUI_SANITIZER } from '@taiga-ui/core/tokens';
import { isPresumedHTMLString } from '@taiga-ui/core/utils/miscellaneous';
import { of, ReplaySubject } from 'rxjs';
import { catchError, map, startWith, switchMap } from 'rxjs/operators';
const UNDEFINED_NAMED_ICON = 'Attempted to use undefined named icon';
const MISSING_EXTERNAL_ICON = 'External icon is missing on the given URL';
const FAILED_EXTERNAL_ICON = 'Failed to load external SVG';
// TODO: Consider moving to CDK along with SvgService and SvgDefsHostComponent
// @dynamic
let TuiSvgComponent = class TuiSvgComponent {
    constructor(documentRef, windowRef, iconsPath, tuiSanitizer, svgService, staticRequestService, sanitizer, elementRef, userAgent) {
        this.documentRef = documentRef;
        this.windowRef = windowRef;
        this.iconsPath = iconsPath;
        this.tuiSanitizer = tuiSanitizer;
        this.svgService = svgService;
        this.staticRequestService = staticRequestService;
        this.sanitizer = sanitizer;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.icon = '';
        this.src$ = new ReplaySubject(1);
        this.isIE = isIE(this.userAgent);
        this.innerHTML$ = this.src$.pipe(switchMap(() => this.isExternal
            ? this.getExternalIcon(this.icon)
            : of(this.getSafeHtml(this.icon))), startWith(''));
    }
    set src(src) {
        this.icon = src;
        this.src$.next();
    }
    get use() {
        return this.icon.includes('.svg#')
            ? this.icon
            : this.resolveName(this.icon, this.iconsPath);
    }
    get isInnerHTML() {
        return this.isSrc || this.isExternal || (this.isName && this.isShadowDOM);
    }
    get isShadowDOM() {
        return (getDocumentOrShadowRoot(this.elementRef.nativeElement) !== this.documentRef);
    }
    get isUse() {
        return this.use.includes('.svg#');
    }
    get isExternal() {
        return this.isUrl || (this.isIE && this.isUse) || this.isCrossDomain;
    }
    get isUrl() {
        return this.icon.endsWith('.svg');
    }
    get isSrc() {
        return isPresumedHTMLString(this.icon);
    }
    get isName() {
        return !this.isUrl && !this.isUse && !this.isSrc;
    }
    get isCrossDomain() {
        const { use, isUse, windowRef } = this;
        return (isUse &&
            use.startsWith('http') &&
            !!windowRef.origin &&
            !use.startsWith(windowRef.origin));
    }
    onError(message = MISSING_EXTERNAL_ICON) {
        const { icon } = this;
        const event = tuiCustomEvent(TUI_ICON_ERROR, {
            bubbles: true,
            detail: {
                message,
                icon,
            },
        }, this.documentRef);
        tuiAssert.assert(false, message, icon);
        this.elementRef.nativeElement.dispatchEvent(event);
    }
    resolveName(name, iconsPath) {
        return iconsPath(name);
    }
    getSafeHtml(src) {
        return this.isSrc ? this.sanitize(src) : this.process(src);
    }
    process(src) {
        const icon = this.svgService.getOriginal(src);
        if (this.isName && !icon && !!src) {
            this.onError(UNDEFINED_NAMED_ICON);
        }
        // Empty line for innerHTML when icon is shown through USE tag
        return !this.isShadowDOM || !this.isName ? '' : this.sanitize(icon || '');
    }
    sanitize(src) {
        return this.tuiSanitizer
            ? this.sanitizer.bypassSecurityTrustHtml(this.tuiSanitizer.sanitize(SecurityContext.HTML, src) || '')
            : src;
    }
    // @bad TODO: Create a simple XMLHttpRequest to Observable service
    getExternalIcon(src) {
        const url = src.includes('.svg') ? src : this.use;
        return this.staticRequestService.request(url).pipe(catchError(() => {
            this.onError(FAILED_EXTERNAL_ICON);
            return of('');
        }), map(response => this.sanitize(response.replace('<svg', '<svg focusable="false"'))));
    }
};
TuiSvgComponent.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [TUI_ICONS_PATH,] }] },
    { type: Sanitizer, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SANITIZER,] }] },
    { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
    { type: TuiStaticRequestService, decorators: [{ type: Inject, args: [TuiStaticRequestService,] }] },
    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
];
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiSvgComponent.prototype, "src", null);
__decorate([
    tuiPure
], TuiSvgComponent.prototype, "resolveName", null);
TuiSvgComponent = __decorate([
    Component({
        selector: 'tui-svg',
        template: "<ng-container *tuiLet=\"innerHTML$ | async as innerHTML\">\n    <div\n        *ngIf=\"isInnerHTML; else useTemplate\"\n        class=\"src\"\n        [innerHTML]=\"innerHTML\"\n    ></div>\n    <ng-template #useTemplate>\n        <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            focusable=\"false\"\n            width=\"100%\"\n            height=\"100%\"\n            (error)=\"onError()\"\n        >\n            <use [attr.xlink:href]=\"use\"></use>\n        </svg>\n    </ng-template>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:inline-block;vertical-align:middle;flex-shrink:0;line-height:0;height:24px;width:24px;fill:currentColor}.src{display:flex;height:100%;align-items:center;justify-content:center}"]
    }),
    __param(0, Inject(DOCUMENT)),
    __param(1, Inject(WINDOW)),
    __param(2, Inject(TUI_ICONS_PATH)),
    __param(3, Optional()),
    __param(3, Inject(TUI_SANITIZER)),
    __param(4, Inject(TuiSvgService)),
    __param(5, Inject(TuiStaticRequestService)),
    __param(6, Inject(DomSanitizer)),
    __param(7, Inject(ElementRef)),
    __param(8, Inject(USER_AGENT))
], TuiSvgComponent);
export { TuiSvgComponent };
//# sourceMappingURL=data:application/json;base64,