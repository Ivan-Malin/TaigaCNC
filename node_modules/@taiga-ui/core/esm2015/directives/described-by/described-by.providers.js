import { ElementRef, InjectionToken } from '@angular/core';
import { TuiDestroyService, TuiFocusVisibleService, typedFromEvent } from '@taiga-ui/cdk';
import { merge, timer } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, startWith, switchMapTo, take, takeUntil, tap, } from 'rxjs/operators';
const DELAY = 1000;
export const TUI_DESCRIBED_BY_SHOW = new InjectionToken('Accessible tooltip visibility stream');
export const TUI_DESCRIBED_BY_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    {
        provide: TUI_DESCRIBED_BY_SHOW,
        deps: [TuiFocusVisibleService, ElementRef],
        useFactory: describedByFactory,
    },
];
export function describedByFactory(focusVisible$, { nativeElement }) {
    return merge(focusVisible$.pipe(filter(v => v), switchMapTo(timer(DELAY).pipe(mapTo(true), takeUntil(typedFromEvent(nativeElement, 'keydown')))), switchMapTo(typedFromEvent(nativeElement, 'keydown').pipe(filter(({ key }) => key === 'Escape'), take(1), tap(event => {
        event.stopPropagation();
    }), mapTo(false), startWith(true)))), typedFromEvent(nativeElement, 'blur').pipe(mapTo(false))).pipe(distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZGVzY3JpYmVkLWJ5LyIsInNvdXJjZXMiOlsiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxLQUFLLEVBQWMsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEtBQUssRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksRUFDSixTQUFTLEVBQ1QsR0FBRyxHQUNOLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBRW5CLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNuRCxzQ0FBc0MsQ0FDekMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFlO0lBQ2xELGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEI7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxDQUFDLHNCQUFzQixFQUFFLFVBQVUsQ0FBQztRQUMxQyxVQUFVLEVBQUUsa0JBQWtCO0tBQ2pDO0NBQ0osQ0FBQztBQUVGLE1BQU0sVUFBVSxrQkFBa0IsQ0FDOUIsYUFBa0MsRUFDbEMsRUFBQyxhQUFhLEVBQTBCO0lBRXhDLE9BQU8sS0FBSyxDQUNSLGFBQWEsQ0FBQyxJQUFJLENBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2QsV0FBVyxDQUNQLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQ2IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUNYLFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQ3RELENBQ0osRUFDRCxXQUFXLENBQ1AsY0FBYyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3pDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxRQUFRLENBQUMsRUFDbkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNSLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUMsRUFDRixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQ1osU0FBUyxDQUFDLElBQUksQ0FBQyxDQUNsQixDQUNKLENBQ0osRUFDRCxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDM0QsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlLCBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLCB0eXBlZEZyb21FdmVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBtYXBUbyxcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwVG8sXG4gICAgdGFrZSxcbiAgICB0YWtlVW50aWwsXG4gICAgdGFwLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IERFTEFZID0gMTAwMDtcblxuZXhwb3J0IGNvbnN0IFRVSV9ERVNDUklCRURfQllfU0hPVyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPGJvb2xlYW4+PihcbiAgICAnQWNjZXNzaWJsZSB0b29sdGlwIHZpc2liaWxpdHkgc3RyZWFtJyxcbik7XG5leHBvcnQgY29uc3QgVFVJX0RFU0NSSUJFRF9CWV9QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9ERVNDUklCRURfQllfU0hPVyxcbiAgICAgICAgZGVwczogW1R1aUZvY3VzVmlzaWJsZVNlcnZpY2UsIEVsZW1lbnRSZWZdLFxuICAgICAgICB1c2VGYWN0b3J5OiBkZXNjcmliZWRCeUZhY3RvcnksXG4gICAgfSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNjcmliZWRCeUZhY3RvcnkoXG4gICAgZm9jdXNWaXNpYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICBmb2N1c1Zpc2libGUkLnBpcGUoXG4gICAgICAgICAgICBmaWx0ZXIodiA9PiB2KSxcbiAgICAgICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgICAgIHRpbWVyKERFTEFZKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtYXBUbyh0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdrZXlkb3duJykpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3dpdGNoTWFwVG8oXG4gICAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2tleWRvd24nKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoKHtrZXl9KSA9PiBrZXkgPT09ICdFc2NhcGUnKSxcbiAgICAgICAgICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgICAgICAgICAgdGFwKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbWFwVG8oZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFdpdGgodHJ1ZSksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdibHVyJykucGlwZShtYXBUbyhmYWxzZSkpLFxuICAgICkucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbn1cbiJdfQ==