import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input, OnDestroy, Renderer2, Self, } from '@angular/core';
import { tuiDefaultProp, TuiDestroyService, TuiHoveredService, TuiObscuredService, TuiParentsScrollService, tuiRequiredSetter, } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { DESCRIBED_BY } from '@taiga-ui/core/directives/described-by';
import { TuiHintService } from '@taiga-ui/core/services';
import { combineLatest, of, Subject } from 'rxjs';
import { delay, distinctUntilChanged, map, startWith, switchMap, take, takeUntil, } from 'rxjs/operators';
export const HINT_HOVERED_CLASS = '_hint_hovered';
const SHOW_DELAY = 500;
const HIDE_DELAY = 200;
let TuiHintDirective = class TuiHintDirective extends AbstractTuiHint {
    constructor(renderer, elementRef, hintService, destroy$, obscured$, hoveredService) {
        super(elementRef, hintService);
        this.renderer = renderer;
        this.componentHovered$ = new Subject();
        this.tuiHintHost = null;
        // @bad TODO: Use private provider
        combineLatest(hoveredService.createHovered$(elementRef.nativeElement), this.componentHovered$.pipe(startWith(false)))
            .pipe(map(([directiveHovered, componentHovered]) => directiveHovered || componentHovered), switchMap(visible => {
            this.toggleClass(visible);
            return of(visible).pipe(delay(visible ? SHOW_DELAY : HIDE_DELAY));
        }), switchMap(visible => visible && this.mode !== "overflow" /* Overflow */
            ? obscured$.pipe(map(obscured => !obscured), take(2))
            : of(visible)), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe({
            next: visible => {
                if (visible) {
                    this.showTooltip();
                }
                else {
                    this.hideTooltip();
                }
            },
            complete: () => {
                this.hideTooltip();
            },
        });
        this.hintService.register(this);
    }
    set tuiHint(value) {
        if (!value) {
            this.hideTooltip();
            this.content = '';
            return;
        }
        this.content = value;
    }
    get id() {
        return this.tuiHintId ? this.tuiHintId + DESCRIBED_BY : null;
    }
    get host() {
        return this.tuiHintHost ? this.tuiHintHost : this.elementRef.nativeElement;
    }
    getElementClientRect() {
        return this.host.getBoundingClientRect();
    }
    ngOnDestroy() {
        this.hintService.unregister(this);
        this.hideTooltip();
    }
    showTooltip() {
        if (this.content === '') {
            return;
        }
        this.toggleClass(true);
        this.hintService.add(this);
    }
    hideTooltip() {
        this.toggleClass(false);
        this.hintService.remove(this);
    }
    toggleClass(add) {
        if (add) {
            this.renderer.addClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
    }
};
TuiHintDirective.ctorParameters = () => [
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: TuiObscuredService, decorators: [{ type: Inject, args: [TuiObscuredService,] }, { type: Self }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] }
];
__decorate([
    Input()
], TuiHintDirective.prototype, "tuiHintId", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintHost", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiHintDirective.prototype, "tuiHint", null);
TuiHintDirective = __decorate([
    Directive({
        selector: '[tuiHint]:not(ng-container)',
        providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
    }),
    __param(0, Inject(Renderer2)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(TuiHintService)),
    __param(3, Inject(TuiDestroyService)),
    __param(4, Inject(TuiObscuredService)),
    __param(4, Self()),
    __param(5, Inject(TuiHoveredService))
], TuiHintDirective);
export { TuiHintDirective };
//# sourceMappingURL=data:application/json;base64,