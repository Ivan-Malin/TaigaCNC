import { __decorate, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { TuiDestroyService, TuiHoveredService, tuiRequiredSetter, typedFromEvent, } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';
let TuiPointerHintDirective = class TuiPointerHintDirective extends AbstractTuiHint {
    constructor(elementRef, hintService, destroy$, hoveredService) {
        super(elementRef, hintService);
        this.destroy$ = destroy$;
        this.content = '';
        this.currentMouseRect = this.mousePositionToClientRect();
        const hint$ = hoveredService.createHovered$(this.elementRef.nativeElement).pipe(filter(() => !!this.content), startWith(false), distinctUntilChanged());
        hint$.pipe(takeUntil(destroy$)).subscribe({
            next: visible => {
                if (visible) {
                    this.showTooltip();
                }
                else {
                    this.hideTooltip();
                }
            },
            complete: () => {
                this.hideTooltip();
            },
        });
        this.initMouseMoveSubscription();
    }
    set tuiPointerHint(value) {
        if (!value) {
            this.hideTooltip();
            this.content = '';
            return;
        }
        this.content = value;
    }
    getElementClientRect() {
        return this.currentMouseRect;
    }
    initMouseMoveSubscription() {
        const mouseMove$ = typedFromEvent(this.elementRef.nativeElement, 'mousemove');
        mouseMove$.pipe(takeUntil(this.destroy$)).subscribe(({ clientX, clientY }) => {
            this.currentMouseRect = this.mousePositionToClientRect(clientX, clientY);
        });
    }
    mousePositionToClientRect(x = 0, y = 0) {
        return {
            left: x,
            right: x,
            top: y,
            bottom: y,
            width: 0,
            height: 0,
        };
    }
};
TuiPointerHintDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] }
];
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiPointerHintDirective.prototype, "tuiPointerHint", null);
TuiPointerHintDirective = __decorate([
    Directive({
        selector: '[tuiPointerHint]:not(ng-container)',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiHintService)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(TuiHoveredService))
], TuiPointerHintDirective);
export { TuiPointerHintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci1oaW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvcG9pbnRlci1oaW50LyIsInNvdXJjZXMiOlsicG9pbnRlci1oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3ZELE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBTWxGLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXdCLFNBQVEsZUFBZTtJQWtCeEQsWUFDd0IsVUFBbUMsRUFDL0IsV0FBMkIsRUFFbEMsUUFBMkIsRUFDakIsY0FBaUM7UUFFNUQsS0FBSyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUhkLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBUmhELFlBQU8sR0FBd0IsRUFBRSxDQUFDO1FBRTFCLHFCQUFnQixHQUFHLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBV3hELE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQzNFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUM1QixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ2hCLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7UUFFRixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN0QyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUU7Z0JBQ1osSUFBSSxPQUFPLEVBQUU7b0JBQ1QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN0QjtxQkFBTTtvQkFDSCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ3RCO1lBQ0wsQ0FBQztZQUNELFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3ZCLENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBNUNELElBQUksY0FBYyxDQUFDLEtBQWlDO1FBQ2hELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFFbEIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQXFDRCxvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQztJQUVPLHlCQUF5QjtRQUM3QixNQUFNLFVBQVUsR0FBMkIsY0FBYyxDQUNyRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFDN0IsV0FBVyxDQUNkLENBQUM7UUFFRixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLHlCQUF5QixDQUFDLElBQVksQ0FBQyxFQUFFLElBQVksQ0FBQztRQUMxRCxPQUFPO1lBQ0gsSUFBSSxFQUFFLENBQUM7WUFDUCxLQUFLLEVBQUUsQ0FBQztZQUNSLEdBQUcsRUFBRSxDQUFDO1lBQ04sTUFBTSxFQUFFLENBQUM7WUFDVCxLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0sRUFBRSxDQUFDO1NBQ1osQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQXZEdUMsVUFBVSx1QkFBekMsTUFBTSxTQUFDLFVBQVU7WUFDbUIsY0FBYyx1QkFBbEQsTUFBTSxTQUFDLGNBQWM7WUFFSyxpQkFBaUIsdUJBRDNDLE1BQU0sU0FBQyxpQkFBaUI7WUFFa0IsaUJBQWlCLHVCQUEzRCxNQUFNLFNBQUMsaUJBQWlCOztBQXBCN0I7SUFGQyxLQUFLLEVBQUU7SUFDUCxpQkFBaUIsRUFBRTs2REFVbkI7QUFaUSx1QkFBdUI7SUFKbkMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG9DQUFvQztRQUM5QyxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztLQUNqQyxDQUFDO0lBb0JPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2xCLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQ3RCLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFFekIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtHQXZCckIsdUJBQXVCLENBMEVuQztTQTFFWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUhvdmVyZWRTZXJ2aWNlLFxuICAgIHR1aVJlcXVpcmVkU2V0dGVyLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QWJzdHJhY3RUdWlIaW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1R1aUhpbnRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBzdGFydFdpdGgsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlQb2ludGVySGludF06bm90KG5nLWNvbnRhaW5lciknLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUG9pbnRlckhpbnREaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdFR1aUhpbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgdHVpUG9pbnRlckhpbnQodmFsdWU6IFBvbHltb3JwaGV1c0NvbnRlbnQgfCBudWxsKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9ICcnO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRlbnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gJyc7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRNb3VzZVJlY3QgPSB0aGlzLm1vdXNlUG9zaXRpb25Ub0NsaWVudFJlY3QoKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aUhpbnRTZXJ2aWNlKSBoaW50U2VydmljZTogVHVpSGludFNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFR1aUhvdmVyZWRTZXJ2aWNlKSBob3ZlcmVkU2VydmljZTogVHVpSG92ZXJlZFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIGhpbnRTZXJ2aWNlKTtcblxuICAgICAgICBjb25zdCBoaW50JCA9IGhvdmVyZWRTZXJ2aWNlLmNyZWF0ZUhvdmVyZWQkKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KS5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKCgpID0+ICEhdGhpcy5jb250ZW50KSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICApO1xuXG4gICAgICAgIGhpbnQkLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IHZpc2libGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVUb29sdGlwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbml0TW91c2VNb3ZlU3Vic2NyaXB0aW9uKCk7XG4gICAgfVxuXG4gICAgZ2V0RWxlbWVudENsaWVudFJlY3QoKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNb3VzZVJlY3Q7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0TW91c2VNb3ZlU3Vic2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBtb3VzZU1vdmUkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdHlwZWRGcm9tRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICApO1xuXG4gICAgICAgIG1vdXNlTW92ZSQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoe2NsaWVudFgsIGNsaWVudFl9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNb3VzZVJlY3QgPSB0aGlzLm1vdXNlUG9zaXRpb25Ub0NsaWVudFJlY3QoY2xpZW50WCwgY2xpZW50WSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbW91c2VQb3NpdGlvblRvQ2xpZW50UmVjdCh4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB4LFxuICAgICAgICAgICAgcmlnaHQ6IHgsXG4gICAgICAgICAgICB0b3A6IHksXG4gICAgICAgICAgICBib3R0b206IHksXG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=