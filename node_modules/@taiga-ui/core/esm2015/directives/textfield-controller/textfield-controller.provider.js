import { ChangeDetectorRef, InjectionToken } from '@angular/core';
import { TuiDestroyService, watch } from '@taiga-ui/cdk';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TUI_TEXTFIELD_AUTOCOMPLETE, } from './textfield-autocomplete.directive';
import { TUI_TEXTFIELD_CLEANER, } from './textfield-cleaner.directive';
import { TUI_TEXTFIELD_CUSTOM_CONTENT, } from './textfield-custom-content.directive';
import { TUI_TEXTFIELD_EXAMPLE_TEXT, } from './textfield-example-text.directive';
import { TUI_TEXTFIELD_INPUT_MODE, } from './textfield-input-mode.directive';
import { TUI_TEXTFIELD_LABEL_OUTSIDE, } from './textfield-label-outside.directive';
import { TUI_TEXTFIELD_MAX_LENGTH, } from './textfield-max-length.directive';
import { TUI_TEXTFIELD_SIZE } from './textfield-size.directive';
import { TUI_TEXTFIELD_TYPE } from './textfield-type.directive';
import { TuiTextfieldController } from './textfield.controller';
export const TUI_TEXTIFELD_WATCHED_CONTROLLER = new InjectionToken('watched textfield controller');
export function textfieldWatchedControllerFactory(changeDetectorRef, destroy$, ...controllers) {
    const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(watch(changeDetectorRef), takeUntil(destroy$));
    change$.subscribe();
    return new TuiTextfieldController(change$, ...controllers);
}
export const TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTIFELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_AUTOCOMPLETE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_EXAMPLE_TEXT,
            TUI_TEXTFIELD_INPUT_MODE,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_MAX_LENGTH,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_TYPE,
        ],
        useFactory: textfieldWatchedControllerFactory,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3RleHRmaWVsZC1jb250cm9sbGVyLyIsInNvdXJjZXMiOlsidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQ0gsMEJBQTBCLEdBRTdCLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUNILHFCQUFxQixHQUV4QixNQUFNLCtCQUErQixDQUFDO0FBQ3ZDLE9BQU8sRUFDSCw0QkFBNEIsR0FFL0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQ0gsMEJBQTBCLEdBRTdCLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUNILHdCQUF3QixHQUUzQixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFDSCwyQkFBMkIsR0FFOUIsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQ0gsd0JBQXdCLEdBRTNCLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsT0FBTyxFQUFDLGtCQUFrQixFQUE0QixNQUFNLDRCQUE0QixDQUFDO0FBQ3pGLE9BQU8sRUFBQyxrQkFBa0IsRUFBNEIsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RixPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLGNBQWMsQ0FDOUQsOEJBQThCLENBQ2pDLENBQUM7QUFFRixNQUFNLFVBQVUsaUNBQWlDLENBQzdDLGlCQUFvQyxFQUNwQyxRQUEwQixFQUMxQixHQUFHLFdBV0Y7SUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMzRSxLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFDeEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QixDQUFDO0lBRUYsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXBCLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQWE7SUFDbkQsaUJBQWlCO0lBQ2pCO1FBQ0ksT0FBTyxFQUFFLGdDQUFnQztRQUN6QyxJQUFJLEVBQUU7WUFDRixpQkFBaUI7WUFDakIsaUJBQWlCO1lBQ2pCLDBCQUEwQjtZQUMxQixxQkFBcUI7WUFDckIsNEJBQTRCO1lBQzVCLDBCQUEwQjtZQUMxQix3QkFBd0I7WUFDeEIsMkJBQTJCO1lBQzNCLHdCQUF3QjtZQUN4QixrQkFBa0I7WUFDbEIsa0JBQWtCO1NBQ3JCO1FBQ0QsVUFBVSxFQUFFLGlDQUFpQztLQUNoRDtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgd2F0Y2h9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHttZXJnZSwgTkVWRVIsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9BVVRPQ09NUExFVEUsXG4gICAgVHVpVGV4dGZpZWxkQXV0b2NvbXBsZXRlRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1hdXRvY29tcGxldGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9DTEVBTkVSLFxuICAgIFR1aVRleHRmaWVsZENsZWFuZXJEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLWNsZWFuZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9DVVNUT01fQ09OVEVOVCxcbiAgICBUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1jdXN0b20tY29udGVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX0VYQU1QTEVfVEVYVCxcbiAgICBUdWlUZXh0ZmllbGRFeGFtcGxlVGV4dERpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtZXhhbXBsZS10ZXh0LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfSU5QVVRfTU9ERSxcbiAgICBUdWlUZXh0ZmllbGRJbnB1dE1vZGVEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLWlucHV0LW1vZGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9MQUJFTF9PVVRTSURFLFxuICAgIFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX01BWF9MRU5HVEgsXG4gICAgVHVpVGV4dGZpZWxkTWF4TGVuZ3RoRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1tYXgtbGVuZ3RoLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfU0laRSwgVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtc2l6ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX1RZUEUsIFR1aVRleHRmaWVsZFR5cGVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXR5cGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkQ29udHJvbGxlcn0gZnJvbSAnLi90ZXh0ZmllbGQuY29udHJvbGxlcic7XG5cbmV4cG9ydCBjb25zdCBUVUlfVEVYVElGRUxEX1dBVENIRURfQ09OVFJPTExFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlUZXh0ZmllbGRDb250cm9sbGVyPihcbiAgICAnd2F0Y2hlZCB0ZXh0ZmllbGQgY29udHJvbGxlcicsXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gdGV4dGZpZWxkV2F0Y2hlZENvbnRyb2xsZXJGYWN0b3J5KFxuICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAuLi5jb250cm9sbGVyczogW1xuICAgICAgICBUdWlUZXh0ZmllbGRBdXRvY29tcGxldGVEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZENsZWFuZXJEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZEV4YW1wbGVUZXh0RGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRJbnB1dE1vZGVEaXJlY3RpdmUsXG4gICAgICAgIFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbiAgICAgICAgVHVpVGV4dGZpZWxkTWF4TGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICBUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlLFxuICAgICAgICAvLyBAdHMtaWdub3JlIHJlbW92ZSBhZnRlciBUUyB1cGRhdGVcbiAgICAgICAgVHVpVGV4dGZpZWxkVHlwZURpcmVjdGl2ZSxcbiAgICBdXG4pOiBUdWlUZXh0ZmllbGRDb250cm9sbGVyIHtcbiAgICBjb25zdCBjaGFuZ2UkID0gbWVyZ2UoLi4uY29udHJvbGxlcnMubWFwKCh7Y2hhbmdlJH0pID0+IGNoYW5nZSQgfHwgTkVWRVIpKS5waXBlKFxuICAgICAgICB3YXRjaChjaGFuZ2VEZXRlY3RvclJlZiksXG4gICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgKTtcblxuICAgIGNoYW5nZSQuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gbmV3IFR1aVRleHRmaWVsZENvbnRyb2xsZXIoY2hhbmdlJCwgLi4uY29udHJvbGxlcnMpO1xufVxuXG5leHBvcnQgY29uc3QgVEVYVEZJRUxEX0NPTlRST0xMRVJfUFJPVklERVI6IFByb3ZpZGVyID0gW1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRJRkVMRF9XQVRDSEVEX0NPTlRST0xMRVIsXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0FVVE9DT01QTEVURSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ0xFQU5FUixcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ1VTVE9NX0NPTlRFTlQsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0VYQU1QTEVfVEVYVCxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfSU5QVVRfTU9ERSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfTEFCRUxfT1VUU0lERSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfTUFYX0xFTkdUSCxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfU0laRSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfVFlQRSxcbiAgICAgICAgXSxcbiAgICAgICAgdXNlRmFjdG9yeTogdGV4dGZpZWxkV2F0Y2hlZENvbnRyb2xsZXJGYWN0b3J5LFxuICAgIH0sXG5dO1xuIl19