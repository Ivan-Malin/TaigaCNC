export class TuiTextfieldController {
    constructor(change$, autocompleteDirective, cleanerDirective, customContentDirective, exampleTextDirective, inputModeDirective, labelOutsideDirective, maxLengthDirective, sizeDirective, typeDirective) {
        this.change$ = change$;
        this.autocompleteDirective = autocompleteDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.exampleTextDirective = exampleTextDirective;
        this.inputModeDirective = inputModeDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.maxLengthDirective = maxLengthDirective;
        this.sizeDirective = sizeDirective;
        this.typeDirective = typeDirective;
    }
    get autocomplete() {
        return this.autocompleteDirective.autocomplete;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent;
    }
    get exampleText() {
        return this.exampleTextDirective.exampleText;
    }
    get inputMode() {
        return this.inputModeDirective.inputMode;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get maxLength() {
        return this.maxLengthDirective.maxLength;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get type() {
        return this.typeDirective.type;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzL3RleHRmaWVsZC1jb250cm9sbGVyLyIsInNvdXJjZXMiOlsidGV4dGZpZWxkLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY0EsTUFBTSxPQUFPLHNCQUFzQjtJQUMvQixZQUNhLE9BQXlCLEVBQ2pCLHFCQUF3RCxFQUN4RCxnQkFBOEMsRUFDOUMsc0JBQTBELEVBQzFELG9CQUFzRCxFQUN0RCxrQkFBa0QsRUFDbEQscUJBQXdELEVBQ3hELGtCQUFrRCxFQUNsRCxhQUF3QyxFQUN4QyxhQUF3QztRQVRoRCxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUNqQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW1DO1FBQ3hELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBOEI7UUFDOUMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFvQztRQUMxRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQWtDO1FBQ3RELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBZ0M7UUFDbEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFtQztRQUN4RCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWdDO1FBQ2xELGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7SUFDMUQsQ0FBQztJQUVKLElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUM7SUFDckQsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUM7SUFDbkQsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNuQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1R1aUF1dG9maWxsRmllbGROYW1lLCBUdWlJbnB1dE1vZGUsIFR1aUlucHV0VHlwZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMLCBUdWlTaXplU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkQXV0b2NvbXBsZXRlRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1hdXRvY29tcGxldGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtY2xlYW5lci5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1jdXN0b20tY29udGVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRFeGFtcGxlVGV4dERpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtZXhhbXBsZS10ZXh0LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZElucHV0TW9kZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtaW5wdXQtbW9kZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRMYWJlbE91dHNpZGVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLWxhYmVsLW91dHNpZGUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkTWF4TGVuZ3RoRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1tYXgtbGVuZ3RoLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZFNpemVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXNpemUuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkVHlwZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtdHlwZS5kaXJlY3RpdmUnO1xuXG5leHBvcnQgY2xhc3MgVHVpVGV4dGZpZWxkQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IGNoYW5nZSQ6IE9ic2VydmFibGU8dm9pZD4sXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYXV0b2NvbXBsZXRlRGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRBdXRvY29tcGxldGVEaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2xlYW5lckRpcmVjdGl2ZTogVHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjdXN0b21Db250ZW50RGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGV4YW1wbGVUZXh0RGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRFeGFtcGxlVGV4dERpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpbnB1dE1vZGVEaXJlY3RpdmU6IFR1aVRleHRmaWVsZElucHV0TW9kZURpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsYWJlbE91dHNpZGVEaXJlY3RpdmU6IFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBtYXhMZW5ndGhEaXJlY3RpdmU6IFR1aVRleHRmaWVsZE1heExlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzaXplRGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHR5cGVEaXJlY3RpdmU6IFR1aVRleHRmaWVsZFR5cGVEaXJlY3RpdmUsXG4gICAgKSB7fVxuXG4gICAgZ2V0IGF1dG9jb21wbGV0ZSgpOiBUdWlBdXRvZmlsbEZpZWxkTmFtZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5hdXRvY29tcGxldGVEaXJlY3RpdmUuYXV0b2NvbXBsZXRlO1xuICAgIH1cblxuICAgIGdldCBjbGVhbmVyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhbmVyRGlyZWN0aXZlLmNsZWFuZXI7XG4gICAgfVxuXG4gICAgZ2V0IGN1c3RvbUNvbnRlbnQoKTogUG9seW1vcnBoZXVzQ29udGVudCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21Db250ZW50RGlyZWN0aXZlLmN1c3RvbUNvbnRlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGV4YW1wbGVUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4YW1wbGVUZXh0RGlyZWN0aXZlLmV4YW1wbGVUZXh0O1xuICAgIH1cblxuICAgIGdldCBpbnB1dE1vZGUoKTogVHVpSW5wdXRNb2RlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRNb2RlRGlyZWN0aXZlLmlucHV0TW9kZTtcbiAgICB9XG5cbiAgICBnZXQgbGFiZWxPdXRzaWRlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbE91dHNpZGVEaXJlY3RpdmUubGFiZWxPdXRzaWRlO1xuICAgIH1cblxuICAgIGdldCBtYXhMZW5ndGgoKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heExlbmd0aERpcmVjdGl2ZS5tYXhMZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0IHNpemUoKTogVHVpU2l6ZVMgfCBUdWlTaXplTCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemVEaXJlY3RpdmUuc2l6ZTtcbiAgICB9XG5cbiAgICBnZXQgdHlwZSgpOiBUdWlJbnB1dFR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlRGlyZWN0aXZlLnR5cGU7XG4gICAgfVxufVxuIl19