import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input } from '@angular/core';
import { TuiDestroyService, tuiPure } from '@taiga-ui/cdk';
import { timer } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export const ALERT_AUTOCLOSE_TIMEOUT = 3000;
let TuiNotificationAlertComponent = class TuiNotificationAlertComponent {
    constructor(destroy$) {
        timer(ALERT_AUTOCLOSE_TIMEOUT)
            .pipe(takeUntil(destroy$))
            .subscribe(() => {
            if (this.safeItem.autoClose) {
                this.closeDialog();
            }
        });
    }
    get safeItem() {
        if (!this.item) {
            throw new Error('Notification was created as undefined');
        }
        return this.item;
    }
    get context() {
        return this.calculateContext(this.safeItem);
    }
    closeDialog() {
        this.safeItem.observer.complete();
    }
    calculateContext({ status, data, label, observer, }) {
        return {
            $implicit: status,
            data: data,
            label: label,
            closeHook: () => {
                observer.complete();
            },
            emitHook: (data) => {
                observer.next(data);
            },
            emitAndCloseHook: (data) => {
                observer.next(data);
                observer.complete();
            },
        };
    }
};
TuiNotificationAlertComponent.ctorParameters = () => [
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Input()
], TuiNotificationAlertComponent.prototype, "item", void 0);
__decorate([
    tuiPure
], TuiNotificationAlertComponent.prototype, "calculateContext", null);
TuiNotificationAlertComponent = __decorate([
    Component({
        selector: 'tui-notification-alert',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: "<tui-notification\n    *ngIf=\"safeItem.hasCloseButton else noClose\"\n    [status]=\"safeItem.status\"\n    [hasIcon]=\"safeItem.hasIcon\"\n    (close)=\"closeDialog()\"\n>\n    <label\n        *ngIf=\"safeItem.label\"\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"heading\"\n    >\n        {{safeItem.label}}\n    </label>\n    <div\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__content\"\n        class=\"content\"\n        [content]=\"safeItem.content\"\n        [context]=\"context\"\n    ></div>\n</tui-notification>\n<ng-template #noClose>\n    <tui-notification [status]=\"safeItem.status\" [hasIcon]=\"safeItem.hasIcon\">\n        <label\n            *ngIf=\"safeItem.label\"\n            automation-id=\"tui-notification-alert__heading\"\n            class=\"heading\"\n        >\n            {{safeItem.label}}\n        </label>\n        <div\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__content\"\n            class=\"content\"\n            [content]=\"safeItem.content\"\n            [context]=\"context\"\n        ></div>\n    </tui-notification>\n</ng-template>\n",
        providers: [TuiDestroyService],
        styles: [":host{box-shadow:0 8px 16px rgba(51,51,51,.2);display:block;border-radius:var(--tui-radius-m)}.heading{font:var(--tui-font-text-m);line-height:20px;font-weight:700;margin:0}.content{color:var(--tui-text-01);word-wrap:break-word}.content:empty{display:none}"]
    }),
    __param(0, Inject(TuiDestroyService))
], TuiNotificationAlertComponent);
export { TuiNotificationAlertComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWFsZXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL21vZHVsZXMvbm90aWZpY2F0aW9ucy8iLCJzb3VyY2VzIjpbIm5vdGlmaWNhdGlvbi1hbGVydC9ub3RpZmljYXRpb24tYWxlcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzNCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUt6QyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLENBQUM7QUFTNUMsSUFBYSw2QkFBNkIsR0FBMUMsTUFBYSw2QkFBNkI7SUFJdEMsWUFFSSxRQUEyQjtRQUUzQixLQUFLLENBQUMsdUJBQXVCLENBQUM7YUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN6QixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3RCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDNUQ7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFHTyxnQkFBZ0IsQ0FBQyxFQUNyQixNQUFNLEVBQ04sSUFBSSxFQUNKLEtBQUssRUFDTCxRQUFRLEdBQ2M7UUFDdEIsT0FBTztZQUNILFNBQVMsRUFBRSxNQUFNO1lBQ2pCLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEtBQUs7WUFDWixTQUFTLEVBQUUsR0FBRyxFQUFFO2dCQUNaLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDO1lBQ0QsUUFBUSxFQUFFLENBQUMsSUFBTyxFQUFFLEVBQUU7Z0JBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEIsQ0FBQztZQUNELGdCQUFnQixFQUFFLENBQUMsSUFBTyxFQUFFLEVBQUU7Z0JBQzFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQWxEaUIsaUJBQWlCLHVCQUQxQixNQUFNLFNBQUMsaUJBQWlCOztBQUg3QjtJQURDLEtBQUssRUFBRTsyREFDdUI7QUFnQy9CO0lBREMsT0FBTztxRUFzQlA7QUF2RFEsNkJBQTZCO0lBUHpDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MseXFDQUFpRDtRQUVqRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzs7S0FDakMsQ0FBQztJQU1PLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7R0FMckIsNkJBQTZCLENBd0R6QztTQXhEWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgdHVpUHVyZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3RpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpTm90aWZpY2F0aW9uQ29udGVudENvbnRleHR9IGZyb20gJy4uL25vdGlmaWNhdGlvbi1jb250ZW50LWNvbnRleHQnO1xuaW1wb3J0IHtOb3RpZmljYXRpb25BbGVydH0gZnJvbSAnLi9Ob3RpZmljYXRpb24tYWxlcnQnO1xuXG5leHBvcnQgY29uc3QgQUxFUlRfQVVUT0NMT1NFX1RJTUVPVVQgPSAzMDAwO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1ub3RpZmljYXRpb24tYWxlcnQnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9ub3RpZmljYXRpb24tYWxlcnQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbm90aWZpY2F0aW9uLWFsZXJ0LnN0eWxlLmxlc3MnXSxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5vdGlmaWNhdGlvbkFsZXJ0Q29tcG9uZW50PE8sIEk+IHtcbiAgICBASW5wdXQoKVxuICAgIGl0ZW0/OiBOb3RpZmljYXRpb25BbGVydDxPLCBJPjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKVxuICAgICAgICBkZXN0cm95JDogVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHRpbWVyKEFMRVJUX0FVVE9DTE9TRV9USU1FT1VUKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNhZmVJdGVtLmF1dG9DbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHNhZmVJdGVtKCk6IE5vdGlmaWNhdGlvbkFsZXJ0PE8sIEk+IHtcbiAgICAgICAgaWYgKCF0aGlzLml0ZW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90aWZpY2F0aW9uIHdhcyBjcmVhdGVkIGFzIHVuZGVmaW5lZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbTtcbiAgICB9XG5cbiAgICBnZXQgY29udGV4dCgpOiBUdWlOb3RpZmljYXRpb25Db250ZW50Q29udGV4dDxPLCBJPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUNvbnRleHQodGhpcy5zYWZlSXRlbSk7XG4gICAgfVxuXG4gICAgY2xvc2VEaWFsb2coKSB7XG4gICAgICAgIHRoaXMuc2FmZUl0ZW0ub2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgY2FsY3VsYXRlQ29udGV4dCh7XG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIG9ic2VydmVyLFxuICAgIH06IE5vdGlmaWNhdGlvbkFsZXJ0PE8sIEk+KTogVHVpTm90aWZpY2F0aW9uQ29udGVudENvbnRleHQ8TywgST4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJGltcGxpY2l0OiBzdGF0dXMsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgY2xvc2VIb29rOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbWl0SG9vazogKGRhdGE6IE8pID0+IHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVtaXRBbmRDbG9zZUhvb2s6IChkYXRhOiBPKSA9PiB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=