import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { tuiAssert } from '@taiga-ui/cdk';
import { BehaviorSubject, Observable } from 'rxjs';
import { NotificationAlert } from './notification-alert/Notification-alert';
import * as i0 from "@angular/core";
const NO_HOST = 'Notifications are disabled, enable support by adding TuiNotificationsModule to your main app module';
let TuiNotificationsService = class TuiNotificationsService {
    constructor() {
        /** @internal */
        this.items$ = new BehaviorSubject([]);
    }
    show(content, options = {}) {
        tuiAssert.assert(!!this.items$.observers.length, NO_HOST);
        return new Observable((observer) => {
            const notification = new NotificationAlert(observer, content, options);
            this.items$.next([...this.items$.value, notification]);
            return () => {
                this.items$.next(this.items$.value.filter(item => item !== notification));
            };
        });
    }
};
TuiNotificationsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiNotificationsService_Factory() { return new TuiNotificationsService(); }, token: TuiNotificationsService, providedIn: "root" });
TuiNotificationsService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], TuiNotificationsService);
export { TuiNotificationsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvbW9kdWxlcy9ub3RpZmljYXRpb25zLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEMsT0FBTyxFQUFDLGVBQWUsRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDM0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0seUNBQXlDLENBQUM7O0FBTzFFLE1BQU0sT0FBTyxHQUNULHFHQUFxRyxDQUFDO0FBSzFHLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBQXBDO1FBQ0ksZ0JBQWdCO1FBQ1AsV0FBTSxHQUFHLElBQUksZUFBZSxDQUE2QyxFQUFFLENBQUMsQ0FBQztLQTZCekY7SUFoQkcsSUFBSSxDQUNBLE9BQWlFLEVBQ2pFLFVBQXNFLEVBQUU7UUFFeEUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTFELE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFxQixFQUFFLEVBQUU7WUFDNUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXZFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBRXZELE9BQU8sR0FBRyxFQUFFO2dCQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQzlFLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUE7O0FBL0JZLHVCQUF1QjtJQUhuQyxVQUFVLENBQUM7UUFDUixVQUFVLEVBQUUsTUFBTTtLQUNyQixDQUFDO0dBQ1csdUJBQXVCLENBK0JuQztTQS9CWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlBc3NlcnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIE9ic2VydmVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Tm90aWZpY2F0aW9uQWxlcnR9IGZyb20gJy4vbm90aWZpY2F0aW9uLWFsZXJ0L05vdGlmaWNhdGlvbi1hbGVydCc7XG5pbXBvcnQge1R1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0fSBmcm9tICcuL25vdGlmaWNhdGlvbi1jb250ZW50LWNvbnRleHQnO1xuaW1wb3J0IHtcbiAgICBUdWlOb3RpZmljYXRpb25PcHRpb25zLFxuICAgIFR1aU5vdGlmaWNhdGlvbk9wdGlvbnNXaXRoRGF0YSxcbn0gZnJvbSAnLi9ub3RpZmljYXRpb24tb3B0aW9ucyc7XG5cbmNvbnN0IE5PX0hPU1QgPVxuICAgICdOb3RpZmljYXRpb25zIGFyZSBkaXNhYmxlZCwgZW5hYmxlIHN1cHBvcnQgYnkgYWRkaW5nIFR1aU5vdGlmaWNhdGlvbnNNb2R1bGUgdG8geW91ciBtYWluIGFwcCBtb2R1bGUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlOb3RpZmljYXRpb25zU2VydmljZSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IGl0ZW1zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UmVhZG9ubHlBcnJheTxOb3RpZmljYXRpb25BbGVydDxhbnksIGFueT4+PihbXSk7XG5cbiAgICBzaG93PE8gPSB2b2lkPihcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlOb3RpZmljYXRpb25Db250ZW50Q29udGV4dDxPPj4sXG4gICAgKTogT2JzZXJ2YWJsZTxPPjtcbiAgICBzaG93PE8gPSB2b2lkPihcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlOb3RpZmljYXRpb25Db250ZW50Q29udGV4dDxPPj4sXG4gICAgICAgIG9wdGlvbnM6IFR1aU5vdGlmaWNhdGlvbk9wdGlvbnMsXG4gICAgKTogT2JzZXJ2YWJsZTxPPjtcbiAgICBzaG93PE8sIEk+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8sIEk+PixcbiAgICAgICAgb3B0aW9uczogVHVpTm90aWZpY2F0aW9uT3B0aW9uc1dpdGhEYXRhPEk+LFxuICAgICk6IE9ic2VydmFibGU8Tz47XG4gICAgc2hvdzxPLCBJPihcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlOb3RpZmljYXRpb25Db250ZW50Q29udGV4dDxPLCBJPj4sXG4gICAgICAgIG9wdGlvbnM6IFR1aU5vdGlmaWNhdGlvbk9wdGlvbnMgfCBUdWlOb3RpZmljYXRpb25PcHRpb25zV2l0aERhdGE8ST4gPSB7fSxcbiAgICApOiBPYnNlcnZhYmxlPE8+IHtcbiAgICAgICAgdHVpQXNzZXJ0LmFzc2VydCghIXRoaXMuaXRlbXMkLm9ic2VydmVycy5sZW5ndGgsIE5PX0hPU1QpO1xuXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPE8+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uQWxlcnQob2JzZXJ2ZXIsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZW1zJC5uZXh0KFsuLi50aGlzLml0ZW1zJC52YWx1ZSwgbm90aWZpY2F0aW9uXSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcyQubmV4dCh0aGlzLml0ZW1zJC52YWx1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBub3RpZmljYXRpb24pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==