import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service for displaying hints/tooltips
 */
let TuiHintService = class TuiHintService extends Observable {
    constructor() {
        super(observer => this.hints$.subscribe(observer));
        this.hints$ = new BehaviorSubject([]);
        /**
         * TODO: v2.0
         * We need the following logic for desribedBy
         * move it into another service that can register hints and
         * manage it using TuiHintService inside
         */
        this.directives = [];
    }
    add(directive) {
        this.hints$.next([...this.hints$.value, directive]);
    }
    remove(directive) {
        this.hints$.next(this.hints$.value.filter(hint => hint !== directive));
    }
    register(directive) {
        this.directives = [...this.directives, directive];
    }
    unregister(directive) {
        this.remove(directive);
        this.directives = this.directives.filter(dir => dir !== directive);
    }
    showHintForId(id) {
        const directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.add(directive);
        }
    }
    hideHintForId(id) {
        const directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.remove(directive);
        }
    }
    findDirectiveWithHintId(id) {
        return this.directives.find(directive => directive.tuiHintId === id);
    }
};
TuiHintService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiHintService_Factory() { return new TuiHintService(); }, token: TuiHintService, providedIn: "root" });
TuiHintService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], TuiHintService);
export { TuiHintService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvc2VydmljZXMvIiwic291cmNlcyI6WyJoaW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBTWpEOztHQUVHO0FBSUgsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBZSxTQUFRLFVBQTBDO0lBRzFFO1FBQ0ksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUh0QyxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQWlDLEVBQUUsQ0FBQyxDQUFDO1FBY2xGOzs7OztXQUtHO1FBQ0ssZUFBVSxHQUFvQyxFQUFFLENBQUM7SUFoQnpELENBQUM7SUFFRCxHQUFHLENBQUMsU0FBMEI7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUEwQjtRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBVUQsUUFBUSxDQUFDLFNBQTJCO1FBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFVBQVUsQ0FBQyxTQUEyQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGFBQWEsQ0FBQyxFQUFVO1FBQ3BCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuRCxJQUFJLFNBQVMsRUFBRTtZQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEVBQVU7UUFDcEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5ELElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxFQUFVO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDSixDQUFBOztBQW5EWSxjQUFjO0lBSDFCLFVBQVUsQ0FBQztRQUNSLFVBQVUsRUFBRSxNQUFNO0tBQ3JCLENBQUM7R0FDVyxjQUFjLENBbUQxQjtTQW5EWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuLy8gVE9ETzogcmVtb3ZlIGFmdGVyIHYyLjAgc2VwYXJhdGluZy4gSXQgcHJldmVudHMgc2VwcyBjeWNsaW5nLlxudHlwZSBUdWlIaW50RGlyZWN0aXZlID0gYW55O1xudHlwZSBBYnN0cmFjdFR1aUhpbnQgPSBhbnk7XG5cbi8qKlxuICogU2VydmljZSBmb3IgZGlzcGxheWluZyBoaW50cy90b29sdGlwc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlIaW50U2VydmljZSBleHRlbmRzIE9ic2VydmFibGU8UmVhZG9ubHlBcnJheTxBYnN0cmFjdFR1aUhpbnQ+PiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoaW50cyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJlYWRvbmx5QXJyYXk8QWJzdHJhY3RUdWlIaW50Pj4oW10pO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKG9ic2VydmVyID0+IHRoaXMuaGludHMkLnN1YnNjcmliZShvYnNlcnZlcikpO1xuICAgIH1cblxuICAgIGFkZChkaXJlY3RpdmU6IEFic3RyYWN0VHVpSGludCkge1xuICAgICAgICB0aGlzLmhpbnRzJC5uZXh0KFsuLi50aGlzLmhpbnRzJC52YWx1ZSwgZGlyZWN0aXZlXSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGRpcmVjdGl2ZTogQWJzdHJhY3RUdWlIaW50KSB7XG4gICAgICAgIHRoaXMuaGludHMkLm5leHQodGhpcy5oaW50cyQudmFsdWUuZmlsdGVyKGhpbnQgPT4gaGludCAhPT0gZGlyZWN0aXZlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzogdjIuMFxuICAgICAqIFdlIG5lZWQgdGhlIGZvbGxvd2luZyBsb2dpYyBmb3IgZGVzcmliZWRCeVxuICAgICAqIG1vdmUgaXQgaW50byBhbm90aGVyIHNlcnZpY2UgdGhhdCBjYW4gcmVnaXN0ZXIgaGludHMgYW5kXG4gICAgICogbWFuYWdlIGl0IHVzaW5nIFR1aUhpbnRTZXJ2aWNlIGluc2lkZVxuICAgICAqL1xuICAgIHByaXZhdGUgZGlyZWN0aXZlczogUmVhZG9ubHlBcnJheTxUdWlIaW50RGlyZWN0aXZlPiA9IFtdO1xuXG4gICAgcmVnaXN0ZXIoZGlyZWN0aXZlOiBUdWlIaW50RGlyZWN0aXZlKSB7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IFsuLi50aGlzLmRpcmVjdGl2ZXMsIGRpcmVjdGl2ZV07XG4gICAgfVxuXG4gICAgdW5yZWdpc3RlcihkaXJlY3RpdmU6IFR1aUhpbnREaXJlY3RpdmUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoZGlyZWN0aXZlKTtcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gdGhpcy5kaXJlY3RpdmVzLmZpbHRlcihkaXIgPT4gZGlyICE9PSBkaXJlY3RpdmUpO1xuICAgIH1cblxuICAgIHNob3dIaW50Rm9ySWQoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLmZpbmREaXJlY3RpdmVXaXRoSGludElkKGlkKTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChkaXJlY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZUhpbnRGb3JJZChpZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuZmluZERpcmVjdGl2ZVdpdGhIaW50SWQoaWQpO1xuXG4gICAgICAgIGlmIChkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGRpcmVjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmREaXJlY3RpdmVXaXRoSGludElkKGlkOiBzdHJpbmcpOiBUdWlIaW50RGlyZWN0aXZlIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlcy5maW5kKGRpcmVjdGl2ZSA9PiBkaXJlY3RpdmUudHVpSGludElkID09PSBpZCk7XG4gICAgfVxufVxuIl19