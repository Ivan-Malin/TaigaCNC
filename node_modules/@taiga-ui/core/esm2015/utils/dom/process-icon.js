const WIDTH_SEARCH = 'width="';
const HEIGHT_SEARCH = 'height="';
const START = '<svg';
export function processIcon(source, name) {
    if (source.includes(`id="${name}"`)) {
        return source;
    }
    const src = source.substring(source.indexOf(START));
    const attributes = src.substring(0, src.indexOf('>'));
    if (!attributes ||
        !attributes.includes(WIDTH_SEARCH) ||
        !attributes.includes(HEIGHT_SEARCH)) {
        return (src.replace(START, `<svg xmlns="http://www.w3.org/2000/svg"><g id="${name}" xmlns="http://www.w3.org/2000/svg"><svg`) + '</g></svg>');
    }
    const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    const widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    const widthString = attributes.substring(widthOffset, attributes.indexOf('"', widthOffset));
    const heightString = attributes.substring(heightOffset, attributes.indexOf('"', heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes('%') ||
        heightString.includes('%')) {
        return src.replace(START, `<svg id="${name}"`);
    }
    const width = parseInt(widthString, 10);
    const height = parseInt(heightString, 10);
    const transform = `translate(-${width / 2},-${height / 2})`;
    return `<g id="${name}" xmlns="http://www.w3.org/2000/svg" transform="${transform}"><svg x="50%" y="50%">${src}</svg></g>`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pY29uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvdXRpbHMvZG9tLyIsInNvdXJjZXMiOlsicHJvY2Vzcy1pY29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUMvQixNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUM7QUFDakMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBRXJCLE1BQU0sVUFBVSxXQUFXLENBQUMsTUFBYyxFQUFFLElBQVk7SUFDcEQsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsRUFBRTtRQUNqQyxPQUFPLE1BQU0sQ0FBQztLQUNqQjtJQUVELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV0RCxJQUNJLENBQUMsVUFBVTtRQUNYLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDbEMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUNyQztRQUNFLE9BQU8sQ0FDSCxHQUFHLENBQUMsT0FBTyxDQUNQLEtBQUssRUFDTCxrREFBa0QsSUFBSSwyQ0FBMkMsQ0FDcEcsR0FBRyxZQUFZLENBQ25CLENBQUM7S0FDTDtJQUVELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEQsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxNQUFNLFdBQVcsR0FBRyxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztJQUN2RCxNQUFNLFlBQVksR0FBRyxhQUFhLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUMxRCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUNwQyxXQUFXLEVBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQ3ZDLENBQUM7SUFDRixNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUNyQyxZQUFZLEVBQ1osVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQ3hDLENBQUM7SUFFRixJQUNJLENBQUMsWUFBWTtRQUNiLENBQUMsV0FBVztRQUNaLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ3pCLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQzVCO1FBQ0UsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLElBQUksR0FBRyxDQUFDLENBQUM7S0FDbEQ7SUFFRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsTUFBTSxTQUFTLEdBQUcsY0FBYyxLQUFLLEdBQUcsQ0FBQyxLQUFLLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUU1RCxPQUFPLFVBQVUsSUFBSSxtREFBbUQsU0FBUywwQkFBMEIsR0FBRyxZQUFZLENBQUM7QUFDL0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFdJRFRIX1NFQVJDSCA9ICd3aWR0aD1cIic7XG5jb25zdCBIRUlHSFRfU0VBUkNIID0gJ2hlaWdodD1cIic7XG5jb25zdCBTVEFSVCA9ICc8c3ZnJztcblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NJY29uKHNvdXJjZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChzb3VyY2UuaW5jbHVkZXMoYGlkPVwiJHtuYW1lfVwiYCkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG5cbiAgICBjb25zdCBzcmMgPSBzb3VyY2Uuc3Vic3RyaW5nKHNvdXJjZS5pbmRleE9mKFNUQVJUKSk7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHNyYy5zdWJzdHJpbmcoMCwgc3JjLmluZGV4T2YoJz4nKSk7XG5cbiAgICBpZiAoXG4gICAgICAgICFhdHRyaWJ1dGVzIHx8XG4gICAgICAgICFhdHRyaWJ1dGVzLmluY2x1ZGVzKFdJRFRIX1NFQVJDSCkgfHxcbiAgICAgICAgIWF0dHJpYnV0ZXMuaW5jbHVkZXMoSEVJR0hUX1NFQVJDSClcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHNyYy5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIFNUQVJULFxuICAgICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48ZyBpZD1cIiR7bmFtZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHN2Z2AsXG4gICAgICAgICAgICApICsgJzwvZz48L3N2Zz4nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXhPZldpZHRoID0gYXR0cmlidXRlcy5pbmRleE9mKFdJRFRIX1NFQVJDSCk7XG4gICAgY29uc3QgaW5kZXhPZkhlaWdodCA9IGF0dHJpYnV0ZXMuaW5kZXhPZihIRUlHSFRfU0VBUkNIKTtcbiAgICBjb25zdCB3aWR0aE9mZnNldCA9IGluZGV4T2ZXaWR0aCArIFdJRFRIX1NFQVJDSC5sZW5ndGg7XG4gICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gaW5kZXhPZkhlaWdodCArIEhFSUdIVF9TRUFSQ0gubGVuZ3RoO1xuICAgIGNvbnN0IHdpZHRoU3RyaW5nID0gYXR0cmlidXRlcy5zdWJzdHJpbmcoXG4gICAgICAgIHdpZHRoT2Zmc2V0LFxuICAgICAgICBhdHRyaWJ1dGVzLmluZGV4T2YoJ1wiJywgd2lkdGhPZmZzZXQpLFxuICAgICk7XG4gICAgY29uc3QgaGVpZ2h0U3RyaW5nID0gYXR0cmlidXRlcy5zdWJzdHJpbmcoXG4gICAgICAgIGhlaWdodE9mZnNldCxcbiAgICAgICAgYXR0cmlidXRlcy5pbmRleE9mKCdcIicsIGhlaWdodE9mZnNldCksXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgICAgIWhlaWdodFN0cmluZyB8fFxuICAgICAgICAhd2lkdGhTdHJpbmcgfHxcbiAgICAgICAgd2lkdGhTdHJpbmcuaW5jbHVkZXMoJyUnKSB8fFxuICAgICAgICBoZWlnaHRTdHJpbmcuaW5jbHVkZXMoJyUnKVxuICAgICkge1xuICAgICAgICByZXR1cm4gc3JjLnJlcGxhY2UoU1RBUlQsIGA8c3ZnIGlkPVwiJHtuYW1lfVwiYCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSBwYXJzZUludCh3aWR0aFN0cmluZywgMTApO1xuICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KGhlaWdodFN0cmluZywgMTApO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoLSR7d2lkdGggLyAyfSwtJHtoZWlnaHQgLyAyfSlgO1xuXG4gICAgcmV0dXJuIGA8ZyBpZD1cIiR7bmFtZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdHJhbnNmb3JtPVwiJHt0cmFuc2Zvcm19XCI+PHN2ZyB4PVwiNTAlXCIgeT1cIjUwJVwiPiR7c3JjfTwvc3ZnPjwvZz5gO1xufVxuIl19