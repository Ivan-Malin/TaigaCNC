import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
/**
 * Formats number adding thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @return the formatted string
 */
export function formatNumber(value, decimalLimit = null, decimalSeparator = ',', thousandSeparator = CHAR_NO_BREAK_SPACE) {
    const integerPartString = Math.floor(Math.abs(value)).toString();
    const fractionPartString = value.toString().split('.')[1] || '';
    const fractionPartPadded = decimalLimit === null
        ? fractionPartString
        : fractionPartString.substr(0, decimalLimit) +
            '0'.repeat(Math.max(decimalLimit - fractionPartString.length, 0));
    const remainder = integerPartString.length % 3;
    const sign = value < 0 ? '-' : '';
    let result = sign + integerPartString.charAt(0);
    for (let i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return !!fractionPartPadded || decimalLimit
        ? result + decimalSeparator + fractionPartPadded
        : result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LW51bWJlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL2Zvcm1hdC8iLCJzb3VyY2VzIjpbImZvcm1hdC1udW1iZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWxEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQ3hCLEtBQWEsRUFDYixlQUE4QixJQUFJLEVBQ2xDLG1CQUEyQixHQUFHLEVBQzlCLG9CQUE0QixtQkFBbUI7SUFFL0MsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqRSxNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hFLE1BQU0sa0JBQWtCLEdBQ3BCLFlBQVksS0FBSyxJQUFJO1FBQ2pCLENBQUMsQ0FBQyxrQkFBa0I7UUFDcEIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDO1lBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMvQyxNQUFNLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNsQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JELE1BQU0sSUFBSSxpQkFBaUIsQ0FBQztTQUMvQjtRQUVELE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDekM7SUFFRCxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxZQUFZO1FBQ3ZDLENBQUMsQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLEdBQUcsa0JBQWtCO1FBQ2hELENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q0hBUl9OT19CUkVBS19TUEFDRX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbi8qKlxuICogRm9ybWF0cyBudW1iZXIgYWRkaW5nIHRob3VzYW5kIHNlcGFyYXRvcnMgYW5kIGNvcnJlY3QgZGVjaW1hbCBzZXBhcmF0b3JcbiAqIHBhZGRpbmcgZGVjaW1hbCBwYXJ0IHdpdGggemVyb2VzIHRvIGdpdmVuIGxlbmd0aFxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgaW5wdXQgbnVtYmVyXG4gKiBAcGFyYW0gZGVjaW1hbExpbWl0IG51bWJlciBvZiBkaWdpdHMgb2YgZGVjaW1hbCBwYXJ0LCBudWxsIHRvIGtlZXAgdW50b3VjaGVkXG4gKiBAcGFyYW0gZGVjaW1hbFNlcGFyYXRvciBzZXBhcmF0b3IgYmV0d2VlbiB0aGUgaW50ZWdlciBhbmQgdGhlIGRlY2ltYWwgcGFydFxuICogQHBhcmFtIHRob3VzYW5kU2VwYXJhdG9yIHNlcGFyYXRvciBiZXR3ZWVuIHRob3VzYW5kc1xuICogQHJldHVybiB0aGUgZm9ybWF0dGVkIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgZGVjaW1hbExpbWl0OiBudW1iZXIgfCBudWxsID0gbnVsbCxcbiAgICBkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmcgPSAnLCcsXG4gICAgdGhvdXNhbmRTZXBhcmF0b3I6IHN0cmluZyA9IENIQVJfTk9fQlJFQUtfU1BBQ0UsXG4pOiBzdHJpbmcge1xuICAgIGNvbnN0IGludGVnZXJQYXJ0U3RyaW5nID0gTWF0aC5mbG9vcihNYXRoLmFicyh2YWx1ZSkpLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgZnJhY3Rpb25QYXJ0U3RyaW5nID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdCgnLicpWzFdIHx8ICcnO1xuICAgIGNvbnN0IGZyYWN0aW9uUGFydFBhZGRlZCA9XG4gICAgICAgIGRlY2ltYWxMaW1pdCA9PT0gbnVsbFxuICAgICAgICAgICAgPyBmcmFjdGlvblBhcnRTdHJpbmdcbiAgICAgICAgICAgIDogZnJhY3Rpb25QYXJ0U3RyaW5nLnN1YnN0cigwLCBkZWNpbWFsTGltaXQpICtcbiAgICAgICAgICAgICAgJzAnLnJlcGVhdChNYXRoLm1heChkZWNpbWFsTGltaXQgLSBmcmFjdGlvblBhcnRTdHJpbmcubGVuZ3RoLCAwKSk7XG4gICAgY29uc3QgcmVtYWluZGVyID0gaW50ZWdlclBhcnRTdHJpbmcubGVuZ3RoICUgMztcbiAgICBjb25zdCBzaWduID0gdmFsdWUgPCAwID8gJy0nIDogJyc7XG4gICAgbGV0IHJlc3VsdCA9IHNpZ24gKyBpbnRlZ2VyUGFydFN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGludGVnZXJQYXJ0U3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpICUgMyA9PT0gcmVtYWluZGVyICYmIGludGVnZXJQYXJ0U3RyaW5nLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aG91c2FuZFNlcGFyYXRvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSBpbnRlZ2VyUGFydFN0cmluZy5jaGFyQXQoaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhZnJhY3Rpb25QYXJ0UGFkZGVkIHx8IGRlY2ltYWxMaW1pdFxuICAgICAgICA/IHJlc3VsdCArIGRlY2ltYWxTZXBhcmF0b3IgKyBmcmFjdGlvblBhcnRQYWRkZWRcbiAgICAgICAgOiByZXN1bHQ7XG59XG4iXX0=