import { __decorate, __read, __spread } from "tslib";
import { ContentChildren, Directive, ElementRef, } from '@angular/core';
import { EMPTY_QUERY, getClosestKeyboardFocusable, itemsQueryListObservable, preventDefault, setNativeFocused, tuiPure, typedFromEvent, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { EMPTY, merge } from 'rxjs';
import { debounceTime, filter, map, mapTo, shareReplay, switchMap, take, tap, } from 'rxjs/operators';
var TuiDataListDropdownManagerDirective = /** @class */ (function () {
    function TuiDataListDropdownManagerDirective() {
        this.dropdowns = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    TuiDataListDropdownManagerDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.right$.subscribe(function (index) {
            _this.tryToFocus(index);
        });
        merge(this.immediate$, this.debounce$)
            .pipe(switchMap(function (active) {
            _this.dropdowns.forEach(function (dropdown, index) {
                dropdown.open = index === active;
            });
            var element = _this.elements.toArray()[active];
            var dropdown = _this.dropdowns.toArray()[active];
            if (!element || !dropdown || !dropdown.dropdownBoxRef) {
                return EMPTY;
            }
            var nativeElement = dropdown.dropdownBoxRef.location.nativeElement;
            var mouseEnter$ = typedFromEvent(nativeElement, 'mouseenter').pipe(take(1));
            var esc$ = merge(typedFromEvent(element.nativeElement, 'keydown'), typedFromEvent(nativeElement, 'keydown')).pipe(filter(function (_a) {
                var keyCode = _a.keyCode;
                return keyCode === 27;
            }));
            return merge(mouseEnter$, esc$).pipe(tap(function (event) {
                if (dropdown.dropdownBoxRef) {
                    event.stopPropagation();
                }
                setNativeFocused(element.nativeElement);
                dropdown.open = event instanceof MouseEvent;
            }));
        }))
            .subscribe();
    };
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "elements$", {
        get: function () {
            return itemsQueryListObservable(this.elements).pipe(map(function (array) { return array.map(function (_a) {
                var nativeElement = _a.nativeElement;
                return nativeElement;
            }); }), shareReplay(1));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "right$", {
        get: function () {
            return this.elements$.pipe(switchMap(function (elements) {
                return merge.apply(void 0, __spread(elements.map(function (element, index) {
                    return typedFromEvent(element, 'keydown').pipe(filter(function (_a) {
                        var keyCode = _a.keyCode;
                        return keyCode === 39;
                    }), preventDefault(), mapTo(index));
                })));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "immediate$", {
        get: function () {
            return this.elements$.pipe(switchMap(function (elements) {
                return merge.apply(void 0, __spread(elements.map(function (element, index) {
                    return typedFromEvent(element, 'click').pipe(mapTo(index));
                })));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiDataListDropdownManagerDirective.prototype, "debounce$", {
        get: function () {
            var _this = this;
            return this.elements$.pipe(switchMap(function (elements) {
                return merge.apply(void 0, __spread(elements.map(function (element, index) {
                    return merge(typedFromEvent(element, 'focus'), typedFromEvent(element, 'blur')).pipe(filter(function (_a) {
                        var relatedTarget = _a.relatedTarget;
                        return _this.notInDropdown(relatedTarget, index);
                    }), map(function (_a) {
                        var type = _a.type;
                        return (type === 'focus' ? index : NaN);
                    }), debounceTime(300));
                })));
            }));
        },
        enumerable: true,
        configurable: true
    });
    TuiDataListDropdownManagerDirective.prototype.notInDropdown = function (element, index) {
        var dropdown = this.dropdowns.toArray()[index];
        return (!dropdown ||
            !dropdown.dropdownBoxRef ||
            !dropdown.dropdownBoxRef.location.nativeElement.contains(element));
    };
    TuiDataListDropdownManagerDirective.prototype.tryToFocus = function (index) {
        var dropdown = this.dropdowns.toArray()[index];
        var content = dropdown &&
            dropdown.dropdownBoxRef &&
            dropdown.dropdownBoxRef.instance.contentElementRef;
        if (!content) {
            return;
        }
        var item = getClosestKeyboardFocusable(content.nativeElement, false, content.nativeElement);
        if (item) {
            setNativeFocused(item);
        }
    };
    __decorate([
        ContentChildren(TuiDropdownDirective, { descendants: true })
    ], TuiDataListDropdownManagerDirective.prototype, "dropdowns", void 0);
    __decorate([
        ContentChildren(TuiDropdownDirective, { read: ElementRef, descendants: true })
    ], TuiDataListDropdownManagerDirective.prototype, "elements", void 0);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "elements$", null);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "right$", null);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "immediate$", null);
    __decorate([
        tuiPure
    ], TuiDataListDropdownManagerDirective.prototype, "debounce$", null);
    TuiDataListDropdownManagerDirective = __decorate([
        Directive({
            selector: 'tui-data-list[tuiDataListDropdownManager]',
        })
    ], TuiDataListDropdownManagerDirective);
    return TuiDataListDropdownManagerDirective;
}());
export { TuiDataListDropdownManagerDirective };
//# sourceMappingURL=data:application/json;base64,