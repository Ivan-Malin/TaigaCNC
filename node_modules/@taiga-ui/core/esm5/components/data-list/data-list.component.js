import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, QueryList, ViewEncapsulation, } from '@angular/core';
import { EMPTY_QUERY, isNativeFocusedIn, isPresent, itemsQueryListObservable, moveFocus, setNativeMouseFocused, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_ACCESSOR, TUI_NOTHING_FOUND_MESSAGE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { TuiOptionComponent } from './option/option.component';
// TODO: Consider aria-activedescendant for proper accessibility implementation
// @dynamic
var TuiDataListComponent = /** @class */ (function () {
    function TuiDataListComponent(elementRef, defaultEmptyContent$) {
        this.elementRef = elementRef;
        this.defaultEmptyContent$ = defaultEmptyContent$;
        this.role = 'listbox';
        this.emptyContent = '';
        this.options = EMPTY_QUERY;
    }
    TuiDataListComponent_1 = TuiDataListComponent;
    Object.defineProperty(TuiDataListComponent.prototype, "empty$", {
        get: function () {
            return itemsQueryListObservable(this.options).pipe(map(function (_a) {
                var length = _a.length;
                return !length;
            }));
        },
        enumerable: true,
        configurable: true
    });
    TuiDataListComponent.prototype.getOptions = function (includeDisabled) {
        if (includeDisabled === void 0) { includeDisabled = false; }
        return this.options
            .toArray()
            .filter(function (_a) {
            var disabled = _a.disabled;
            return includeDisabled || !disabled;
        })
            .map(function (_a) {
            var value = _a.value;
            return value;
        })
            .filter(isPresent);
    };
    TuiDataListComponent.prototype.onFocusIn = function (relatedTarget, currentTarget) {
        if (!currentTarget.contains(relatedTarget) && !this.origin) {
            this.origin = relatedTarget;
        }
    };
    TuiDataListComponent.prototype.noop = function () { };
    TuiDataListComponent.prototype.onKeyDownArrow = function (current, step) {
        var elements = this.elements;
        moveFocus(elements.indexOf(current), elements, step);
    };
    TuiDataListComponent.prototype.onFocus = function (element, top) {
        var elements = this.elements;
        moveFocus(top ? -1 : elements.length, elements, top ? 1 : -1);
        this.handleFocusLossIfNecessary(element);
    };
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    TuiDataListComponent.prototype.handleFocusLossIfNecessary = function (element) {
        if (this.origin && isNativeFocusedIn(element)) {
            setNativeMouseFocused(this.origin, true, true);
        }
    };
    Object.defineProperty(TuiDataListComponent.prototype, "elements", {
        get: function () {
            return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiOption]'));
        },
        enumerable: true,
        configurable: true
    });
    var TuiDataListComponent_1;
    TuiDataListComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_NOTHING_FOUND_MESSAGE,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.role'),
        tuiDefaultProp()
    ], TuiDataListComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiDataListComponent.prototype, "emptyContent", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return TuiOptionComponent; }), { descendants: true })
    ], TuiDataListComponent.prototype, "options", void 0);
    __decorate([
        tuiPure
    ], TuiDataListComponent.prototype, "empty$", null);
    __decorate([
        HostListener('focusin', ['$event.relatedTarget', '$event.currentTarget'])
    ], TuiDataListComponent.prototype, "onFocusIn", null);
    __decorate([
        HostListener('mousedown.prevent')
    ], TuiDataListComponent.prototype, "noop", null);
    __decorate([
        HostListener('keydown.arrowDown.prevent', ['$event.target', '1']),
        HostListener('keydown.arrowUp.prevent', ['$event.target', '-1'])
    ], TuiDataListComponent.prototype, "onKeyDownArrow", null);
    __decorate([
        HostListener('mouseleave', ['$event.target'])
    ], TuiDataListComponent.prototype, "handleFocusLossIfNecessary", null);
    TuiDataListComponent = TuiDataListComponent_1 = __decorate([
        Component({
            selector: 'tui-data-list',
            template: "<div class=\"trap\" tabindex=\"0\" (focusin)=\"onFocus($event.target, true)\"></div>\n<ng-content></ng-content>\n<div\n    *ngIf=\"empty$ | async\"\n    class=\"empty\"\n    polymorpheus-outlet\n    [content]=\"emptyContent || (defaultEmptyContent$ | async)\"\n></div>\n<div class=\"trap\" tabindex=\"0\" (focusin)=\"onFocus($event.target, false)\"></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            providers: [
                {
                    provide: TUI_DATA_LIST_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiDataListComponent_1; }),
                },
            ],
            styles: ["tui-data-list{font:var(--tui-font-text-m);display:flex;flex-direction:column;padding:8px 0;color:var(--tui-text-03)}tui-data-list:focus-within .trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list>.empty{margin:12px 16px}tui-opt-group{font:var(--tui-font-text-xs);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;flex-direction:column;line-height:32px;padding:8px 0;margin:-8px 0}tui-opt-group:empty:after,tui-opt-group:empty:before{display:none}tui-opt-group:before{content:attr(data-label);padding:0 16px;color:var(--tui-text-02)}tui-opt-group:not(:empty)~tui-opt-group:before{padding-top:16px}tui-opt-group:not(:empty)~tui-opt-group:after{content:'';position:absolute;left:0;right:0;top:7px;height:1px;background:var(--tui-base-03)}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TUI_NOTHING_FOUND_MESSAGE))
    ], TuiDataListComponent);
    return TuiDataListComponent;
}());
export { TuiDataListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0LyIsInNvdXJjZXMiOlsiZGF0YS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULHdCQUF3QixFQUN4QixTQUFTLEVBQ1QscUJBQXFCLEVBQ3JCLGNBQWMsRUFDZCxPQUFPLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLHNCQUFzQixFQUFFLHlCQUF5QixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFHeEYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFN0QsK0VBQStFO0FBQy9FLFdBQVc7QUFjWDtJQWVJLDhCQUN5QyxVQUFtQyxFQUUvRCxvQkFBd0M7UUFGWixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUUvRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQW9CO1FBZHJELFNBQUksR0FBb0IsU0FBUyxDQUFDO1FBSWxDLGlCQUFZLEdBQXdCLEVBQUUsQ0FBQztRQUd0QixZQUFPLEdBQXFDLFdBQVcsQ0FBQztJQVF0RSxDQUFDOzZCQW5CSyxvQkFBb0I7SUFzQjdCLHNCQUFJLHdDQUFNO2FBQVY7WUFDSSxPQUFPLHdCQUF3QixDQUFDLElBQUksQ0FBQyxPQUFP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QUM7UUFDakUsWUFBWSxDQUFDLHlCQUF5QixFQUFFLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDOzhEQUtoRTtJQVdEO1FBREMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzBFQUs3QztJQWpFUSxvQkFBb0I7UUFiaEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGVBQWU7WUFDekIsaVhBQXdDO1lBRXhDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsc0JBQXNCO29CQUMvQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxzQkFBb0IsRUFBcEIsQ0FBb0IsQ0FBQztpQkFDdEQ7YUFDSjs7U0FDSixDQUFDO1FBaUJPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7T0FqQjdCLG9CQUFvQixDQXNFaEM7SUFBRCwyQkFBQztDQUFBLEFBdEVELElBc0VDO1NBdEVZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZHJlbixcbiAgICBFbGVtZW50UmVmLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBpc05hdGl2ZUZvY3VzZWRJbixcbiAgICBpc1ByZXNlbnQsXG4gICAgaXRlbXNRdWVyeUxpc3RPYnNlcnZhYmxlLFxuICAgIG1vdmVGb2N1cyxcbiAgICBzZXROYXRpdmVNb3VzZUZvY3VzZWQsXG4gICAgdHVpRGVmYXVsdFByb3AsXG4gICAgdHVpUHVyZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aURhdGFMaXN0QWNjZXNzb3J9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfREFUQV9MSVNUX0FDQ0VTU09SLCBUVUlfTk9USElOR19GT1VORF9NRVNTQUdFfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtUdWlEYXRhTGlzdFJvbGV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtUdWlPcHRpb25Db21wb25lbnR9IGZyb20gJy4vb3B0aW9uL29wdGlvbi5jb21wb25lbnQnO1xuXG4vLyBUT0RPOiBDb25zaWRlciBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQgZm9yIHByb3BlciBhY2Nlc3NpYmlsaXR5IGltcGxlbWVudGF0aW9uXG4vLyBAZHluYW1pY1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktZGF0YS1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0YS1saXN0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2RhdGEtbGlzdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX0RBVEFfTElTVF9BQ0NFU1NPUixcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFR1aURhdGFMaXN0Q29tcG9uZW50KSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlEYXRhTGlzdENvbXBvbmVudDxUPiBpbXBsZW1lbnRzIFR1aURhdGFMaXN0QWNjZXNzb3I8VD4ge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgcm9sZTogVHVpRGF0YUxpc3RSb2xlID0gJ2xpc3Rib3gnO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGVtcHR5Q29udGVudDogUG9seW1vcnBoZXVzQ29udGVudCA9ICcnO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IFR1aU9wdGlvbkNvbXBvbmVudCksIHtkZXNjZW5kYW50czogdHJ1ZX0pXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBRdWVyeUxpc3Q8VHVpT3B0aW9uQ29tcG9uZW50PFQ+PiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgcHJpdmF0ZSBvcmlnaW4/OiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVFVJX05PVEhJTkdfRk9VTkRfTUVTU0FHRSlcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdEVtcHR5Q29udGVudCQ6IE9ic2VydmFibGU8c3RyaW5nPixcbiAgICApIHt9XG5cbiAgICBAdHVpUHVyZVxuICAgIGdldCBlbXB0eSQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBpdGVtc1F1ZXJ5TGlzdE9ic2VydmFibGUodGhpcy5vcHRpb25zKS5waXBlKG1hcCgoe2xlbmd0aH0pID0+ICFsZW5ndGgpKTtcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zKGluY2x1ZGVEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlKTogUmVhZG9ubHlBcnJheTxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgIC50b0FycmF5KClcbiAgICAgICAgICAgIC5maWx0ZXIoKHtkaXNhYmxlZH0pID0+IGluY2x1ZGVEaXNhYmxlZCB8fCAhZGlzYWJsZWQpXG4gICAgICAgICAgICAubWFwKCh7dmFsdWV9KSA9PiB2YWx1ZSlcbiAgICAgICAgICAgIC5maWx0ZXIoaXNQcmVzZW50KTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdmb2N1c2luJywgWyckZXZlbnQucmVsYXRlZFRhcmdldCcsICckZXZlbnQuY3VycmVudFRhcmdldCddKVxuICAgIG9uRm9jdXNJbihyZWxhdGVkVGFyZ2V0OiBIVE1MRWxlbWVudCwgY3VycmVudFRhcmdldDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFjdXJyZW50VGFyZ2V0LmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpICYmICF0aGlzLm9yaWdpbikge1xuICAgICAgICAgICAgdGhpcy5vcmlnaW4gPSByZWxhdGVkVGFyZ2V0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duLnByZXZlbnQnKVxuICAgIG5vb3AoKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd0Rvd24ucHJldmVudCcsIFsnJGV2ZW50LnRhcmdldCcsICcxJ10pXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd1VwLnByZXZlbnQnLCBbJyRldmVudC50YXJnZXQnLCAnLTEnXSlcbiAgICBvbktleURvd25BcnJvdyhjdXJyZW50OiBIVE1MRWxlbWVudCwgc3RlcDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHtlbGVtZW50c30gPSB0aGlzO1xuXG4gICAgICAgIG1vdmVGb2N1cyhlbGVtZW50cy5pbmRleE9mKGN1cnJlbnQpLCBlbGVtZW50cywgc3RlcCk7XG4gICAgfVxuXG4gICAgb25Gb2N1cyhlbGVtZW50OiBIVE1MRWxlbWVudCwgdG9wOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IHtlbGVtZW50c30gPSB0aGlzO1xuXG4gICAgICAgIG1vdmVGb2N1cyh0b3AgPyAtMSA6IGVsZW1lbnRzLmxlbmd0aCwgZWxlbWVudHMsIHRvcCA/IDEgOiAtMSk7XG4gICAgICAgIHRoaXMuaGFuZGxlRm9jdXNMb3NzSWZOZWNlc3NhcnkoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogQ29uc2lkZXIgYXJpYS1hY3RpdmVkZXNjZW5kYW50IGZvciBwcm9wZXIgYWNjZXNzaWJpbGl0eSBpbXBsZW1lbnRhdGlvblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBbJyRldmVudC50YXJnZXQnXSlcbiAgICBoYW5kbGVGb2N1c0xvc3NJZk5lY2Vzc2FyeShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5vcmlnaW4gJiYgaXNOYXRpdmVGb2N1c2VkSW4oZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHNldE5hdGl2ZU1vdXNlRm9jdXNlZCh0aGlzLm9yaWdpbiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBlbGVtZW50cygpOiBSZWFkb25seUFycmF5PEhUTUxFbGVtZW50PiB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0dWlPcHRpb25dJykpO1xuICAgIH1cbn1cbiJdfQ==