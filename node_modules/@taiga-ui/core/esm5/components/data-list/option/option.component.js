import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, OnDestroy, Optional, Self, TemplateRef, } from '@angular/core';
import { isNativeFocused, setNativeFocused, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT } from '@taiga-ui/core/tokens';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { TuiDataListComponent } from '../data-list.component';
export function shouldFocus(_a) {
    var currentTarget = _a.currentTarget;
    return !isNativeFocused(currentTarget);
}
// TODO: Consider all use cases for aria roles
var TuiOptionComponent = /** @class */ (function () {
    // TODO: Fix dataList type when updated to Ivy and compilation drops metadata
    function TuiOptionComponent(content, dataList, elementRef, host, dropdown) {
        this.content = content;
        this.dataList = dataList;
        this.elementRef = elementRef;
        this.host = host;
        this.dropdown = dropdown;
        this.size = 'm';
        this.role = 'option';
        this.disabled = false;
    }
    Object.defineProperty(TuiOptionComponent.prototype, "active", {
        get: function () {
            return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
        },
        enumerable: true,
        configurable: true
    });
    TuiOptionComponent.prototype.onClick = function () {
        if (this.host && this.value !== undefined) {
            this.host.handleOption(this.value);
        }
    };
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    TuiOptionComponent.prototype.onMouseMove = function (_a) {
        var currentTarget = _a.currentTarget;
        setNativeFocused(currentTarget);
    };
    // Preventing focus loss upon focused option removal
    TuiOptionComponent.prototype.ngOnDestroy = function () {
        this.dataList.handleFocusLossIfNecessary(this.elementRef.nativeElement);
    };
    TuiOptionComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_OPTION_CONTENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return TuiDataListComponent; }),] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
        { type: TuiDropdownDirective, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [TuiDropdownDirective,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.data-size'),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        HostBinding('attr.role'),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "role", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiOptionComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], TuiOptionComponent.prototype, "value", void 0);
    __decorate([
        HostBinding('class._with-dropdown')
    ], TuiOptionComponent.prototype, "active", null);
    __decorate([
        HostListener('click')
    ], TuiOptionComponent.prototype, "onClick", null);
    __decorate([
        shouldCall(shouldFocus),
        HostListener('init.onMouseMove', ['$event']),
        HostListener('mousemove.silent', ['$event'])
    ], TuiOptionComponent.prototype, "onMouseMove", null);
    TuiOptionComponent = __decorate([
        Component({
            selector: "button[tuiOption], a[tuiOption]",
            template: "<span\n    *ngIf=\"content; else base\"\n    polymorpheus-outlet\n    class=\"content\"\n    [content]=\"content\"\n    [context]=\"{ $implicit: base }\"\n></span>\n<ng-template #base>\n    <ng-content></ng-content>\n    <tui-svg *ngIf=\"dropdown\" class=\"arrow\" src=\"tuiIconChevronRight\"></tui-svg>\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                tabIndex: '-1',
                type: 'button',
                '[attr.disabled]': 'disabled || null',
            },
            styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0 16px;border:0;background:padding-box;font-size:inherit;line-height:inherit;font:var(--tui-font-text-m);transition-property:background;transition-duration:.3s;transition-timing-function:ease-in-out;display:flex;width:100%;align-items:center;justify-content:space-between;text-align:left;box-sizing:border-box;color:var(--tui-text-01);outline:0;text-decoration:none;cursor:pointer;border-top:8px solid transparent;border-bottom:8px solid transparent;margin:-8px 0}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:default}:host._with-dropdown,:host:focus{background-color:var(--tui-base-02)}:host::-moz-focus-inner{border:0}:host[data-size=xs]{font:var(--tui-font-text-s);min-height:48px}:host[data-size='s']{min-height:48px}:host[data-size='m']{min-height:60px}:host[data-size='l']{min-height:72px}.content{display:flex;flex:1}.arrow{margin:0 -8px 0 12px}"]
        }),
        __param(0, Optional()),
        __param(0, Inject(TUI_OPTION_CONTENT)),
        __param(1, Inject(forwardRef(function () { return TuiDataListComponent; }))),
        __param(2, Inject(ElementRef)),
        __param(3, Optional()),
        __param(3, Inject(TUI_DATA_LIST_HOST)),
        __param(4, Optional()),
        __param(4, Self()),
        __param(4, Inject(TuiDropdownDirective))
    ], TuiOptionComponent);
    return TuiOptionComponent;
}());
export { TuiOptionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0LyIsInNvdXJjZXMiOlsib3B0aW9uL29wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsZUFBZSxFQUNmLGdCQUFnQixFQUVoQixjQUFjLEdBRWpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBRXhFLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxNQUFNLFVBQVUsV0FBVyxDQUFDLEVBRVk7UUFEcEMsZ0NBQWE7SUFFYixPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCw4Q0FBOEM7QUFZOUM7SUFrQkksNkVBQTZFO0lBQzdFLDRCQUdhLE9BRUQsRUFFUyxRQUFhLEVBQ08sVUFBbUMsRUFHdkQsSUFBK0IsRUFJdkMsUUFBcUM7UUFackMsWUFBTyxHQUFQLE9BQU8sQ0FFUjtRQUVTLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDTyxlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUd2RCxTQUFJLEdBQUosSUFBSSxDQUEyQjtRQUl2QyxhQUFRLEdBQVIsUUFBUSxDQUE2QjtRQTlCbEQsU0FB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ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbiAgICBTZWxmLFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgaXNOYXRpdmVGb2N1c2VkLFxuICAgIHNldE5hdGl2ZUZvY3VzZWQsXG4gICAgVHVpQ29udGV4dFdpdGhJbXBsaWNpdCxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICBUdWlFdmVudFdpdGgsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlEcm9wZG93bkRpcmVjdGl2ZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9kcm9wZG93bic7XG5pbXBvcnQge1R1aURhdGFMaXN0SG9zdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9EQVRBX0xJU1RfSE9TVCwgVFVJX09QVElPTl9DT05URU5UfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtUdWlPcHRpb25Sb2xlLCBUdWlTaXplTCwgVHVpU2l6ZVhTfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge3Nob3VsZENhbGx9IGZyb20gJ0B0aW5rb2ZmL25nLWV2ZW50LXBsdWdpbnMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtUdWlEYXRhTGlzdENvbXBvbmVudH0gZnJvbSAnLi4vZGF0YS1saXN0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRGb2N1cyh7XG4gICAgY3VycmVudFRhcmdldCxcbn06IFR1aUV2ZW50V2l0aDxNb3VzZUV2ZW50LCBIVE1MRWxlbWVudD4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gIWlzTmF0aXZlRm9jdXNlZChjdXJyZW50VGFyZ2V0KTtcbn1cblxuLy8gVE9ETzogQ29uc2lkZXIgYWxsIHVzZSBjYXNlcyBmb3IgYXJpYSByb2xlc1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IGBidXR0b25bdHVpT3B0aW9uXSwgYVt0dWlPcHRpb25dYCxcbiAgICB0ZW1wbGF0ZVVybDogJy4vb3B0aW9uLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL29wdGlvbi5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgaG9zdDoge1xuICAgICAgICB0YWJJbmRleDogJy0xJyxcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICdbYXR0ci5kaXNhYmxlZF0nOiAnZGlzYWJsZWQgfHwgbnVsbCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpT3B0aW9uQ29tcG9uZW50PFQgPSB1bmtub3duPiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zaXplJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNpemU6IFR1aVNpemVYUyB8IFR1aVNpemVMID0gJ20nO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICByb2xlOiBUdWlPcHRpb25Sb2xlID0gJ29wdGlvbic7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgdmFsdWU/OiBUO1xuXG4gICAgLy8gVE9ETzogRml4IGRhdGFMaXN0IHR5cGUgd2hlbiB1cGRhdGVkIHRvIEl2eSBhbmQgY29tcGlsYXRpb24gZHJvcHMgbWV0YWRhdGFcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChUVUlfT1BUSU9OX0NPTlRFTlQpXG4gICAgICAgIHJlYWRvbmx5IGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8XG4gICAgICAgICAgICBUdWlDb250ZXh0V2l0aEltcGxpY2l0PFRlbXBsYXRlUmVmPHt9Pj5cbiAgICAgICAgPiB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUdWlEYXRhTGlzdENvbXBvbmVudCkpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YUxpc3Q6IGFueSxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFRVSV9EQVRBX0xJU1RfSE9TVClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBob3N0OiBUdWlEYXRhTGlzdEhvc3Q8VD4gfCBudWxsLFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBAU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpRHJvcGRvd25EaXJlY3RpdmUpXG4gICAgICAgIHJlYWRvbmx5IGRyb3Bkb3duOiBUdWlEcm9wZG93bkRpcmVjdGl2ZSB8IG51bGwsXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fd2l0aC1kcm9wZG93bicpXG4gICAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5kcm9wZG93biAmJiAhIXRoaXMuZHJvcGRvd24uZHJvcGRvd25Cb3hSZWY7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QgJiYgdGhpcy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhvc3QuaGFuZGxlT3B0aW9uKHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQGJhZCBUT0RPOiBDb25zaWRlciBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQgZm9yIHByb3BlciBhY2Nlc3NpYmlsaXR5IGltcGxlbWVudGF0aW9uXG4gICAgQHNob3VsZENhbGwoc2hvdWxkRm9jdXMpXG4gICAgQEhvc3RMaXN0ZW5lcignaW5pdC5vbk1vdXNlTW92ZScsIFsnJGV2ZW50J10pXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2Vtb3ZlLnNpbGVudCcsIFsnJGV2ZW50J10pXG4gICAgb25Nb3VzZU1vdmUoe2N1cnJlbnRUYXJnZXR9OiBUdWlFdmVudFdpdGg8TW91c2VFdmVudCwgSFRNTEVsZW1lbnQ+KSB7XG4gICAgICAgIHNldE5hdGl2ZUZvY3VzZWQoY3VycmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgLy8gUHJldmVudGluZyBmb2N1cyBsb3NzIHVwb24gZm9jdXNlZCBvcHRpb24gcmVtb3ZhbFxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRhdGFMaXN0LmhhbmRsZUZvY3VzTG9zc0lmTmVjZXNzYXJ5KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG59XG4iXX0=