import { DOCUMENT } from '@angular/common';
import { ElementRef, InjectionToken } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { containsOrAfter, isCurrentTarget, TuiDestroyService, typedFromEvent, } from '@taiga-ui/cdk';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge } from 'rxjs';
import { filter, switchMapTo, take, takeUntil } from 'rxjs/operators';
export var TUI_DIALOGS_CLOSE = new InjectionToken('A stream to close dialogs', {
    factory: function () { return EMPTY; },
});
var SCROLLBAR_PLACEHOLDER = 17;
export function dialogCloseStreamFactory(documentRef, windowRef, _a, close$, destroy$, _b) {
    var nativeElement = _a.nativeElement;
    var dismissible = _b.dismissible;
    return dismissible
        ? merge(typedFromEvent(nativeElement, 'click').pipe(filter(isCurrentTarget)), typedFromEvent(documentRef, 'keydown').pipe(filter(function (_a) {
            var key = _a.key, target = _a.target;
            return key === 'Escape' &&
                target instanceof Element &&
                (!containsOrAfter(nativeElement, target) ||
                    nativeElement.contains(target));
        })), typedFromEvent(documentRef, 'mousedown').pipe(filter(function (_a) {
            var target = _a.target, clientX = _a.clientX;
            return target instanceof Element &&
                windowRef.innerWidth - clientX > SCROLLBAR_PLACEHOLDER &&
                !containsOrAfter(nativeElement, target);
        }), switchMapTo(typedFromEvent(documentRef, 'mouseup').pipe(take(1), filter(function (_a) {
            var target = _a.target;
            return target instanceof Element &&
                !containsOrAfter(nativeElement, target);
        })))), close$).pipe(takeUntil(destroy$))
        : close$;
}
export var TUI_DIALOG_CLOSE_STREAM = new InjectionToken('Dialogs closing stream');
export var TUI_DIALOG_PROVIDERS = [
    TuiDestroyService,
    {
        provide: TUI_DIALOG_CLOSE_STREAM,
        deps: [
            DOCUMENT,
            WINDOW,
            ElementRef,
            TUI_DIALOGS_CLOSE,
            TuiDestroyService,
            POLYMORPHEUS_CONTEXT,
        ],
        useFactory: dialogCloseStreamFactory,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGlhbG9nLyIsInNvdXJjZXMiOlsiZGlhbG9nLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBRSxjQUFjLEVBQVcsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFDSCxlQUFlLEVBQ2YsZUFBZSxFQUNmLGlCQUFpQixFQUVqQixjQUFjLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVwRSxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDL0MsMkJBQTJCLEVBQzNCO0lBQ0ksT0FBTyxFQUFFLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSztDQUN2QixDQUNKLENBQUM7QUFFRixJQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUVqQyxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLFdBQXFCLEVBQ3JCLFNBQWlCLEVBQ2pCLEVBQXdDLEVBQ3hDLE1BQXdCLEVBQ3hCLFFBQTBCLEVBQzFCLEVBQTREO1FBSDNELGdDQUFhO1FBR2IsNEJBQVc7SUFFWixPQUFPLFdBQVc7UUFDZCxDQUFDLENBQUMsS0FBSyxDQUNELGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUNwRSxjQUFjLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsTUFBTSxDQUNGLFVBQUMsRUFBYTtnQkFBWixZQUFHLEVBQUUsa0JBQU07WUFDVCxPQUFBLEdBQUcsS0FBSyxRQUFRO2dCQUNoQixNQUFNLFlBQVksT0FBTztnQkFDekIsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO29CQUNwQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBSG5DLENBR21DLENBQzFDLENBQ0osRUFDRCxjQUFjLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDekMsTUFBTSxDQUNGLFVBQUMsRUFBaUI7Z0JBQWhCLGtCQUFNLEVBQUUsb0JBQU87WUFDYixPQUFBLE1BQU0sWUFBWSxPQUFPO2dCQUN6QixTQUFTLENBQUMsVUFBVSxHQUFHLE9BQU8sR0FBRyxxQkFBcUI7Z0JBQ3RELENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7UUFGdkMsQ0FFdUMsQ0FDOUMsRUFDRCxXQUFXLENBQ1AsY0FBYyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxNQUFNLENBQ0YsVUFBQyxFQUFRO2dCQUFQLGtCQUFNO1lBQ0osT0FBQSxNQUFNLFlBQVksT0FBTztnQkFDekIsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQztRQUR2QyxDQUN1QyxDQUM5QyxDQUNKLENBQ0osQ0FDSixFQUNELE1BQU0sQ0FDVCxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3JELHdCQUF3QixDQUMzQixDQUFDO0FBQ0YsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQWU7SUFDNUMsaUJBQWlCO0lBQ2pCO1FBQ0ksT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxJQUFJLEVBQUU7WUFDRixRQUFRO1lBQ1IsTUFBTTtZQUNOLFVBQVU7WUFDVixpQkFBaUI7WUFDakIsaUJBQWlCO1lBQ2pCLG9CQUFvQjtTQUN2QjtRQUNELFVBQVUsRUFBRSx3QkFBd0I7S0FDdkM7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgY29udGFpbnNPckFmdGVyLFxuICAgIGlzQ3VycmVudFRhcmdldCxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlEaWFsb2csXG4gICAgdHlwZWRGcm9tRXZlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlEaWFsb2dPcHRpb25zfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9pbnRlcmZhY2VzJztcbmltcG9ydCB7UE9MWU1PUlBIRVVTX0NPTlRFWFR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0VNUFRZLCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgc3dpdGNoTWFwVG8sIHRha2UsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY29uc3QgVFVJX0RJQUxPR1NfQ0xPU0UgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTx1bmtub3duPj4oXG4gICAgJ0Egc3RyZWFtIHRvIGNsb3NlIGRpYWxvZ3MnLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogKCkgPT4gRU1QVFksXG4gICAgfSxcbik7XG5cbmNvbnN0IFNDUk9MTEJBUl9QTEFDRUhPTERFUiA9IDE3O1xuXG5leHBvcnQgZnVuY3Rpb24gZGlhbG9nQ2xvc2VTdHJlYW1GYWN0b3J5KFxuICAgIGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICB3aW5kb3dSZWY6IFdpbmRvdyxcbiAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIGNsb3NlJDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICB7ZGlzbWlzc2libGV9OiBUdWlEaWFsb2c8VHVpRGlhbG9nT3B0aW9uczx1bmtub3duPiwgdW5rbm93bj4sXG4pOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gZGlzbWlzc2libGVcbiAgICAgICAgPyBtZXJnZShcbiAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2NsaWNrJykucGlwZShmaWx0ZXIoaXNDdXJyZW50VGFyZ2V0KSksXG4gICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCAna2V5ZG93bicpLnBpcGUoXG4gICAgICAgICAgICAgICAgICBmaWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgKHtrZXksIHRhcmdldH0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9PT0gJ0VzY2FwZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoIWNvbnRhaW5zT3JBZnRlcihuYXRpdmVFbGVtZW50LCB0YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgdHlwZWRGcm9tRXZlbnQoZG9jdW1lbnRSZWYsICdtb3VzZWRvd24nKS5waXBlKFxuICAgICAgICAgICAgICAgICAgZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICh7dGFyZ2V0LCBjbGllbnRYfSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dSZWYuaW5uZXJXaWR0aCAtIGNsaWVudFggPiBTQ1JPTExCQVJfUExBQ0VIT0xERVIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIWNvbnRhaW5zT3JBZnRlcihuYXRpdmVFbGVtZW50LCB0YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCAnbW91c2V1cCcpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh7dGFyZ2V0fSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWNvbnRhaW5zT3JBZnRlcihuYXRpdmVFbGVtZW50LCB0YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBjbG9zZSQsXG4gICAgICAgICAgKS5waXBlKHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgICAgIDogY2xvc2UkO1xufVxuXG5leHBvcnQgY29uc3QgVFVJX0RJQUxPR19DTE9TRV9TVFJFQU0gPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTx1bmtub3duPj4oXG4gICAgJ0RpYWxvZ3MgY2xvc2luZyBzdHJlYW0nLFxuKTtcbmV4cG9ydCBjb25zdCBUVUlfRElBTE9HX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9ESUFMT0dfQ0xPU0VfU1RSRUFNLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBET0NVTUVOVCxcbiAgICAgICAgICAgIFdJTkRPVyxcbiAgICAgICAgICAgIEVsZW1lbnRSZWYsXG4gICAgICAgICAgICBUVUlfRElBTE9HU19DTE9TRSxcbiAgICAgICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICAgICAgUE9MWU1PUlBIRVVTX0NPTlRFWFQsXG4gICAgICAgIF0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IGRpYWxvZ0Nsb3NlU3RyZWFtRmFjdG9yeSxcbiAgICB9LFxuXTtcbiJdfQ==