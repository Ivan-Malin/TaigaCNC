import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_CLOSE_WORD } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
export var STATUS_ICON = {
    info: 'tuiIconInfo',
    success: 'tuiIconCheckCircle',
    error: 'tuiIconCancel',
    warning: 'tuiIconAttention',
};
// @bad TODO: Think about moving to kit
var TuiNotificationComponent = /** @class */ (function () {
    function TuiNotificationComponent(closeWord$) {
        this.closeWord$ = closeWord$;
        this.hasIcon = true;
        this.status = "info" /* Info */;
        this.close = new EventEmitter();
    }
    Object.defineProperty(TuiNotificationComponent.prototype, "icon", {
        get: function () {
            return STATUS_ICON[this.status];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiNotificationComponent.prototype, "hasClose", {
        get: function () {
            return !!this.close.observers.length;
        },
        enumerable: true,
        configurable: true
    });
    TuiNotificationComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TUI_CLOSE_WORD,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('class._has-icon'),
        tuiDefaultProp()
    ], TuiNotificationComponent.prototype, "hasIcon", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-status'),
        tuiDefaultProp()
    ], TuiNotificationComponent.prototype, "status", void 0);
    __decorate([
        Output()
    ], TuiNotificationComponent.prototype, "close", void 0);
    __decorate([
        HostBinding('class._has-close-button')
    ], TuiNotificationComponent.prototype, "hasClose", null);
    TuiNotificationComponent = __decorate([
        Component({
            selector: 'tui-notification',
            template: "<tui-svg\n    *ngIf=\"hasIcon\"\n    automation-id=\"tui-notification__icon\"\n    class=\"icon\"\n    [src]=\"icon\"\n></tui-svg>\n<div class=\"content\">\n    <ng-content></ng-content>\n</div>\n<button\n    *ngIf=\"hasClose\"\n    tuiIconButton\n    type=\"button\"\n    automation-id=\"tui-notification__close\"\n    size=\"xs\"\n    class=\"close\"\n    icon=\"tuiIconCloseLarge\"\n    appearance=\"icon\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;padding:13px 16px 11px;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);overflow:hidden}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;content:'';pointer-events:none}:host._has-close-button{padding-right:32px}:host._has-icon{padding-left:44px}:host[data-tui-host-status=info]{color:var(--tui-info-fill)}:host[data-tui-host-status=info]:after{background:var(--tui-info-bg)}:host[data-tui-host-status=success]{color:var(--tui-success-fill)}:host[data-tui-host-status=success]:after{background:var(--tui-success-bg)}:host[data-tui-host-status=error]{color:var(--tui-error-fill)}:host[data-tui-host-status=error]:after{background:var(--tui-error-bg)}:host[data-tui-host-status=warning]{color:var(--tui-warning-fill)}:host[data-tui-host-status=warning]:after{background:var(--tui-warning-bg)}.content{word-wrap:break-word;color:var(--tui-text-01)}.icon{position:absolute;top:0;left:16px;display:flex;width:16px;height:100%;max-height:48px;align-items:center}.close{position:absolute;top:10px;right:8px}"]
        }),
        __param(0, Inject(TUI_CLOSE_WORD))
    ], TuiNotificationComponent);
    return TuiNotificationComponent;
}());
export { TuiNotificationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvbm90aWZpY2F0aW9uLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRWhDLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBMkI7SUFDL0MsSUFBSSxFQUFFLGFBQWE7SUFDbkIsT0FBTyxFQUFFLG9CQUFvQjtJQUM3QixLQUFLLEVBQUUsZUFBZTtJQUN0QixPQUFPLEVBQUUsa0JBQWtCO0NBQzlCLENBQUM7QUFFRix1Q0FBdUM7QUFPdkM7SUFjSSxrQ0FBNkMsVUFBOEI7UUFBOUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFWM0UsWUFBTyxHQUFHLElBQUksQ0FBQztRQUtmLFdBQU0scUJBQXlDO1FBR3RDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBRW9DLENBQUM7SUFFL0Usc0JBQUksMENBQUk7YUFBUjtZQUNJLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLDhDQUFRO2FBQVo7WUFDSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7O2dCQVR3RCxVQUFVLHVCQUF0RCxNQUFNLFNBQUMsY0FBYzs7SUFWbEM7UUFIQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMsaUJBQWlCLENBQUM7UUFDOUIsY0FBYyxFQUFFOzZEQUNGO0lBS2Y7UUFIQyxLQUFLLEVBQUU7UUFDUCxXQUFXLENBQUMsMkJBQTJCLENBQUM7UUFDeEMsY0FBYyxFQUFFOzREQUM4QjtJQUcvQztRQURDLE1BQU0sRUFBRTsyREFDaUM7SUFTMUM7UUFEQyxXQUFXLENBQUMseUJBQXlCLENBQUM7NERBR3RDO0lBdkJRLHdCQUF3QjtRQU5wQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLHFmQUEyQztZQUUzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7U0FDbEQsQ0FBQztRQWVlLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO09BZDFCLHdCQUF3QixDQXdCcEM7SUFBRCwrQkFBQztDQUFBLEFBeEJELElBd0JDO1NBeEJZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlOb3RpZmljYXRpb259IGZyb20gJ0B0YWlnYS11aS9jb3JlL2VudW1zJztcbmltcG9ydCB7VFVJX0NMT1NFX1dPUkR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY29uc3QgU1RBVFVTX0lDT046IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgaW5mbzogJ3R1aUljb25JbmZvJyxcbiAgICBzdWNjZXNzOiAndHVpSWNvbkNoZWNrQ2lyY2xlJyxcbiAgICBlcnJvcjogJ3R1aUljb25DYW5jZWwnLFxuICAgIHdhcm5pbmc6ICd0dWlJY29uQXR0ZW50aW9uJyxcbn07XG5cbi8vIEBiYWQgVE9ETzogVGhpbmsgYWJvdXQgbW92aW5nIHRvIGtpdFxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktbm90aWZpY2F0aW9uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbm90aWZpY2F0aW9uLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL25vdGlmaWNhdGlvbi5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5vdGlmaWNhdGlvbkNvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9oYXMtaWNvbicpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBoYXNJY29uID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtdHVpLWhvc3Qtc3RhdHVzJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHN0YXR1czogVHVpTm90aWZpY2F0aW9uID0gVHVpTm90aWZpY2F0aW9uLkluZm87XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBjbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVFVJX0NMT1NFX1dPUkQpIHJlYWRvbmx5IGNsb3NlV29yZCQ6IE9ic2VydmFibGU8c3RyaW5nPikge31cblxuICAgIGdldCBpY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTVEFUVVNfSUNPTlt0aGlzLnN0YXR1c107XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5faGFzLWNsb3NlLWJ1dHRvbicpXG4gICAgZ2V0IGhhc0Nsb3NlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmNsb3NlLm9ic2VydmVycy5sZW5ndGg7XG4gICAgfVxufVxuIl19