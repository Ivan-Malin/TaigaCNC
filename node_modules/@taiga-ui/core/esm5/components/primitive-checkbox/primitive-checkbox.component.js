import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';
import { TUI_CHECKBOX_OPTIONS } from './checkbox-options';
// @dynamic
var TuiPrimitiveCheckboxComponent = /** @class */ (function () {
    function TuiPrimitiveCheckboxComponent(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.value = false;
    }
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "appearance", {
        get: function () {
            switch (this.value) {
                case false:
                    return this.options.appearances.unchecked;
                case true:
                    return this.options.appearances.checked;
                default:
                    return this.options.appearances.indeterminate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "empty", {
        get: function () {
            return this.value === false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "icon", {
        get: function () {
            return this.value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveCheckboxComponent.prototype, "context", {
        get: function () {
            return this.getContext(this.size);
        },
        enumerable: true,
        configurable: true
    });
    TuiPrimitiveCheckboxComponent.prototype.getContext = function ($implicit) {
        return { $implicit: $implicit };
    };
    TuiPrimitiveCheckboxComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_CHECKBOX_OPTIONS,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-size'),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "focused", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "hovered", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "pressed", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "invalid", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveCheckboxComponent.prototype, "value", void 0);
    __decorate([
        tuiPure
    ], TuiPrimitiveCheckboxComponent.prototype, "getContext", null);
    TuiPrimitiveCheckboxComponent = __decorate([
        Component({
            selector: 'tui-primitive-checkbox',
            template: "<tui-wrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focused]=\"focused\"\n    [hovered]=\"hovered\"\n    [pressed]=\"pressed\"\n    [invalid]=\"invalid\"\n>\n    <span polymorpheus-outlet [content]=\"icon\" [context]=\"context\">\n        <ng-template let-icon>\n            <tui-svg\n                class=\"mark\"\n                [class.mark_on]=\"!empty\"\n                [src]=\"icon\"\n            ></tui-svg>\n        </ng-template>\n    </span>\n</tui-wrapper>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;font-size:0}:host[data-tui-host-size='m']{width:16px;height:16px;border-radius:var(--tui-radius-xs)}:host[data-tui-host-size='l']{width:24px;height:24px;border-radius:var(--tui-radius-s)}.mark{transition-property:transform;transition-duration:.3s;transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.mark_on{transform:scale(1)}"]
        }),
        __param(0, Inject(TUI_CHECKBOX_OPTIONS))
    ], TuiPrimitiveCheckboxComponent);
    return TuiPrimitiveCheckboxComponent;
}());
export { TuiPrimitiveCheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvcHJpbWl0aXZlLWNoZWNrYm94LyIsInNvdXJjZXMiOlsicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF5QixjQUFjLEVBQUUsT0FBTyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRzlFLE9BQU8sRUFBa0Isb0JBQW9CLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUV6RSxXQUFXO0FBT1g7SUE4QkksdUNBQ21ELE9BQXdCO1FBQXhCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBM0IzRSxTQUFJLEdBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFJbkMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUlqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBSWhCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFJaEIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUloQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBSWhCLFVBQUssR0FBbUIsS0FBSyxDQUFDO0lBSTNCLENBQUM7SUFFSixzQkFBSSxxREFBVTthQUFkO1lBQ0ksUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNoQixLQUFLLEtBQUs7b0JBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7Z0JBQzlDLEtBQUssSUFBSTtvQkFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztnQkFDNUM7b0JBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7YUFDckQ7UUFDTCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGdEQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0NBQUk7YUFBUjtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJO2dCQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYTtnQkFDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGtEQUFPO2FBQVg7WUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBR08sa0RBQVUsR0FBbEIsVUFBbUIsU0FBbUI7UUFDbEMsT0FBTyxFQUFDLFNBQVMsV0FBQSxFQUFDLENBQUM7SUFDdkIsQ0FBQzs7Z0RBL0JJLE1BQU0sU0FBQyxvQkFBb0I7O0lBM0JoQztRQUhDLEtBQUssRUFBRTtRQUNQLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQztRQUN0QyxjQUFjLEVBQUU7K0RBQ2tCO0lBSW5DO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO21FQUNBO0lBSWpCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO2tFQUNEO0lBSWhCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO2tFQUNEO0lBSWhCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO2tFQUNEO0lBSWhCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO2tFQUNEO0lBSWhCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO2dFQUNhO0lBZ0M5QjtRQURDLE9BQU87bUVBR1A7SUE5RFEsNkJBQTZCO1FBTnpDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx3QkFBd0I7WUFDbEMsZ2dCQUFpRDtZQUVqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7U0FDbEQsQ0FBQztRQWdDTyxXQUFBLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO09BL0J4Qiw2QkFBNkIsQ0ErRHpDO0lBQUQsb0NBQUM7Q0FBQSxBQS9ERCxJQStEQztTQS9EWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlDb250ZXh0V2l0aEltcGxpY2l0LCB0dWlEZWZhdWx0UHJvcCwgdHVpUHVyZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0NoZWNrYm94T3B0aW9ucywgVFVJX0NIRUNLQk9YX09QVElPTlN9IGZyb20gJy4vY2hlY2tib3gtb3B0aW9ucyc7XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcmltaXRpdmUtY2hlY2tib3gnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcmltaXRpdmUtY2hlY2tib3gudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJpbWl0aXZlLWNoZWNrYm94LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJpbWl0aXZlQ2hlY2tib3hDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtdHVpLWhvc3Qtc2l6ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplTCA9IHRoaXMub3B0aW9ucy5zaXplO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgZm9jdXNlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGhvdmVyZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBwcmVzc2VkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaW52YWxpZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHZhbHVlOiBib29sZWFuIHwgbnVsbCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NIRUNLQk9YX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogQ2hlY2tib3hPcHRpb25zLFxuICAgICkge31cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHN3aXRjaCAodGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGVhcmFuY2VzLnVuY2hlY2tlZDtcbiAgICAgICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGVhcmFuY2VzLmNoZWNrZWQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZXMuaW5kZXRlcm1pbmF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBlbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IGZhbHNlO1xuICAgIH1cblxuICAgIGdldCBpY29uKCk6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlTaXplTD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IG51bGxcbiAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLmljb25zLmluZGV0ZXJtaW5hdGVcbiAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLmljb25zLmNoZWNrZWQ7XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRleHQoKTogVHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlTaXplTD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb250ZXh0KHRoaXMuc2l6ZSk7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcml2YXRlIGdldENvbnRleHQoJGltcGxpY2l0OiBUdWlTaXplTCk6IFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8VHVpU2l6ZUw+IHtcbiAgICAgICAgcmV0dXJuIHskaW1wbGljaXR9O1xuICAgIH1cbn1cbiJdfQ==