import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, inRange, TUI_FIRST_DAY, TUI_LAST_DAY, tuiDefaultProp, TuiMonth, TuiMonthRange, TuiYear, } from '@taiga-ui/cdk';
var LIMIT = 100;
var ITEMS_IN_ROW = 4;
var TuiPrimitiveYearPickerComponent = /** @class */ (function () {
    function TuiPrimitiveYearPickerComponent() {
        this.value = null;
        this.initialItem = TuiMonth.currentLocal();
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.yearClick = new EventEmitter();
        this.hoveredItem = null;
        this.pressedItem = null;
        this.currentYear = TuiMonth.currentLocal().year;
    }
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "isSingle", {
        get: function () {
            var value = this.value;
            return !!value && this.isRange(value) && value.from.yearSame(value.to);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "rows", {
        get: function () {
            return Math.ceil((this.calculatedMax - this.calculatedMin) / ITEMS_IN_ROW);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "calculatedMin", {
        get: function () {
            var initial = this.initialItem.year - LIMIT;
            return this.min.year > initial ? this.min.year : initial;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiPrimitiveYearPickerComponent.prototype, "calculatedMax", {
        get: function () {
            var initial = this.initialItem.year + LIMIT;
            return this.max.year < initial ? this.max.year + 1 : initial;
        },
        enumerable: true,
        configurable: true
    });
    TuiPrimitiveYearPickerComponent.prototype.isRange = function (item) {
        return item instanceof TuiMonthRange;
    };
    TuiPrimitiveYearPickerComponent.prototype.scrollItemIntoView = function (item) {
        return this.initialItem.year === item;
    };
    TuiPrimitiveYearPickerComponent.prototype.getItem = function (rowIndex, colIndex) {
        return rowIndex * ITEMS_IN_ROW + colIndex + this.calculatedMin;
    };
    TuiPrimitiveYearPickerComponent.prototype.getItemState = function (item) {
        var _a = this, disabledItemHandler = _a.disabledItemHandler, max = _a.max, pressedItem = _a.pressedItem, hoveredItem = _a.hoveredItem;
        if (max.year < item ||
            (disabledItemHandler !== ALWAYS_FALSE_HANDLER && disabledItemHandler(item))) {
            return "disabled" /* Disabled */;
        }
        if (pressedItem === item) {
            return "pressed" /* Pressed */;
        }
        if (hoveredItem === item) {
            return "hovered" /* Hovered */;
        }
        return null;
    };
    TuiPrimitiveYearPickerComponent.prototype.getItemRange = function (item) {
        var _a = this, value = _a.value, hoveredItem = _a.hoveredItem;
        if (value === null) {
            return null;
        }
        if (value instanceof TuiYear) {
            return value.year === item ? "single" /* Single */ : null;
        }
        if ((value.from.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem > value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem < value.from.year &&
                value.from.yearSame(value.to))) {
            return "start" /* Start */;
        }
        if ((value.to.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem < value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem > value.from.year &&
                value.from.yearSame(value.to))) {
            return "end" /* End */;
        }
        return value.from.yearSame(value.to) && value.from.year === item
            ? "single" /* Single */
            : null;
    };
    TuiPrimitiveYearPickerComponent.prototype.itemIsToday = function (item) {
        return this.currentYear === item;
    };
    TuiPrimitiveYearPickerComponent.prototype.itemIsInterval = function (item) {
        var _a = this, value = _a.value, hoveredItem = _a.hoveredItem;
        if (value === null || !this.isRange(value)) {
            return false;
        }
        if (!value.from.yearSame(value.to)) {
            return value.from.year <= item && value.to.year > item;
        }
        if (hoveredItem === null || value.from.year === hoveredItem) {
            return false;
        }
        return inRange(item, Math.min(value.from.year, hoveredItem), Math.max(value.from.year, hoveredItem));
    };
    TuiPrimitiveYearPickerComponent.prototype.onItemHovered = function (hovered, item) {
        this.updateHoveredItem(hovered, item);
    };
    TuiPrimitiveYearPickerComponent.prototype.onItemPressed = function (pressed, item) {
        this.updatePressedItem(pressed, item);
    };
    TuiPrimitiveYearPickerComponent.prototype.onItemClick = function (item) {
        this.yearClick.emit(new TuiYear(item));
    };
    TuiPrimitiveYearPickerComponent.prototype.updateHoveredItem = function (hovered, item) {
        this.hoveredItem = hovered ? item : null;
    };
    TuiPrimitiveYearPickerComponent.prototype.updatePressedItem = function (pressed, item) {
        this.pressedItem = pressed ? item : null;
    };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "initialItem", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiPrimitiveYearPickerComponent.prototype, "disabledItemHandler", void 0);
    __decorate([
        Output()
    ], TuiPrimitiveYearPickerComponent.prototype, "yearClick", void 0);
    __decorate([
        HostBinding('class._single')
    ], TuiPrimitiveYearPickerComponent.prototype, "isSingle", null);
    TuiPrimitiveYearPickerComponent = __decorate([
        Component({
            selector: 'tui-primitive-year-picker',
            template: "<div\n    *tuiRepeatTimes=\"let rowIndex of rows\"\n    automation-id=\"tui-primitive-year-picker__row\"\n    class=\"row\"\n>\n    <ng-container *tuiRepeatTimes=\"let colIndex of 4\">\n        <div\n            *tuiLet=\"getItem(rowIndex, colIndex) as item\"\n            automation-id=\"tui-primitive-year-picker__cell\"\n            class=\"cell\"\n            [class.cell_today]=\"itemIsToday(item)\"\n            [class.cell_interval]=\"itemIsInterval(item)\"\n            [attr.data-tui-element-range]=\"getItemRange(item)\"\n            [attr.data-tui-element-state]=\"getItemState(item)\"\n            [tuiScrollIntoView]=\"scrollItemIntoView(item)\"\n            (tuiHoveredChange)=\"onItemHovered($event, item)\"\n            (tuiPressedChange)=\"onItemPressed($event, item)\"\n            (click)=\"onItemClick(item)\"\n        >\n            <div class=\"item\">{{item}}</div>\n        </div>\n    </ng-container>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{font:var(--tui-font-text-m);display:block}.row{position:relative;z-index:0;display:flex;justify-content:space-between;height:36px;margin:14px 0}.item{position:relative;flex:1;line-height:32px;border-radius:var(--tui-radius-m)}.item:after,.item:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.cell{position:relative;display:flex;align-items:center;justify-content:center;width:63px;text-align:center;outline:0;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent}.cell:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.cell_today:after{position:absolute;left:50%;transform:translate(-50%,0);content:'';bottom:5px;height:2px;width:12px;border-radius:6px;background-color:var(--tui-text-02)}.cell_interval:before{background:var(--tui-base-02)}:host._single .cell_interval:before{background:var(--tui-secondary-hover)}.cell_interval:not(:last-child):before{right:-63px}.cell_interval:last-child:first-child:before{right:0}.cell_interval:first-child>.item{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.cell_interval:last-child>.item{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.cell_interval>.item{border-radius:0}.cell[data-tui-element-range]:after{background-color:var(--tui-primary-text)}.cell[data-tui-element-range]>.item{color:var(--tui-primary-text)}.cell[data-tui-element-range]>.item:after,.cell[data-tui-element-range]>.item:before{background-color:var(--tui-primary)}.cell[data-tui-element-range][data-tui-element-state=hovered]>.item:after,.cell[data-tui-element-range][data-tui-element-state=hovered]>.item:before{background-color:var(--tui-primary-hover)}.cell[data-tui-element-range][data-tui-element-state=pressed]>.item:after,.cell[data-tui-element-range][data-tui-element-state=pressed]>.item:before{background-color:var(--tui-primary-active)}.cell[data-tui-element-range=end]>.item:before{left:4px}.cell[data-tui-element-range=end]>.item:after{left:-32px;right:100%;transform:translateX(23px) scaleY(.6) scaleX(.4) rotate(45deg)}.cell[data-tui-element-range=start]>.item:before{right:4px}.cell[data-tui-element-range=start]>.item:after{left:100%;right:-32px;transform:translateX(-23px) scaleY(.6) scaleX(.4) rotate(45deg)}.cell[data-tui-element-state=disabled]{pointer-events:none}.cell[data-tui-element-state=disabled]>.item{opacity:.36}.cell[data-tui-element-state=hovered]:hover:not([data-tui-element-range])>.item{background-color:var(--tui-secondary-hover)}.cell[data-tui-element-state=pressed]:hover:not([data-tui-element-range])>.item{background-color:var(--tui-secondary-active)}:host{width:252px}.row:first-child{margin-top:0}.row:last-child{margin-bottom:0}"]
        })
    ], TuiPrimitiveYearPickerComponent);
    return TuiPrimitiveYearPickerComponent;
}());
export { TuiPrimitiveYearPickerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXllYXItcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvcHJpbWl0aXZlLXllYXItcGlja2VyLyIsInNvdXJjZXMiOlsicHJpbWl0aXZlLXllYXItcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsT0FBTyxFQUNQLGFBQWEsRUFDYixZQUFZLEVBR1osY0FBYyxFQUNkLFFBQVEsRUFDUixhQUFhLEVBQ2IsT0FBTyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNsQixJQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFRdkI7SUFBQTtRQUdJLFVBQUssR0FBaUMsSUFBSSxDQUFDO1FBSTNDLGdCQUFXLEdBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBSXRDLFFBQUcsR0FBWSxhQUFhLENBQUM7UUFJN0IsUUFBRyxHQUFZLFlBQVksQ0FBQztRQUk1Qix3QkFBbUIsR0FBOEIsb0JBQW9CLENBQUM7UUFHN0QsY0FBUyxHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO1FBRXZELGdCQUFXLEdBQWtCLElBQUksQ0FBQztRQUVsQyxnQkFBVyxHQUFrQixJQUFJLENBQUM7UUFFbEMsZ0JBQVcsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDO0lBbUp2RCxDQUFDO0lBaEpHLHNCQUFJLHFEQUFRO2FBQVo7WUFDVyxJQUFBLGtCQUFLLENBQVM7WUFFckIsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FB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UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdDLENBQUM7SUFFTywyREFBaUIsR0FBekIsVUFBMEIsT0FBZ0IsRUFBRSxJQUFZO1FBQ3BELElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM3QyxDQUFDO0lBM0tEO1FBRkMsS0FBSyxFQUFFO1FBQ1AsY0FBYyxFQUFFO2tFQUMwQjtJQUkzQztRQUZDLEtBQUssRUFBRTtRQUNQLGNBQWMsRUFBRTt3RUFDcUI7SUFJdEM7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7Z0VBQ1k7SUFJN0I7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7Z0VBQ1c7SUFJNUI7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7Z0ZBQ3FEO0lBR3RFO1FBREMsTUFBTSxFQUFFO3NFQUNzRDtJQVMvRDtRQURDLFdBQVcsQ0FBQyxlQUFlLENBQUM7bUVBSzVCO0lBbkNRLCtCQUErQjtRQU4zQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLG03QkFBb0Q7WUFFcEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2xELENBQUM7T0FDVywrQkFBK0IsQ0ErSzNDO0lBQUQsc0NBQUM7Q0FBQSxBQS9LRCxJQStLQztTQS9LWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQUxXQVlTX0ZBTFNFX0hBTkRMRVIsXG4gICAgaW5SYW5nZSxcbiAgICBUVUlfRklSU1RfREFZLFxuICAgIFRVSV9MQVNUX0RBWSxcbiAgICBUdWlCb29sZWFuSGFuZGxlcixcbiAgICBUdWlEYXlSYW5nZSxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICBUdWlNb250aCxcbiAgICBUdWlNb250aFJhbmdlLFxuICAgIFR1aVllYXIsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlJbnRlcmFjdGl2ZVN0YXRlLCBUdWlSYW5nZVN0YXRlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9lbnVtcyc7XG5cbmNvbnN0IExJTUlUID0gMTAwO1xuY29uc3QgSVRFTVNfSU5fUk9XID0gNDtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJpbWl0aXZlLXllYXItcGlja2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJpbWl0aXZlLXllYXItcGlja2VyLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3ByaW1pdGl2ZS15ZWFyLXBpY2tlci5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZVllYXJQaWNrZXJDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICB2YWx1ZTogVHVpWWVhciB8IFR1aURheVJhbmdlIHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaW5pdGlhbEl0ZW0gPSBUdWlNb250aC5jdXJyZW50TG9jYWwoKTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtaW46IFR1aVllYXIgPSBUVUlfRklSU1RfREFZO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1heDogVHVpWWVhciA9IFRVSV9MQVNUX0RBWTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZEl0ZW1IYW5kbGVyOiBUdWlCb29sZWFuSGFuZGxlcjxudW1iZXI+ID0gQUxXQVlTX0ZBTFNFX0hBTkRMRVI7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB5ZWFyQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPFR1aVllYXIgfCBUdWlEYXlSYW5nZT4oKTtcblxuICAgIHByaXZhdGUgaG92ZXJlZEl0ZW06IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBwcmVzc2VkSXRlbTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRZZWFyID0gVHVpTW9udGguY3VycmVudExvY2FsKCkueWVhcjtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX3NpbmdsZScpXG4gICAgZ2V0IGlzU2luZ2xlKCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB7dmFsdWV9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gISF2YWx1ZSAmJiB0aGlzLmlzUmFuZ2UodmFsdWUpICYmIHZhbHVlLmZyb20ueWVhclNhbWUodmFsdWUudG8pO1xuICAgIH1cblxuICAgIGdldCByb3dzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKHRoaXMuY2FsY3VsYXRlZE1heCAtIHRoaXMuY2FsY3VsYXRlZE1pbikgLyBJVEVNU19JTl9ST1cpO1xuICAgIH1cblxuICAgIGdldCBjYWxjdWxhdGVkTWluKCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGluaXRpYWwgPSB0aGlzLmluaXRpYWxJdGVtLnllYXIgLSBMSU1JVDtcblxuICAgICAgICByZXR1cm4gdGhpcy5taW4ueWVhciA+IGluaXRpYWwgPyB0aGlzLm1pbi55ZWFyIDogaW5pdGlhbDtcbiAgICB9XG5cbiAgICBnZXQgY2FsY3VsYXRlZE1heCgpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBpbml0aWFsID0gdGhpcy5pbml0aWFsSXRlbS55ZWFyICsgTElNSVQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWF4LnllYXIgPCBpbml0aWFsID8gdGhpcy5tYXgueWVhciArIDEgOiBpbml0aWFsO1xuICAgIH1cblxuICAgIGlzUmFuZ2UoaXRlbTogVHVpTW9udGhSYW5nZSB8IFR1aVllYXIpOiBpdGVtIGlzIFR1aU1vbnRoUmFuZ2Uge1xuICAgICAgICByZXR1cm4gaXRlbSBpbnN0YW5jZW9mIFR1aU1vbnRoUmFuZ2U7XG4gICAgfVxuXG4gICAgc2Nyb2xsSXRlbUludG9WaWV3KGl0ZW06IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsSXRlbS55ZWFyID09PSBpdGVtO1xuICAgIH1cblxuICAgIGdldEl0ZW0ocm93SW5kZXg6IG51bWJlciwgY29sSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiByb3dJbmRleCAqIElURU1TX0lOX1JPVyArIGNvbEluZGV4ICsgdGhpcy5jYWxjdWxhdGVkTWluO1xuICAgIH1cblxuICAgIGdldEl0ZW1TdGF0ZShpdGVtOiBudW1iZXIpOiBUdWlJbnRlcmFjdGl2ZVN0YXRlIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHtkaXNhYmxlZEl0ZW1IYW5kbGVyLCBtYXgsIHByZXNzZWRJdGVtLCBob3ZlcmVkSXRlbX0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIG1heC55ZWFyIDwgaXRlbSB8fFxuICAgICAgICAgICAgKGRpc2FibGVkSXRlbUhhbmRsZXIgIT09IEFMV0FZU19GQUxTRV9IQU5ETEVSICYmIGRpc2FibGVkSXRlbUhhbmRsZXIoaXRlbSkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIFR1aUludGVyYWN0aXZlU3RhdGUuRGlzYWJsZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJlc3NlZEl0ZW0gPT09IGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLlByZXNzZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaG92ZXJlZEl0ZW0gPT09IGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLkhvdmVyZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRJdGVtUmFuZ2UoaXRlbTogbnVtYmVyKTogVHVpUmFuZ2VTdGF0ZSB8IG51bGwge1xuICAgICAgICBjb25zdCB7dmFsdWUsIGhvdmVyZWRJdGVtfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFR1aVllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS55ZWFyID09PSBpdGVtID8gVHVpUmFuZ2VTdGF0ZS5TaW5nbGUgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHZhbHVlLmZyb20ueWVhciA9PT0gaXRlbSAmJiAhdmFsdWUuZnJvbS55ZWFyU2FtZSh2YWx1ZS50bykpIHx8XG4gICAgICAgICAgICAoaG92ZXJlZEl0ZW0gIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSA+IHZhbHVlLmZyb20ueWVhciAmJlxuICAgICAgICAgICAgICAgIHZhbHVlLmZyb20ueWVhciA9PT0gaXRlbSAmJlxuICAgICAgICAgICAgICAgIHZhbHVlLmZyb20ueWVhclNhbWUodmFsdWUudG8pKSB8fFxuICAgICAgICAgICAgKGhvdmVyZWRJdGVtICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgaG92ZXJlZEl0ZW0gPT09IGl0ZW0gJiZcbiAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSA8IHZhbHVlLmZyb20ueWVhciAmJlxuICAgICAgICAgICAgICAgIHZhbHVlLmZyb20ueWVhclNhbWUodmFsdWUudG8pKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlSYW5nZVN0YXRlLlN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHZhbHVlLnRvLnllYXIgPT09IGl0ZW0gJiYgIXZhbHVlLmZyb20ueWVhclNhbWUodmFsdWUudG8pKSB8fFxuICAgICAgICAgICAgKGhvdmVyZWRJdGVtICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgaG92ZXJlZEl0ZW0gPCB2YWx1ZS5mcm9tLnllYXIgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5mcm9tLnllYXIgPT09IGl0ZW0gJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5mcm9tLnllYXJTYW1lKHZhbHVlLnRvKSkgfHxcbiAgICAgICAgICAgIChob3ZlcmVkSXRlbSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGhvdmVyZWRJdGVtID09PSBpdGVtICYmXG4gICAgICAgICAgICAgICAgaG92ZXJlZEl0ZW0gPiB2YWx1ZS5mcm9tLnllYXIgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5mcm9tLnllYXJTYW1lKHZhbHVlLnRvKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gVHVpUmFuZ2VTdGF0ZS5FbmQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUuZnJvbS55ZWFyU2FtZSh2YWx1ZS50bykgJiYgdmFsdWUuZnJvbS55ZWFyID09PSBpdGVtXG4gICAgICAgICAgICA/IFR1aVJhbmdlU3RhdGUuU2luZ2xlXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgaXRlbUlzVG9kYXkoaXRlbTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRZZWFyID09PSBpdGVtO1xuICAgIH1cblxuICAgIGl0ZW1Jc0ludGVydmFsKGl0ZW06IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB7dmFsdWUsIGhvdmVyZWRJdGVtfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8ICF0aGlzLmlzUmFuZ2UodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlLmZyb20ueWVhclNhbWUodmFsdWUudG8pKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuZnJvbS55ZWFyIDw9IGl0ZW0gJiYgdmFsdWUudG8ueWVhciA+IGl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaG92ZXJlZEl0ZW0gPT09IG51bGwgfHwgdmFsdWUuZnJvbS55ZWFyID09PSBob3ZlcmVkSXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluUmFuZ2UoXG4gICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgTWF0aC5taW4odmFsdWUuZnJvbS55ZWFyLCBob3ZlcmVkSXRlbSksXG4gICAgICAgICAgICBNYXRoLm1heCh2YWx1ZS5mcm9tLnllYXIsIGhvdmVyZWRJdGVtKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvbkl0ZW1Ib3ZlcmVkKGhvdmVyZWQ6IGJvb2xlYW4sIGl0ZW06IG51bWJlcikge1xuICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyZWRJdGVtKGhvdmVyZWQsIGl0ZW0pO1xuICAgIH1cblxuICAgIG9uSXRlbVByZXNzZWQocHJlc3NlZDogYm9vbGVhbiwgaXRlbTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUHJlc3NlZEl0ZW0ocHJlc3NlZCwgaXRlbSk7XG4gICAgfVxuXG4gICAgb25JdGVtQ2xpY2soaXRlbTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMueWVhckNsaWNrLmVtaXQobmV3IFR1aVllYXIoaXRlbSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlSG92ZXJlZEl0ZW0oaG92ZXJlZDogYm9vbGVhbiwgaXRlbTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuaG92ZXJlZEl0ZW0gPSBob3ZlcmVkID8gaXRlbSA6IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVQcmVzc2VkSXRlbShwcmVzc2VkOiBib29sZWFuLCBpdGVtOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wcmVzc2VkSXRlbSA9IHByZXNzZWQgPyBpdGVtIDogbnVsbDtcbiAgICB9XG59XG4iXX0=