import { __decorate, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Inject, Optional, } from '@angular/core';
import { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';
import { TUI_DIALOGS, TUI_IS_MOBILE, tuiAssert } from '@taiga-ui/cdk';
import { tuiFadeIn } from '@taiga-ui/core/animations';
import { VERSION } from '@taiga-ui/core/constants';
import { TuiNotificationsHostComponent } from '@taiga-ui/core/modules/notifications';
import { TUI_ASSERT_ENABLED } from '@taiga-ui/core/tokens';
import { SilentEventPlugin } from '@tinkoff/ng-event-plugins';
import { merge, of } from 'rxjs';
import { map } from 'rxjs/operators';
// @dynamic
var TuiRootComponent = /** @class */ (function () {
    function TuiRootComponent(elementRef, dialogs, notificationsHost, isMobile, plugins, enabled) {
        this.elementRef = elementRef;
        this.dialogs = dialogs;
        this.notificationsHost = notificationsHost;
        this.isMobile = isMobile;
        this.scrollbars$ = this.dialogs && !this.isMobile
            ? merge.apply(void 0, __spread(this.dialogs)).pipe(map(function (_a) {
                var length = _a.length;
                return !length;
            }))
            : of(!this.isMobile);
        tuiAssert.enabled = enabled;
        tuiAssert.assert(!(plugins[0] instanceof SilentEventPlugin), 'PlatformBrowser or PlatformServer modules must come before TuiRootModule in your main module');
    }
    TuiRootComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TUI_DIALOGS,] }] },
        { type: TuiNotificationsHostComponent, decorators: [{ type: Optional }, { type: Inject, args: [TuiNotificationsHostComponent,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_ASSERT_ENABLED,] }] }
    ]; };
    TuiRootComponent = __decorate([
        Component({
            selector: 'tui-root',
            template: "<tui-scroll-controls\n    *ngIf=\"scrollbars$ | async\"\n    class=\"scrollbar\"\n></tui-scroll-controls>\n<tui-svg-defs-host></tui-svg-defs-host>\n<tui-portal-host>\n    <div class=\"content\">\n        <ng-content></ng-content>\n    </div>\n    <tui-dialog-host *ngIf=\"dialogs && dialogs.length\"></tui-dialog-host>\n    <ng-content select=\"tuiOverDialogs\"></ng-content>\n    <ng-container\n        *ngIf=\"notificationsHost\"\n        [ngComponentOutlet]=\"notificationsHost\"\n    ></ng-container>\n    <ng-content select=\"tuiOverNotifications\"></ng-content>\n</tui-portal-host>\n<ng-content select=\"tuiOverPortals\"></ng-content>\n<tui-hints-host></tui-hints-host>\n<ng-content select=\"tuiOverHints\"></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                'data-tui-version': VERSION,
            },
            animations: [tuiFadeIn],
            styles: [":host{position:relative;display:block;flex:1}.scrollbar{position:fixed;top:0;left:0;bottom:0;right:0;margin:0}.content{position:relative;z-index:0;height:100%}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Optional()),
        __param(1, Inject(TUI_DIALOGS)),
        __param(2, Optional()),
        __param(2, Inject(TuiNotificationsHostComponent)),
        __param(3, Inject(TUI_IS_MOBILE)),
        __param(4, Inject(EVENT_MANAGER_PLUGINS)),
        __param(5, Inject(TUI_ASSERT_ENABLED))
    ], TuiRootComponent);
    return TuiRootComponent;
}());
export { TuiRootComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3Jvb3QvIiwic291cmNlcyI6WyJyb290LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDakQsT0FBTyxFQUFDLDZCQUE2QixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDbkYsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFDLEtBQUssRUFBYyxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLFdBQVc7QUFXWDtJQU1JLDBCQUNpQyxVQUFtQyxFQUd2RCxPQUF5RCxFQUd6RCxpQkFBZ0QsRUFDakIsUUFBaUIsRUFDMUIsT0FBMkIsRUFDOUIsT0FBZ0I7UUFUZixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUd2RCxZQUFPLEdBQVAsT0FBTyxDQUFrRDtRQUd6RCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQStCO1FBQ2pCLGFBQVEsR0FBUixRQUFRLENBQVM7UUFicEQsZ0JBQVcsR0FDaEIsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQzFCLENBQUMsQ0FBQyxLQUFLLHdCQUFJLElBQUksQ0FBQyxPQUFPLEdBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQVE7b0JBQVAsa0JBQU07Z0JBQU0sT0FBQSxDQUFDLE1BQU07WUFBUCxDQUFPLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBY3pCLFNBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQzVCLFNBQVMsQ0FBQyxNQUFNLENBQ1osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxpQkFBaUIsQ0FBQyxFQUMxQyw4RkFBOEYsQ0FDakcsQ0FBQztJQUNOLENBQUM7O2dCQWhCNEMsVUFBVSx1QkFBbEQsTUFBTSxTQUFDLFVBQVU7Z0RBQ2pCLFFBQVEsWUFDUixNQUFNLFNBQUMsV0FBVztnQkFJUyw2QkFBNkIsdUJBRnhELFFBQVEsWUFDUixNQUFNLFNBQUMsNkJBQTZCOzhDQUVwQyxNQUFNLFNBQUMsYUFBYTtnREFDcEIsTUFBTSxTQUFDLHFCQUFxQjs4Q0FDNUIsTUFBTSxTQUFDLGtCQUFrQjs7SUFoQnJCLGdCQUFnQjtRQVY1QixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsVUFBVTtZQUNwQixvdUJBQWlDO1lBRWpDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLElBQUksRUFBRTtnQkFDRixrQkFBa0IsRUFBRSxPQUFPO2FBQzlCO1lBQ0QsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDOztTQUMxQixDQUFDO1FBUU8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRW5CLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFDVixXQUFBLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1FBRXJDLFdBQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ3JCLFdBQUEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDN0IsV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtPQWhCdEIsZ0JBQWdCLENBd0I1QjtJQUFELHVCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F4QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3QsXG4gICAgT3B0aW9uYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFVkVOVF9NQU5BR0VSX1BMVUdJTlN9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtUVUlfRElBTE9HUywgVFVJX0lTX01PQklMRSwgdHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7dHVpRmFkZUlufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hbmltYXRpb25zJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCB7VHVpTm90aWZpY2F0aW9uc0hvc3RDb21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL21vZHVsZXMvbm90aWZpY2F0aW9ucyc7XG5pbXBvcnQge1RVSV9BU1NFUlRfRU5BQkxFRH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7U2lsZW50RXZlbnRQbHVnaW59IGZyb20gJ0B0aW5rb2ZmL25nLWV2ZW50LXBsdWdpbnMnO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gQGR5bmFtaWNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXJvb3QnLFxuICAgIHRlbXBsYXRlVXJsOiAncm9vdC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9yb290LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0OiB7XG4gICAgICAgICdkYXRhLXR1aS12ZXJzaW9uJzogVkVSU0lPTixcbiAgICB9LFxuICAgIGFuaW1hdGlvbnM6IFt0dWlGYWRlSW5dLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlSb290Q29tcG9uZW50IHtcbiAgICByZWFkb25seSBzY3JvbGxiYXJzJCA9XG4gICAgICAgIHRoaXMuZGlhbG9ncyAmJiAhdGhpcy5pc01vYmlsZVxuICAgICAgICAgICAgPyBtZXJnZSguLi50aGlzLmRpYWxvZ3MpLnBpcGUobWFwKCh7bGVuZ3RofSkgPT4gIWxlbmd0aCkpXG4gICAgICAgICAgICA6IG9mKCF0aGlzLmlzTW9iaWxlKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFRVSV9ESUFMT0dTKVxuICAgICAgICByZWFkb25seSBkaWFsb2dzOiByZWFkb25seSBPYnNlcnZhYmxlPHJlYWRvbmx5IHVua25vd25bXT5bXSB8IG51bGwsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpTm90aWZpY2F0aW9uc0hvc3RDb21wb25lbnQpXG4gICAgICAgIHJlYWRvbmx5IG5vdGlmaWNhdGlvbnNIb3N0OiBUdWlOb3RpZmljYXRpb25zSG9zdENvbXBvbmVudCxcbiAgICAgICAgQEluamVjdChUVUlfSVNfTU9CSUxFKSBwcml2YXRlIHJlYWRvbmx5IGlzTW9iaWxlOiBib29sZWFuLFxuICAgICAgICBASW5qZWN0KEVWRU5UX01BTkFHRVJfUExVR0lOUykgcGx1Z2luczogcmVhZG9ubHkgdW5rbm93bltdLFxuICAgICAgICBASW5qZWN0KFRVSV9BU1NFUlRfRU5BQkxFRCkgZW5hYmxlZDogYm9vbGVhbixcbiAgICApIHtcbiAgICAgICAgdHVpQXNzZXJ0LmVuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgIShwbHVnaW5zWzBdIGluc3RhbmNlb2YgU2lsZW50RXZlbnRQbHVnaW4pLFxuICAgICAgICAgICAgJ1BsYXRmb3JtQnJvd3NlciBvciBQbGF0Zm9ybVNlcnZlciBtb2R1bGVzIG11c3QgY29tZSBiZWZvcmUgVHVpUm9vdE1vZHVsZSBpbiB5b3VyIG1haW4gbW9kdWxlJyxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=