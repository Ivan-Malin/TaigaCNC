import { __decorate, __param, __read } from "tslib";
import { DOCUMENT, ViewportScroller } from '@angular/common';
import { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { POLLING_TIME, preventDefault, TuiDestroyService, tuiZonefree, typedFromEvent, } from '@taiga-ui/cdk';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { fromEvent, interval, merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil } from 'rxjs/operators';
var MIN_WIDTH = 24;
// @bad TODO: add support for window scroll control
// @dynamic
var TuiScrollbarDirective = /** @class */ (function () {
    function TuiScrollbarDirective(ngZone, renderer, destroy$, container, documentRef, windowRef, elementRef, viewportScroller) {
        var _this = this;
        this.container = container;
        this.documentRef = documentRef;
        this.windowRef = windowRef;
        this.elementRef = elementRef;
        this.viewportScroller = viewportScroller;
        this.tuiScrollbar = "vertical" /* Vertical */;
        var nativeElement = this.elementRef.nativeElement;
        var mousedown$ = typedFromEvent(nativeElement, 'mousedown');
        var mousemove$ = typedFromEvent(this.documentRef, 'mousemove');
        var mouseup$ = typedFromEvent(this.documentRef, 'mouseup');
        mousedown$
            .pipe(preventDefault(), switchMap(function (event) {
            var rect = event.currentTarget.getBoundingClientRect();
            var vertical = getOffsetVertical(event, rect);
            var horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(function (event) { return _this.getScrolled(event, vertical, horizontal); }), takeUntil(mouseup$));
        }), takeUntil(destroy$), tuiZonefree(ngZone))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), scrollTop = _b[0], scrollLeft = _b[1];
            var _c = __read(_this.viewportScroller.getScrollPosition(), 2), x = _c[0], y = _c[1];
            if (!_this.container) {
                _this.viewportScroller.scrollToPosition([
                    _this.tuiScrollbar === "vertical" /* Vertical */ ? x : scrollLeft,
                    _this.tuiScrollbar === "vertical" /* Vertical */ ? scrollTop : y,
                ]);
                return;
            }
            if (_this.tuiScrollbar === "vertical" /* Vertical */) {
                renderer.setProperty(_this.container.nativeElement, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(_this.container.nativeElement, 'scrollLeft', scrollLeft);
            }
        });
        merge(fromEvent(this.container ? this.container.nativeElement : this.windowRef, 'scroll'), interval(POLLING_TIME))
            .pipe(takeUntil(destroy$), tuiZonefree(ngZone))
            .subscribe(function () {
            if (_this.tuiScrollbar === "vertical" /* Vertical */) {
                renderer.setStyle(nativeElement, 'top', _this.thumb * 100 + "%");
                renderer.setStyle(nativeElement, 'height', _this.view * 100 + "%");
            }
            else {
                renderer.setStyle(nativeElement, 'left', _this.thumb * 100 + "%");
                renderer.setStyle(nativeElement, 'width', _this.view * 100 + "%");
            }
        });
    }
    Object.defineProperty(TuiScrollbarDirective.prototype, "scrolled", {
        get: function () {
            var _a = this.computedContainer, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight, scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
            return this.tuiScrollbar === "vertical" /* Vertical */
                ? scrollTop / (scrollHeight - clientHeight)
                : scrollLeft / (scrollWidth - clientWidth);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "compensation", {
        get: function () {
            var _a = this.computedContainer, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
                this.tuiScrollbar === "vertical" /* Vertical */) ||
                ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                    this.tuiScrollbar === "horizontal" /* Horizontal */)) {
                return 0;
            }
            return this.tuiScrollbar === "vertical" /* Vertical */
                ? MIN_WIDTH / clientHeight
                : MIN_WIDTH / clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "thumb", {
        get: function () {
            var compensation = this.compensation || this.view;
            return this.scrolled * (1 - compensation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "view", {
        get: function () {
            var _a = this.computedContainer, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            return this.tuiScrollbar === "vertical" /* Vertical */
                ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
                : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "computedContainer", {
        get: function () {
            return this.container
                ? this.container.nativeElement
                : this.documentRef.documentElement;
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollbarDirective.prototype.getScrolled = function (_a, offsetVertical, offsetHorizontal) {
        var clientY = _a.clientY, clientX = _a.clientX;
        var _b = this.windowRef, innerWidth = _b.innerWidth, innerHeight = _b.innerHeight;
        var _c = this.elementRef.nativeElement, offsetHeight = _c.offsetHeight, offsetWidth = _c.offsetWidth;
        var _d = this
            .container
            ? this.container.nativeElement.getBoundingClientRect()
            : {}, _e = _d.top, top = _e === void 0 ? 0 : _e, _f = _d.left, left = _f === void 0 ? 0 : _f, _g = _d.width, width = _g === void 0 ? innerWidth : _g, _h = _d.height, height = _h === void 0 ? innerHeight : _h;
        var maxTop = this.computedContainer.scrollHeight - height;
        var maxLeft = this.computedContainer.scrollWidth - width;
        var scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        var scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    };
    TuiScrollbarDirective.ctorParameters = function () { return [
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SCROLL_REF,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: ViewportScroller, decorators: [{ type: Inject, args: [ViewportScroller,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiScrollbarDirective.prototype, "tuiScrollbar", void 0);
    TuiScrollbarDirective = __decorate([
        Directive({
            selector: '[tuiScrollbar]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(NgZone)),
        __param(1, Inject(Renderer2)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Optional()),
        __param(3, Inject(TUI_SCROLL_REF)),
        __param(4, Inject(DOCUMENT)),
        __param(5, Inject(WINDOW)),
        __param(6, Inject(ElementRef)),
        __param(7, Inject(ViewportScroller))
    ], TuiScrollbarDirective);
    return TuiScrollbarDirective;
}());
export { TuiScrollbarDirective };
function getOffsetVertical(_a, _b) {
    var clientY = _a.clientY;
    var top = _b.top, height = _b.height;
    return (clientY - top) / height;
}
function getOffsetHorizontal(_a, _b) {
    var clientX = _a.clientX;
    var left = _b.left, width = _b.width;
    return (clientX - left) / width;
}
//# sourceMappingURL=data:application/json;base64,