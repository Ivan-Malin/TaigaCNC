import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { CSS, USER_AGENT } from '@ng-web-apis/common';
import { getElementOffset, isFirefox, tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_SCROLL_INTO_VIEW } from '@taiga-ui/core/constants';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { TuiScrollableDirective } from './scrollable.directive';
export function scrollRefFactory(_a) {
    var browserScrollRef = _a.browserScrollRef;
    return browserScrollRef;
}
// @dynamic
var TuiScrollbarComponent = /** @class */ (function () {
    function TuiScrollbarComponent(
    /**
     * TODO: remove "any" in new TS version; https://github.com/ng-web-apis/common/pull/6
     */
    cssRef, elementRef, userAgent) {
        this.cssRef = cssRef;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.hidden = false;
        this.isLegacy = !this.cssRef.supports('position', 'sticky') ||
            (isFirefox(this.userAgent) && !this.cssRef.supports('scrollbar-width', 'none'));
    }
    TuiScrollbarComponent_1 = TuiScrollbarComponent;
    Object.defineProperty(TuiScrollbarComponent.prototype, "showScrollbars", {
        get: function () {
            return !this.hidden && (!this.isLegacy || !!this.scrollable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarComponent.prototype, "browserScrollRef", {
        get: function () {
            return this.scrollable || this.elementRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarComponent.prototype, "showNative", {
        get: function () {
            return this.isLegacy && !this.hidden && !this.scrollable;
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollbarComponent.prototype.scrollIntoView = function (event) {
        var detail = event.detail;
        var nativeElement = this.browserScrollRef.nativeElement;
        event.stopPropagation();
        var _a = getElementOffset(nativeElement, detail), offsetTop = _a.offsetTop, offsetLeft = _a.offsetLeft;
        nativeElement.scrollTop =
            offsetTop + detail.offsetHeight / 2 - nativeElement.clientHeight / 2;
        nativeElement.scrollLeft =
            offsetLeft + detail.offsetWidth / 2 - nativeElement.clientWidth / 2;
    };
    var TuiScrollbarComponent_1;
    TuiScrollbarComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CSS,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiScrollbarComponent.prototype, "hidden", void 0);
    __decorate([
        HostBinding('class._container'),
        ContentChild(TuiScrollableDirective, { read: ElementRef })
    ], TuiScrollbarComponent.prototype, "scrollable", void 0);
    __decorate([
        HostBinding('class._legacy')
    ], TuiScrollbarComponent.prototype, "showNative", null);
    __decorate([
        HostListener(TUI_SCROLL_INTO_VIEW, ['$event'])
    ], TuiScrollbarComponent.prototype, "scrollIntoView", null);
    TuiScrollbarComponent = TuiScrollbarComponent_1 = __decorate([
        Component({
            selector: 'tui-scrollbar',
            template: "<tui-scroll-controls *ngIf=\"showScrollbars\"></tui-scroll-controls>\n<div class=\"content\">\n    <ng-content></ng-content>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_SCROLL_REF,
                    deps: [TuiScrollbarComponent_1],
                    useFactory: scrollRefFactory,
                },
            ],
            styles: [":host{position:relative;display:flex;overflow:auto}:host:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}:host:not(._legacy)::-webkit-scrollbar,:host:not(._legacy)::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host._legacy{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution:0.001dpcm){:host._legacy::-webkit-scrollbar,:host._legacy::-webkit-scrollbar-thumb{width:16px;height:16px;border-radius:100px;background-clip:padding-box;border:6px solid transparent}:host._legacy::-webkit-scrollbar{background-color:transparent}:host._legacy::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}:host._legacy::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}:host._legacy::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}:host._container tui-scroll-controls{position:absolute}.content{position:relative;z-index:0;flex:1;flex-basis:auto;width:100%}"]
        }),
        __param(0, Inject(CSS)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(USER_AGENT))
    ], TuiScrollbarComponent);
    return TuiScrollbarComponent;
}());
export { TuiScrollbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsic2Nyb2xsYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEdBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBRVQ7UUFEcEIsc0NBQWdCO0lBRWhCLE9BQU8sZ0JBQWdCLENBQUM7QUFDNUIsQ0FBQztBQUVELFdBQVc7QUFjWDtJQWFJO0lBQ0k7O09BRUc7SUFDMkIsTUFBVyxFQUNKLFVBQW1DLEVBQ25DLFNBQWlCO1FBRnhCLFdBQU0sR0FBTixNQUFNLENBQUs7UUFDSixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUNuQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBaEIxRCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBTUUsYUFBUSxHQUNyQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFDM0MsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQVNqRixDQUFDOzhCQXBCSyxxQkFBcUI7SUFzQjlCLHNCQUFJLGlEQUFjO2FBQWxCO1lBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRSxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLG1EQUFnQjthQUFwQjtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzlDLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksNkNBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzdELENBQUM7OztPQUFBO0lBR0QsOENBQWMsR0FBZCxVQUFlLEtBQStCO1FBQ25DLElBQUEscUJBQU0sQ0FBVTtRQUNoQixJQUFBLG1EQUFhLENBQTBCO1FBRTlDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUVsQixJQUFBLDRDQUFpRSxFQUFoRSx3QkFBUyxFQUFFLDBCQUFxRCxDQUFDO1FBRXhFLGFBQWEsQ0FBQyxTQUFTO1lBQ25CLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUN6RSxhQUFhLENBQUMsVUFBVTtZQUNwQixVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7O2dEQS9CSSxNQUFNLFNBQUMsR0FBRztnQkFDc0MsVUFBVSx1QkFBMUQsTUFBTSxTQUFDLFVBQVU7NkNBQ2pCLE1BQU0sU0FBQyxVQUFVOztJQWhCdEI7UUFGQyxLQUFLLEVBQUU7UUFDUCxjQUFjLEVBQUU7eURBQ0Y7SUFJZjtRQUZDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztRQUMvQixZQUFZLENBQUMsc0JBQXNCLEVBQUUsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLENBQUM7NkRBQ1I7SUF3QmpEO1FBREMsV0FBVyxDQUFDLGVBQWUsQ0FBQzsyREFHNUI7SUFHRDtRQURDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOytEQWE5QztJQWhEUSxxQkFBcUI7UUFiakMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGVBQWU7WUFDekIsa0pBQXdDO1lBRXhDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsY0FBYztvQkFDdkIsSUFBSSxFQUFFLENBQUMsdUJBQXFCLENBQUM7b0JBQzdCLFVBQVUsRUFBRSxnQkFBZ0I7aUJBQy9CO2FBQ0o7O1NBQ0osQ0FBQztRQWtCTyxXQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNYLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO09BbkJkLHFCQUFxQixDQWlEakM7SUFBRCw0QkFBQztDQUFBLEFBakRELElBaURDO1NBakRZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDU1MsIFVTRVJfQUdFTlR9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtnZXRFbGVtZW50T2Zmc2V0LCBpc0ZpcmVmb3gsIHR1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX1NDUk9MTF9JTlRPX1ZJRVd9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQge1RVSV9TQ1JPTExfUkVGfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtUdWlTY3JvbGxhYmxlRGlyZWN0aXZlfSBmcm9tICcuL3Njcm9sbGFibGUuZGlyZWN0aXZlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFJlZkZhY3Rvcnkoe1xuICAgIGJyb3dzZXJTY3JvbGxSZWYsXG59OiBUdWlTY3JvbGxiYXJDb21wb25lbnQpOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiB7XG4gICAgcmV0dXJuIGJyb3dzZXJTY3JvbGxSZWY7XG59XG5cbi8vIEBkeW5hbWljXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1zY3JvbGxiYXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zY3JvbGxiYXIudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2Nyb2xsYmFyLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1NDUk9MTF9SRUYsXG4gICAgICAgICAgICBkZXBzOiBbVHVpU2Nyb2xsYmFyQ29tcG9uZW50XSxcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IHNjcm9sbFJlZkZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2Nyb2xsYmFyQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaGlkZGVuID0gZmFsc2U7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9jb250YWluZXInKVxuICAgIEBDb250ZW50Q2hpbGQoVHVpU2Nyb2xsYWJsZURpcmVjdGl2ZSwge3JlYWQ6IEVsZW1lbnRSZWZ9KVxuICAgIHJlYWRvbmx5IHNjcm9sbGFibGU/OiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaXNMZWdhY3k6IGJvb2xlYW4gPVxuICAgICAgICAhdGhpcy5jc3NSZWYuc3VwcG9ydHMoJ3Bvc2l0aW9uJywgJ3N0aWNreScpIHx8XG4gICAgICAgIChpc0ZpcmVmb3godGhpcy51c2VyQWdlbnQpICYmICF0aGlzLmNzc1JlZi5zdXBwb3J0cygnc2Nyb2xsYmFyLXdpZHRoJywgJ25vbmUnKSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE86IHJlbW92ZSBcImFueVwiIGluIG5ldyBUUyB2ZXJzaW9uOyBodHRwczovL2dpdGh1Yi5jb20vbmctd2ViLWFwaXMvY29tbW9uL3B1bGwvNlxuICAgICAgICAgKi9cbiAgICAgICAgQEluamVjdChDU1MpIHByaXZhdGUgcmVhZG9ubHkgY3NzUmVmOiBhbnksXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChVU0VSX0FHRU5UKSBwcml2YXRlIHJlYWRvbmx5IHVzZXJBZ2VudDogc3RyaW5nLFxuICAgICkge31cblxuICAgIGdldCBzaG93U2Nyb2xsYmFycygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhpZGRlbiAmJiAoIXRoaXMuaXNMZWdhY3kgfHwgISF0aGlzLnNjcm9sbGFibGUpO1xuICAgIH1cblxuICAgIGdldCBicm93c2VyU2Nyb2xsUmVmKCk6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsYWJsZSB8fCB0aGlzLmVsZW1lbnRSZWY7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fbGVnYWN5JylcbiAgICBnZXQgc2hvd05hdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNMZWdhY3kgJiYgIXRoaXMuaGlkZGVuICYmICF0aGlzLnNjcm9sbGFibGU7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcihUVUlfU0NST0xMX0lOVE9fVklFVywgWyckZXZlbnQnXSlcbiAgICBzY3JvbGxJbnRvVmlldyhldmVudDogQ3VzdG9tRXZlbnQ8SFRNTEVsZW1lbnQ+KSB7XG4gICAgICAgIGNvbnN0IHtkZXRhaWx9ID0gZXZlbnQ7XG4gICAgICAgIGNvbnN0IHtuYXRpdmVFbGVtZW50fSA9IHRoaXMuYnJvd3NlclNjcm9sbFJlZjtcblxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCB7b2Zmc2V0VG9wLCBvZmZzZXRMZWZ0fSA9IGdldEVsZW1lbnRPZmZzZXQobmF0aXZlRWxlbWVudCwgZGV0YWlsKTtcblxuICAgICAgICBuYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9XG4gICAgICAgICAgICBvZmZzZXRUb3AgKyBkZXRhaWwub2Zmc2V0SGVpZ2h0IC8gMiAtIG5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgICAgbmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID1cbiAgICAgICAgICAgIG9mZnNldExlZnQgKyBkZXRhaWwub2Zmc2V0V2lkdGggLyAyIC0gbmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCAvIDI7XG4gICAgfVxufVxuIl19