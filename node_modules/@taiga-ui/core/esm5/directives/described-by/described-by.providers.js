import { ElementRef, InjectionToken } from '@angular/core';
import { TuiDestroyService, TuiFocusVisibleService, typedFromEvent } from '@taiga-ui/cdk';
import { merge, timer } from 'rxjs';
import { distinctUntilChanged, filter, mapTo, startWith, switchMapTo, take, takeUntil, tap, } from 'rxjs/operators';
var DELAY = 1000;
export var TUI_DESCRIBED_BY_SHOW = new InjectionToken('Accessible tooltip visibility stream');
export var TUI_DESCRIBED_BY_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    {
        provide: TUI_DESCRIBED_BY_SHOW,
        deps: [TuiFocusVisibleService, ElementRef],
        useFactory: describedByFactory,
    },
];
export function describedByFactory(focusVisible$, _a) {
    var nativeElement = _a.nativeElement;
    return merge(focusVisible$.pipe(filter(function (v) { return v; }), switchMapTo(timer(DELAY).pipe(mapTo(true), takeUntil(typedFromEvent(nativeElement, 'keydown')))), switchMapTo(typedFromEvent(nativeElement, 'keydown').pipe(filter(function (_a) {
        var key = _a.key;
        return key === 'Escape';
    }), take(1), tap(function (event) {
        event.stopPropagation();
    }), mapTo(false), startWith(true)))), typedFromEvent(nativeElement, 'blur').pipe(mapTo(false))).pipe(distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZGVzY3JpYmVkLWJ5LyIsInNvdXJjZXMiOlsiZGVzY3JpYmVkLWJ5LnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxLQUFLLEVBQWMsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEtBQUssRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksRUFDSixTQUFTLEVBQ1QsR0FBRyxHQUNOLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBRW5CLE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNuRCxzQ0FBc0MsQ0FDekMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFlO0lBQ2xELGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEI7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLElBQUksRUFBRSxDQUFDLHNCQUFzQixFQUFFLFVBQVUsQ0FBQztRQUMxQyxVQUFVLEVBQUUsa0JBQWtCO0tBQ2pDO0NBQ0osQ0FBQztBQUVGLE1BQU0sVUFBVSxrQkFBa0IsQ0FDOUIsYUFBa0MsRUFDbEMsRUFBd0M7UUFBdkMsZ0NBQWE7SUFFZCxPQUFPLEtBQUssQ0FDUixhQUFhLENBQUMsSUFBSSxDQUNkLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsRUFDZCxXQUFXLENBQ1AsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDYixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ1gsU0FBUyxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FDdEQsQ0FDSixFQUNELFdBQVcsQ0FDUCxjQUFjLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDekMsTUFBTSxDQUFDLFVBQUMsRUFBSztZQUFKLFlBQUc7UUFBTSxPQUFBLEdBQUcsS0FBSyxRQUFRO0lBQWhCLENBQWdCLENBQUMsRUFDbkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxVQUFBLEtBQUs7UUFDTCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFDLEVBQ0YsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDbEIsQ0FDSixDQUNKLEVBQ0QsY0FBYyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzNELENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQUNuQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZSwgVHVpRm9jdXNWaXNpYmxlU2VydmljZSwgdHlwZWRGcm9tRXZlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgICBmaWx0ZXIsXG4gICAgbWFwVG8sXG4gICAgc3RhcnRXaXRoLFxuICAgIHN3aXRjaE1hcFRvLFxuICAgIHRha2UsXG4gICAgdGFrZVVudGlsLFxuICAgIHRhcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBERUxBWSA9IDEwMDA7XG5cbmV4cG9ydCBjb25zdCBUVUlfREVTQ1JJQkVEX0JZX1NIT1cgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTxib29sZWFuPj4oXG4gICAgJ0FjY2Vzc2libGUgdG9vbHRpcCB2aXNpYmlsaXR5IHN0cmVhbScsXG4pO1xuZXhwb3J0IGNvbnN0IFRVSV9ERVNDUklCRURfQllfUFJPVklERVJTOiBQcm92aWRlcltdID0gW1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfREVTQ1JJQkVEX0JZX1NIT1csXG4gICAgICAgIGRlcHM6IFtUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLCBFbGVtZW50UmVmXSxcbiAgICAgICAgdXNlRmFjdG9yeTogZGVzY3JpYmVkQnlGYWN0b3J5LFxuICAgIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVzY3JpYmVkQnlGYWN0b3J5KFxuICAgIGZvY3VzVmlzaWJsZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gICAge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pixcbik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgZm9jdXNWaXNpYmxlJC5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKHYgPT4gdiksXG4gICAgICAgICAgICBzd2l0Y2hNYXBUbyhcbiAgICAgICAgICAgICAgICB0aW1lcihERUxBWSkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwVG8odHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAna2V5ZG93bicpKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgICAgIHR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdrZXlkb3duJykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyKCh7a2V5fSkgPT4ga2V5ID09PSAnRXNjYXBlJyksXG4gICAgICAgICAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICAgICAgICAgIHRhcChldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG1hcFRvKGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRXaXRoKHRydWUpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICAgICB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnYmx1cicpLnBpcGUobWFwVG8oZmFsc2UpKSxcbiAgICApLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG59XG4iXX0=