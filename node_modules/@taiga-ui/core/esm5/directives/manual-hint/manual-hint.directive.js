import { __decorate, __extends, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
var TuiManualHintDirective = /** @class */ (function (_super) {
    __extends(TuiManualHintDirective, _super);
    function TuiManualHintDirective(elementRef, hintService) {
        var _this = _super.call(this, elementRef, hintService) || this;
        _this.content = '';
        return _this;
    }
    Object.defineProperty(TuiManualHintDirective.prototype, "tuiManualHintShow", {
        set: function (show) {
            if (show) {
                this.showTooltip();
            }
            else {
                this.hideTooltip();
            }
        },
        enumerable: true,
        configurable: true
    });
    TuiManualHintDirective.prototype.getElementClientRect = function () {
        return this.elementRef.nativeElement.getBoundingClientRect();
    };
    TuiManualHintDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] }
    ]; };
    __decorate([
        Input('tuiManualHint'),
        tuiDefaultProp()
    ], TuiManualHintDirective.prototype, "content", void 0);
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiManualHintDirective.prototype, "tuiManualHintShow", null);
    TuiManualHintDirective = __decorate([
        Directive({
            selector: '[tuiManualHint]:not(ng-container)',
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiHintService))
    ], TuiManualHintDirective);
    return TuiManualHintDirective;
}(AbstractTuiHint));
export { TuiManualHintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFudWFsLWhpbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9tYW51YWwtaGludC8iLCJzb3VyY2VzIjpbIm1hbnVhbC1oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFNdkQ7SUFBNEMsMENBQWU7SUFldkQsZ0NBQ3dCLFVBQW1DLEVBQy9CLFdBQTJCO1FBRnZELFlBSUksa0JBQU0sVUFBVSxFQUFFLFdBQVcsQ0FBQyxTQUNqQztRQWpCRCxhQUFPLEdBQXdCLEVBQUUsQ0FBQzs7SUFpQmxDLENBQUM7SUFiRCxzQkFBSSxxREFBaUI7YUFBckIsVUFBc0IsSUFBYTtZQUMvQixJQUFJLElBQUksRUFBRTtnQkFDTixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3RCO1FBQ0wsQ0FBQzs7O09BQUE7SUFTRCxxREFBb0IsR0FBcEI7UUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDakUsQ0FBQzs7Z0JBUm1DLFVBQVUsdUJBQXpDLE1BQU0sU0FBQyxVQUFVO2dCQUNtQixjQUFjLHVCQUFsRCxNQUFNLFNBQUMsY0FBYzs7SUFkMUI7UUFGQyxLQUFLLENBQUMsZUFBZSxDQUFDO1FBQ3RCLGNBQWMsRUFBRTsyREFDaUI7SUFJbEM7UUFGQyxLQUFLLEVBQUU7UUFDUCxpQkFBaUIsRUFBRTttRUFPbkI7SUFiUSxzQkFBc0I7UUFIbEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG1DQUFtQztTQUNoRCxDQUFDO1FBaUJPLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xCLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO09BakJsQixzQkFBc0IsQ0F5QmxDO0lBQUQsNkJBQUM7Q0FBQSxBQXpCRCxDQUE0QyxlQUFlLEdBeUIxRDtTQXpCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCB0dWlSZXF1aXJlZFNldHRlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0Fic3RyYWN0VHVpSGludH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYWJzdHJhY3QnO1xuaW1wb3J0IHtUdWlIaW50U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvc2VydmljZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlNYW51YWxIaW50XTpub3QobmctY29udGFpbmVyKScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU1hbnVhbEhpbnREaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdFR1aUhpbnQge1xuICAgIEBJbnB1dCgndHVpTWFudWFsSGludCcpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gJyc7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlSZXF1aXJlZFNldHRlcigpXG4gICAgc2V0IHR1aU1hbnVhbEhpbnRTaG93KHNob3c6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aUhpbnRTZXJ2aWNlKSBoaW50U2VydmljZTogVHVpSGludFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIGhpbnRTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBnZXRFbGVtZW50Q2xpZW50UmVjdCgpOiBDbGllbnRSZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbn1cbiJdfQ==