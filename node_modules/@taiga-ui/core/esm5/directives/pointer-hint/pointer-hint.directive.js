import { __decorate, __extends, __param } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { TuiDestroyService, TuiHoveredService, tuiRequiredSetter, typedFromEvent, } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';
var TuiPointerHintDirective = /** @class */ (function (_super) {
    __extends(TuiPointerHintDirective, _super);
    function TuiPointerHintDirective(elementRef, hintService, destroy$, hoveredService) {
        var _this = _super.call(this, elementRef, hintService) || this;
        _this.destroy$ = destroy$;
        _this.content = '';
        _this.currentMouseRect = _this.mousePositionToClientRect();
        var hint$ = hoveredService.createHovered$(_this.elementRef.nativeElement).pipe(filter(function () { return !!_this.content; }), startWith(false), distinctUntilChanged());
        hint$.pipe(takeUntil(destroy$)).subscribe({
            next: function (visible) {
                if (visible) {
                    _this.showTooltip();
                }
                else {
                    _this.hideTooltip();
                }
            },
            complete: function () {
                _this.hideTooltip();
            },
        });
        _this.initMouseMoveSubscription();
        return _this;
    }
    Object.defineProperty(TuiPointerHintDirective.prototype, "tuiPointerHint", {
        set: function (value) {
            if (!value) {
                this.hideTooltip();
                this.content = '';
                return;
            }
            this.content = value;
        },
        enumerable: true,
        configurable: true
    });
    TuiPointerHintDirective.prototype.getElementClientRect = function () {
        return this.currentMouseRect;
    };
    TuiPointerHintDirective.prototype.initMouseMoveSubscription = function () {
        var _this = this;
        var mouseMove$ = typedFromEvent(this.elementRef.nativeElement, 'mousemove');
        mouseMove$.pipe(takeUntil(this.destroy$)).subscribe(function (_a) {
            var clientX = _a.clientX, clientY = _a.clientY;
            _this.currentMouseRect = _this.mousePositionToClientRect(clientX, clientY);
        });
    };
    TuiPointerHintDirective.prototype.mousePositionToClientRect = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        return {
            left: x,
            right: x,
            top: y,
            bottom: y,
            width: 0,
            height: 0,
        };
    };
    TuiPointerHintDirective.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] }
    ]; };
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiPointerHintDirective.prototype, "tuiPointerHint", null);
    TuiPointerHintDirective = __decorate([
        Directive({
            selector: '[tuiPointerHint]:not(ng-container)',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiHintService)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Inject(TuiHoveredService))
    ], TuiPointerHintDirective);
    return TuiPointerHintDirective;
}(AbstractTuiHint));
export { TuiPointerHintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci1oaW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvcG9pbnRlci1oaW50LyIsInNvdXJjZXMiOlsicG9pbnRlci1oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsY0FBYyxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3ZELE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBTWxGO0lBQTZDLDJDQUFlO0lBa0J4RCxpQ0FDd0IsVUFBbUMsRUFDL0IsV0FBMkIsRUFFbEMsUUFBMkIsRUFDakIsY0FBaUM7UUFMaEUsWUFPSSxrQkFBTSxVQUFVLEVBQUUsV0FBVyxDQUFDLFNBc0JqQztRQXpCb0IsY0FBUSxHQUFSLFFBQVEsQ0FBbUI7UUFSaEQsYUFBTyxHQUF3QixFQUFFLENBQUM7UUFFMUIsc0JBQWdCLEdBQUcsS0FBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFXeEQsSUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDM0UsTUFBTSxDQUFDLGNBQU0sT0FBQSxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sRUFBZCxDQUFjLENBQUMsRUFDNUIsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUNoQixvQkFBb0IsRUFBRSxDQUN6QixDQUFDO1FBRUYsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDdEMsSUFBSSxFQUFFLFVBQUEsT0FBTztnQkFDVCxJQUFJLE9BQU8sRUFBRTtvQkFDVCxLQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ3RCO3FCQUFNO29CQUNILEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDdEI7WUFDTCxDQUFDO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixDQUFDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsS0FBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7O0lBQ3JDLENBQUM7SUE1Q0Qsc0JBQUksbURBQWM7YUFBbEIsVUFBbUIsS0FBaUM7WUFDaEQsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDUixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO2dCQUVsQixPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN6QixDQUFDOzs7T0FBQTtJQXFDRCxzREFBb0IsR0FBcEI7UUFDSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRU8sMkRBQXlCLEdBQWpDO1FBQUEsaUJBU0M7UUFSRyxJQUFNLFVBQVUsR0FBMkIsY0FBYyxDQUNyRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFDN0IsV0FBVyxDQUNkLENBQUM7UUFFRixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxFQUFrQjtnQkFBakIsb0JBQU8sRUFBRSxvQkFBTztZQUNsRSxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3RSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTywyREFBeUIsR0FBakMsVUFBa0MsQ0FBYSxFQUFFLENBQWE7UUFBNUIsa0JBQUEsRUFBQSxLQUFhO1FBQUUsa0JBQUEsRUFBQSxLQUFhO1FBQzFELE9BQU87WUFDSCxJQUFJLEVBQUUsQ0FBQztZQUNQLEtBQUssRUFBRSxDQUFDO1lBQ1IsR0FBRyxFQUFFLENBQUM7WUFDTixNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLENBQUM7U0FDWixDQUFDO0lBQ04sQ0FBQzs7Z0JBdERtQyxVQUFVLHVCQUF6QyxNQUFNLFNBQUMsVUFBVTtnQkFDbUIsY0FBYyx1QkFBbEQsTUFBTSxTQUFDLGNBQWM7Z0JBRUssaUJBQWlCLHVCQUQzQyxNQUFNLFNBQUMsaUJBQWlCO2dCQUVrQixpQkFBaUIsdUJBQTNELE1BQU0sU0FBQyxpQkFBaUI7O0lBcEI3QjtRQUZDLEtBQUssRUFBRTtRQUNQLGlCQUFpQixFQUFFO2lFQVVuQjtJQVpRLHVCQUF1QjtRQUpuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsb0NBQW9DO1lBQzlDLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1NBQ2pDLENBQUM7UUFvQk8sV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDdEIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUV6QixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO09BdkJyQix1QkFBdUIsQ0EwRW5DO0lBQUQsOEJBQUM7Q0FBQSxBQTFFRCxDQUE2QyxlQUFlLEdBMEUzRDtTQTFFWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUhvdmVyZWRTZXJ2aWNlLFxuICAgIHR1aVJlcXVpcmVkU2V0dGVyLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QWJzdHJhY3RUdWlIaW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1R1aUhpbnRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9zZXJ2aWNlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBzdGFydFdpdGgsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlQb2ludGVySGludF06bm90KG5nLWNvbnRhaW5lciknLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUG9pbnRlckhpbnREaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdFR1aUhpbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgdHVpUG9pbnRlckhpbnQodmFsdWU6IFBvbHltb3JwaGV1c0NvbnRlbnQgfCBudWxsKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9ICcnO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRlbnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50ID0gJyc7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRNb3VzZVJlY3QgPSB0aGlzLm1vdXNlUG9zaXRpb25Ub0NsaWVudFJlY3QoKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aUhpbnRTZXJ2aWNlKSBoaW50U2VydmljZTogVHVpSGludFNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFR1aUhvdmVyZWRTZXJ2aWNlKSBob3ZlcmVkU2VydmljZTogVHVpSG92ZXJlZFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIGhpbnRTZXJ2aWNlKTtcblxuICAgICAgICBjb25zdCBoaW50JCA9IGhvdmVyZWRTZXJ2aWNlLmNyZWF0ZUhvdmVyZWQkKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KS5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKCgpID0+ICEhdGhpcy5jb250ZW50KSxcbiAgICAgICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICApO1xuXG4gICAgICAgIGhpbnQkLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IHZpc2libGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVUb29sdGlwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbml0TW91c2VNb3ZlU3Vic2NyaXB0aW9uKCk7XG4gICAgfVxuXG4gICAgZ2V0RWxlbWVudENsaWVudFJlY3QoKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNb3VzZVJlY3Q7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0TW91c2VNb3ZlU3Vic2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBtb3VzZU1vdmUkOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdHlwZWRGcm9tRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICApO1xuXG4gICAgICAgIG1vdXNlTW92ZSQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoe2NsaWVudFgsIGNsaWVudFl9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNb3VzZVJlY3QgPSB0aGlzLm1vdXNlUG9zaXRpb25Ub0NsaWVudFJlY3QoY2xpZW50WCwgY2xpZW50WSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbW91c2VQb3NpdGlvblRvQ2xpZW50UmVjdCh4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKTogQ2xpZW50UmVjdCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB4LFxuICAgICAgICAgICAgcmlnaHQ6IHgsXG4gICAgICAgICAgICB0b3A6IHksXG4gICAgICAgICAgICBib3R0b206IHksXG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=