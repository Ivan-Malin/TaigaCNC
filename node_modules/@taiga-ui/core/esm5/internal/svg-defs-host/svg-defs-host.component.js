import { __decorate, __param } from "tslib";
import { DOCUMENT, isPlatformServer } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit, PLATFORM_ID, } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiSvgService } from '@taiga-ui/core/services';
import { innerHTML } from '@taiga-ui/core/utils/polyfills';
import { takeUntil } from 'rxjs/operators';
// @dynamic
var TuiSvgDefsHostComponent = /** @class */ (function () {
    function TuiSvgDefsHostComponent(documentRef, svgService, changeDetectorRef, destroy$, platformId) {
        this.svgService = svgService;
        this.changeDetectorRef = changeDetectorRef;
        this.destroy$ = destroy$;
        this.isBrowser = true;
        this.isBrowser = !isPlatformServer(platformId);
        innerHTML(documentRef);
    }
    // @bad TODO: Looks like it could be async piped but it was probably written like that for a reason
    TuiSvgDefsHostComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.svgService.items$.pipe(takeUntil(this.destroy$)).subscribe(function (defsMap) {
            _this.items = defsMap.values();
            _this.changeDetectorRef.detectChanges();
        });
    };
    TuiSvgDefsHostComponent.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: TuiSvgService, decorators: [{ type: Inject, args: [TuiSvgService,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    TuiSvgDefsHostComponent = __decorate([
        Component({
            selector: 'tui-svg-defs-host',
            template: "<svg:svg\n    version=\"1.1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n    <ng-container *ngIf=\"isBrowser; else server\">\n        <defs *ngFor=\"let def of items\" [innerHTML]=\"def\"></defs>\n    </ng-container>\n    <ng-template #server>\n        <!--svg[outerHTML] - to support SSR, because there is no support of innerHTML for for defs element in domino-->\n        <defs *ngFor=\"let def of items\">\n            <svg [outerHTML]=\"def\"></svg>\n        </defs>\n    </ng-template>\n</svg:svg>\n",
            providers: [TuiDestroyService],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:none}"]
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(TuiSvgService)),
        __param(2, Inject(ChangeDetectorRef)),
        __param(3, Inject(TuiDestroyService)),
        __param(4, Inject(PLATFORM_ID))
    ], TuiSvgDefsHostComponent);
    return TuiSvgDefsHostComponent;
}());
export { TuiSvgDefsHostComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkvY29yZS9pbnRlcm5hbC9zdmctZGVmcy1ob3N0LyIsInNvdXJjZXMiOlsic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUMzRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDekQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXpDLFdBQVc7QUFRWDtJQUlJLGlDQUNzQixXQUFxQixFQUNDLFVBQXlCLEVBQ3JCLGlCQUFvQyxFQUUvRCxRQUEyQixFQUN2QixVQUFrQjtRQUpDLGVBQVUsR0FBVixVQUFVLENBQWU7UUFDckIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUUvRCxhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQVBoRCxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBVWIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsbUdBQW1HO0lBQ25HLDBDQUFRLEdBQVI7UUFBQSxpQkFLQztRQUpHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUEsT0FBTztZQUNuRSxLQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM5QixLQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztnQkFqQmtDLFFBQVEsdUJBQXRDLE1BQU0sU0FBQyxRQUFRO2dCQUNvQyxhQUFhLHVCQUFoRSxNQUFNLFNBQUMsYUFBYTtnQkFDMEMsaUJBQWlCLHVCQUEvRSxNQUFNLFNBQUMsaUJBQWlCO2dCQUVFLGlCQUFpQix1QkFEM0MsTUFBTSxTQUFDLGlCQUFpQjtnQkFFUSxNQUFNLHVCQUF0QyxNQUFNLFNBQUMsV0FBVzs7SUFWZCx1QkFBdUI7UUFQbkMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG1CQUFtQjtZQUM3Qix5akJBQTRDO1lBRTVDLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1lBQzlCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNsRCxDQUFDO1FBTU8sV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEIsV0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDckIsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN6QixXQUFBLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBRXpCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO09BVmYsdUJBQXVCLENBdUJuQztJQUFELDhCQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0F2QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVCwgaXNQbGF0Zm9ybVNlcnZlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEluamVjdCxcbiAgICBPbkluaXQsXG4gICAgUExBVEZPUk1fSUQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTYWZlSHRtbH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpU3ZnU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvc2VydmljZXMnO1xuaW1wb3J0IHtpbm5lckhUTUx9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3V0aWxzL3BvbHlmaWxscyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBAZHluYW1pY1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktc3ZnLWRlZnMtaG9zdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3N2Zy1kZWZzLWhvc3QudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc3ZnLWRlZnMtaG9zdC5zdHlsZS5sZXNzJ10sXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2VdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTdmdEZWZzSG9zdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgaXRlbXMhOiBJdGVyYWJsZUl0ZXJhdG9yPFNhZmVIdG1sPjtcbiAgICBpc0Jyb3dzZXIgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICAgICAgQEluamVjdChUdWlTdmdTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IHN2Z1NlcnZpY2U6IFR1aVN2Z1NlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIHByaXZhdGUgcmVhZG9ubHkgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3kkOiBUdWlEZXN0cm95U2VydmljZSxcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgICkge1xuICAgICAgICB0aGlzLmlzQnJvd3NlciA9ICFpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpO1xuICAgICAgICBpbm5lckhUTUwoZG9jdW1lbnRSZWYpO1xuICAgIH1cblxuICAgIC8vIEBiYWQgVE9ETzogTG9va3MgbGlrZSBpdCBjb3VsZCBiZSBhc3luYyBwaXBlZCBidXQgaXQgd2FzIHByb2JhYmx5IHdyaXR0ZW4gbGlrZSB0aGF0IGZvciBhIHJlYXNvblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnN2Z1NlcnZpY2UuaXRlbXMkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoZGVmc01hcCA9PiB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zID0gZGVmc01hcC52YWx1ZXMoKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=