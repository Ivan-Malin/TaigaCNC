import { __decorate, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
import { tuiAssert } from '@taiga-ui/cdk';
import { BehaviorSubject, Observable } from 'rxjs';
import { NotificationAlert } from './notification-alert/Notification-alert';
import * as i0 from "@angular/core";
var NO_HOST = 'Notifications are disabled, enable support by adding TuiNotificationsModule to your main app module';
var TuiNotificationsService = /** @class */ (function () {
    function TuiNotificationsService() {
        /** @internal */
        this.items$ = new BehaviorSubject([]);
    }
    TuiNotificationsService.prototype.show = function (content, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        tuiAssert.assert(!!this.items$.observers.length, NO_HOST);
        return new Observable(function (observer) {
            var notification = new NotificationAlert(observer, content, options);
            _this.items$.next(__spread(_this.items$.value, [notification]));
            return function () {
                _this.items$.next(_this.items$.value.filter(function (item) { return item !== notification; }));
            };
        });
    };
    TuiNotificationsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiNotificationsService_Factory() { return new TuiNotificationsService(); }, token: TuiNotificationsService, providedIn: "root" });
    TuiNotificationsService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TuiNotificationsService);
    return TuiNotificationsService;
}());
export { TuiNotificationsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvbW9kdWxlcy9ub3RpZmljYXRpb25zLyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFeEMsT0FBTyxFQUFDLGVBQWUsRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDM0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0seUNBQXlDLENBQUM7O0FBTzFFLElBQU0sT0FBTyxHQUNULHFHQUFxRyxDQUFDO0FBSzFHO0lBQUE7UUFDSSxnQkFBZ0I7UUFDUCxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQTZDLEVBQUUsQ0FBQyxDQUFDO0tBNkJ6RjtJQWhCRyxzQ0FBSSxHQUFKLFVBQ0ksT0FBaUUsRUFDakUsT0FBd0U7UUFGNUUsaUJBZUM7UUFiRyx3QkFBQSxFQUFBLFlBQXdFO1FBRXhFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUxRCxPQUFPLElBQUksVUFBVSxDQUFDLFVBQUMsUUFBcUI7WUFDeEMsSUFBTSxZQUFZLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXZFLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFLLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFFLFlBQVksR0FBRSxDQUFDO1lBRXZELE9BQU87Z0JBQ0gsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxLQUFLLFlBQVksRUFBckIsQ0FBcUIsQ0FBQyxDQUFDLENBQUM7WUFDOUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztJQTlCUSx1QkFBdUI7UUFIbkMsVUFBVSxDQUFDO1lBQ1IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztPQUNXLHVCQUF1QixDQStCbkM7a0NBaEREO0NBZ0RDLEFBL0JELElBK0JDO1NBL0JZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtOb3RpZmljYXRpb25BbGVydH0gZnJvbSAnLi9ub3RpZmljYXRpb24tYWxlcnQvTm90aWZpY2F0aW9uLWFsZXJ0JztcbmltcG9ydCB7VHVpTm90aWZpY2F0aW9uQ29udGVudENvbnRleHR9IGZyb20gJy4vbm90aWZpY2F0aW9uLWNvbnRlbnQtY29udGV4dCc7XG5pbXBvcnQge1xuICAgIFR1aU5vdGlmaWNhdGlvbk9wdGlvbnMsXG4gICAgVHVpTm90aWZpY2F0aW9uT3B0aW9uc1dpdGhEYXRhLFxufSBmcm9tICcuL25vdGlmaWNhdGlvbi1vcHRpb25zJztcblxuY29uc3QgTk9fSE9TVCA9XG4gICAgJ05vdGlmaWNhdGlvbnMgYXJlIGRpc2FibGVkLCBlbmFibGUgc3VwcG9ydCBieSBhZGRpbmcgVHVpTm90aWZpY2F0aW9uc01vZHVsZSB0byB5b3VyIG1haW4gYXBwIG1vZHVsZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5vdGlmaWNhdGlvbnNTZXJ2aWNlIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmVhZG9ubHkgaXRlbXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZWFkb25seUFycmF5PE5vdGlmaWNhdGlvbkFsZXJ0PGFueSwgYW55Pj4+KFtdKTtcblxuICAgIHNob3c8TyA9IHZvaWQ+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8+PixcbiAgICApOiBPYnNlcnZhYmxlPE8+O1xuICAgIHNob3c8TyA9IHZvaWQ+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8+PixcbiAgICAgICAgb3B0aW9uczogVHVpTm90aWZpY2F0aW9uT3B0aW9ucyxcbiAgICApOiBPYnNlcnZhYmxlPE8+O1xuICAgIHNob3c8TywgST4oXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpTm90aWZpY2F0aW9uQ29udGVudENvbnRleHQ8TywgST4+LFxuICAgICAgICBvcHRpb25zOiBUdWlOb3RpZmljYXRpb25PcHRpb25zV2l0aERhdGE8ST4sXG4gICAgKTogT2JzZXJ2YWJsZTxPPjtcbiAgICBzaG93PE8sIEk+KFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aU5vdGlmaWNhdGlvbkNvbnRlbnRDb250ZXh0PE8sIEk+PixcbiAgICAgICAgb3B0aW9uczogVHVpTm90aWZpY2F0aW9uT3B0aW9ucyB8IFR1aU5vdGlmaWNhdGlvbk9wdGlvbnNXaXRoRGF0YTxJPiA9IHt9LFxuICAgICk6IE9ic2VydmFibGU8Tz4ge1xuICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KCEhdGhpcy5pdGVtcyQub2JzZXJ2ZXJzLmxlbmd0aCwgTk9fSE9TVCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8Tz4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IG5ldyBOb3RpZmljYXRpb25BbGVydChvYnNlcnZlciwgY29udGVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlbXMkLm5leHQoWy4uLnRoaXMuaXRlbXMkLnZhbHVlLCBub3RpZmljYXRpb25dKTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zJC5uZXh0KHRoaXMuaXRlbXMkLnZhbHVlLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IG5vdGlmaWNhdGlvbikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19