import { EMPTY_ARRAY } from '@taiga-ui/cdk';
import { debounceTime, distinctUntilChanged, scan, startWith, switchMap, } from 'rxjs/operators';
export function smartSearch(getSearchFunction, searchDebouceTimeMs) {
    if (searchDebouceTimeMs === void 0) { searchDebouceTimeMs = 400; }
    return function (source) {
        return source.pipe(debounceTime(searchDebouceTimeMs), scan(function (previousSearched, current) {
            return previousSearched !== '' && current.startsWith(previousSearched)
                ? previousSearched
                : current;
        }, ''), distinctUntilChanged(), switchMap(function (value) { return getSearchFunction(value).pipe(startWith(null)); }), startWith(EMPTY_ARRAY));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtc2VhcmNoLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvb2JzZXJ2YWJsZXMvIiwic291cmNlcyI6WyJzbWFydC1zZWFyY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUcxQyxPQUFPLEVBQ0gsWUFBWSxFQUNaLG9CQUFvQixFQUNwQixJQUFJLEVBQ0osU0FBUyxFQUNULFNBQVMsR0FDWixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE1BQU0sVUFBVSxXQUFXLENBQ3ZCLGlCQUE2RSxFQUM3RSxtQkFBaUM7SUFBakMsb0NBQUEsRUFBQSx5QkFBaUM7SUFFakMsT0FBTyxVQUFBLE1BQU07UUFDVCxPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQ1AsWUFBWSxDQUFDLG1CQUFtQixDQUFDLEVBQ2pDLElBQUksQ0FBQyxVQUFDLGdCQUFnQixFQUFFLE9BQU87WUFDM0IsT0FBTyxnQkFBZ0IsS0FBSyxFQUFFLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDbEUsQ0FBQyxDQUFDLGdCQUFnQjtnQkFDbEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNsQixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ04sb0JBQW9CLEVBQUUsRUFDdEIsU0FBUyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUE5QyxDQUE4QyxDQUFDLEVBQ2xFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FDekI7SUFWRCxDQVVDLENBQUM7QUFDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFTVBUWV9BUlJBWX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aUl0ZW1zfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge09ic2VydmFibGUsIE9wZXJhdG9yRnVuY3Rpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBkZWJvdW5jZVRpbWUsXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgc2NhbixcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzbWFydFNlYXJjaDxUPihcbiAgICBnZXRTZWFyY2hGdW5jdGlvbjogKHNlYXJjaDogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPEV4Y2x1ZGU8VHVpSXRlbXM8VD4sIG51bGw+PixcbiAgICBzZWFyY2hEZWJvdWNlVGltZU1zOiBudW1iZXIgPSA0MDAsXG4pOiBPcGVyYXRvckZ1bmN0aW9uPHN0cmluZywgVHVpSXRlbXM8VD4+IHtcbiAgICByZXR1cm4gc291cmNlID0+XG4gICAgICAgIHNvdXJjZS5waXBlKFxuICAgICAgICAgICAgZGVib3VuY2VUaW1lKHNlYXJjaERlYm91Y2VUaW1lTXMpLFxuICAgICAgICAgICAgc2NhbigocHJldmlvdXNTZWFyY2hlZCwgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1NlYXJjaGVkICE9PSAnJyAmJiBjdXJyZW50LnN0YXJ0c1dpdGgocHJldmlvdXNTZWFyY2hlZClcbiAgICAgICAgICAgICAgICAgICAgPyBwcmV2aW91c1NlYXJjaGVkXG4gICAgICAgICAgICAgICAgICAgIDogY3VycmVudDtcbiAgICAgICAgICAgIH0sICcnKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICBzd2l0Y2hNYXAodmFsdWUgPT4gZ2V0U2VhcmNoRnVuY3Rpb24odmFsdWUpLnBpcGUoc3RhcnRXaXRoKG51bGwpKSksXG4gICAgICAgICAgICBzdGFydFdpdGgoRU1QVFlfQVJSQVkpLFxuICAgICAgICApO1xufVxuIl19