import { __decorate, __extends, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service for displaying hints/tooltips
 */
var TuiHintService = /** @class */ (function (_super) {
    __extends(TuiHintService, _super);
    function TuiHintService() {
        var _this = _super.call(this, function (observer) { return _this.hints$.subscribe(observer); }) || this;
        _this.hints$ = new BehaviorSubject([]);
        /**
         * TODO: v2.0
         * We need the following logic for desribedBy
         * move it into another service that can register hints and
         * manage it using TuiHintService inside
         */
        _this.directives = [];
        return _this;
    }
    TuiHintService.prototype.add = function (directive) {
        this.hints$.next(__spread(this.hints$.value, [directive]));
    };
    TuiHintService.prototype.remove = function (directive) {
        this.hints$.next(this.hints$.value.filter(function (hint) { return hint !== directive; }));
    };
    TuiHintService.prototype.register = function (directive) {
        this.directives = __spread(this.directives, [directive]);
    };
    TuiHintService.prototype.unregister = function (directive) {
        this.remove(directive);
        this.directives = this.directives.filter(function (dir) { return dir !== directive; });
    };
    TuiHintService.prototype.showHintForId = function (id) {
        var directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.add(directive);
        }
    };
    TuiHintService.prototype.hideHintForId = function (id) {
        var directive = this.findDirectiveWithHintId(id);
        if (directive) {
            this.remove(directive);
        }
    };
    TuiHintService.prototype.findDirectiveWithHintId = function (id) {
        return this.directives.find(function (directive) { return directive.tuiHintId === id; });
    };
    TuiHintService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TuiHintService_Factory() { return new TuiHintService(); }, token: TuiHintService, providedIn: "root" });
    TuiHintService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TuiHintService);
    return TuiHintService;
}(Observable));
export { TuiHintService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2NvcmUvc2VydmljZXMvIiwic291cmNlcyI6WyJoaW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBTWpEOztHQUVHO0FBSUg7SUFBb0Msa0NBQTBDO0lBRzFFO1FBQUEsWUFDSSxrQkFBTSxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUEvQixDQUErQixDQUFDLFNBQ3JEO1FBSmdCLFlBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBaUMsRUFBRSxDQUFDLENBQUM7UUFjbEY7Ozs7O1dBS0c7UUFDSyxnQkFBVSxHQUFvQyxFQUFFLENBQUM7O0lBaEJ6RCxDQUFDO0lBRUQsNEJBQUcsR0FBSCxVQUFJLFNBQTBCO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFFLFNBQVMsR0FBRSxDQUFDO0lBQ3hELENBQUM7SUFFRCwrQkFBTSxHQUFOLFVBQU8sU0FBMEI7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxLQUFLLFNBQVMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQVVELGlDQUFRLEdBQVIsVUFBUyxTQUEyQjtRQUNoQyxJQUFJLENBQUMsVUFBVSxZQUFPLElBQUksQ0FBQyxVQUFVLEdBQUUsU0FBUyxFQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELG1DQUFVLEdBQVYsVUFBVyxTQUEyQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLEtBQUssU0FBUyxFQUFqQixDQUFpQixDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELHNDQUFhLEdBQWIsVUFBYyxFQUFVO1FBQ3BCLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuRCxJQUFJLFNBQVMsRUFBRTtZQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRUQsc0NBQWEsR0FBYixVQUFjLEVBQVU7UUFDcEIsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5ELElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyxnREFBdUIsR0FBL0IsVUFBZ0MsRUFBVTtRQUN0QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsU0FBUyxDQUFDLFNBQVMsS0FBSyxFQUFFLEVBQTFCLENBQTBCLENBQUMsQ0FBQztJQUN6RSxDQUFDOztJQWxEUSxjQUFjO1FBSDFCLFVBQVUsQ0FBQztZQUNSLFVBQVUsRUFBRSxNQUFNO1NBQ3JCLENBQUM7T0FDVyxjQUFjLENBbUQxQjt5QkFoRUQ7Q0FnRUMsQUFuREQsQ0FBb0MsVUFBVSxHQW1EN0M7U0FuRFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbi8vIFRPRE86IHJlbW92ZSBhZnRlciB2Mi4wIHNlcGFyYXRpbmcuIEl0IHByZXZlbnRzIHNlcHMgY3ljbGluZy5cbnR5cGUgVHVpSGludERpcmVjdGl2ZSA9IGFueTtcbnR5cGUgQWJzdHJhY3RUdWlIaW50ID0gYW55O1xuXG4vKipcbiAqIFNlcnZpY2UgZm9yIGRpc3BsYXlpbmcgaGludHMvdG9vbHRpcHNcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludFNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPFJlYWRvbmx5QXJyYXk8QWJzdHJhY3RUdWlIaW50Pj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGludHMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZWFkb25seUFycmF5PEFic3RyYWN0VHVpSGludD4+KFtdKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihvYnNlcnZlciA9PiB0aGlzLmhpbnRzJC5zdWJzY3JpYmUob2JzZXJ2ZXIpKTtcbiAgICB9XG5cbiAgICBhZGQoZGlyZWN0aXZlOiBBYnN0cmFjdFR1aUhpbnQpIHtcbiAgICAgICAgdGhpcy5oaW50cyQubmV4dChbLi4udGhpcy5oaW50cyQudmFsdWUsIGRpcmVjdGl2ZV0pO1xuICAgIH1cblxuICAgIHJlbW92ZShkaXJlY3RpdmU6IEFic3RyYWN0VHVpSGludCkge1xuICAgICAgICB0aGlzLmhpbnRzJC5uZXh0KHRoaXMuaGludHMkLnZhbHVlLmZpbHRlcihoaW50ID0+IGhpbnQgIT09IGRpcmVjdGl2ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRPRE86IHYyLjBcbiAgICAgKiBXZSBuZWVkIHRoZSBmb2xsb3dpbmcgbG9naWMgZm9yIGRlc3JpYmVkQnlcbiAgICAgKiBtb3ZlIGl0IGludG8gYW5vdGhlciBzZXJ2aWNlIHRoYXQgY2FuIHJlZ2lzdGVyIGhpbnRzIGFuZFxuICAgICAqIG1hbmFnZSBpdCB1c2luZyBUdWlIaW50U2VydmljZSBpbnNpZGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGRpcmVjdGl2ZXM6IFJlYWRvbmx5QXJyYXk8VHVpSGludERpcmVjdGl2ZT4gPSBbXTtcblxuICAgIHJlZ2lzdGVyKGRpcmVjdGl2ZTogVHVpSGludERpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBbLi4udGhpcy5kaXJlY3RpdmVzLCBkaXJlY3RpdmVdO1xuICAgIH1cblxuICAgIHVucmVnaXN0ZXIoZGlyZWN0aXZlOiBUdWlIaW50RGlyZWN0aXZlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGRpcmVjdGl2ZSk7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IHRoaXMuZGlyZWN0aXZlcy5maWx0ZXIoZGlyID0+IGRpciAhPT0gZGlyZWN0aXZlKTtcbiAgICB9XG5cbiAgICBzaG93SGludEZvcklkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5maW5kRGlyZWN0aXZlV2l0aEhpbnRJZChpZCk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5hZGQoZGlyZWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZGVIaW50Rm9ySWQoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLmZpbmREaXJlY3RpdmVXaXRoSGludElkKGlkKTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShkaXJlY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaW5kRGlyZWN0aXZlV2l0aEhpbnRJZChpZDogc3RyaW5nKTogVHVpSGludERpcmVjdGl2ZSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGl2ZXMuZmluZChkaXJlY3RpdmUgPT4gZGlyZWN0aXZlLnR1aUhpbnRJZCA9PT0gaWQpO1xuICAgIH1cbn1cbiJdfQ==