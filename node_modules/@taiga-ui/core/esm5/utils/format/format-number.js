import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
/**
 * Formats number adding thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @return the formatted string
 */
export function formatNumber(value, decimalLimit, decimalSeparator, thousandSeparator) {
    if (decimalLimit === void 0) { decimalLimit = null; }
    if (decimalSeparator === void 0) { decimalSeparator = ','; }
    if (thousandSeparator === void 0) { thousandSeparator = CHAR_NO_BREAK_SPACE; }
    var integerPartString = Math.floor(Math.abs(value)).toString();
    var fractionPartString = value.toString().split('.')[1] || '';
    var fractionPartPadded = decimalLimit === null
        ? fractionPartString
        : fractionPartString.substr(0, decimalLimit) +
            '0'.repeat(Math.max(decimalLimit - fractionPartString.length, 0));
    var remainder = integerPartString.length % 3;
    var sign = value < 0 ? '-' : '';
    var result = sign + integerPartString.charAt(0);
    for (var i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return !!fractionPartPadded || decimalLimit
        ? result + decimalSeparator + fractionPartPadded
        : result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LW51bWJlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9jb3JlL3V0aWxzL2Zvcm1hdC8iLCJzb3VyY2VzIjpbImZvcm1hdC1udW1iZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWxEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQ3hCLEtBQWEsRUFDYixZQUFrQyxFQUNsQyxnQkFBOEIsRUFDOUIsaUJBQStDO0lBRi9DLDZCQUFBLEVBQUEsbUJBQWtDO0lBQ2xDLGlDQUFBLEVBQUEsc0JBQThCO0lBQzlCLGtDQUFBLEVBQUEsdUNBQStDO0lBRS9DLElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakUsSUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoRSxJQUFNLGtCQUFrQixHQUNwQixZQUFZLEtBQUssSUFBSTtRQUNqQixDQUFDLENBQUMsa0JBQWtCO1FBQ3BCLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQztZQUMxQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLElBQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDL0MsSUFBTSxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLElBQUksaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRCxNQUFNLElBQUksaUJBQWlCLENBQUM7U0FDL0I7UUFFRCxNQUFNLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxDQUFDLENBQUMsa0JBQWtCLElBQUksWUFBWTtRQUN2QyxDQUFDLENBQUMsTUFBTSxHQUFHLGdCQUFnQixHQUFHLGtCQUFrQjtRQUNoRCxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NIQVJfTk9fQlJFQUtfU1BBQ0V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG4vKipcbiAqIEZvcm1hdHMgbnVtYmVyIGFkZGluZyB0aG91c2FuZCBzZXBhcmF0b3JzIGFuZCBjb3JyZWN0IGRlY2ltYWwgc2VwYXJhdG9yXG4gKiBwYWRkaW5nIGRlY2ltYWwgcGFydCB3aXRoIHplcm9lcyB0byBnaXZlbiBsZW5ndGhcbiAqXG4gKiBAcGFyYW0gdmFsdWUgdGhlIGlucHV0IG51bWJlclxuICogQHBhcmFtIGRlY2ltYWxMaW1pdCBudW1iZXIgb2YgZGlnaXRzIG9mIGRlY2ltYWwgcGFydCwgbnVsbCB0byBrZWVwIHVudG91Y2hlZFxuICogQHBhcmFtIGRlY2ltYWxTZXBhcmF0b3Igc2VwYXJhdG9yIGJldHdlZW4gdGhlIGludGVnZXIgYW5kIHRoZSBkZWNpbWFsIHBhcnRcbiAqIEBwYXJhbSB0aG91c2FuZFNlcGFyYXRvciBzZXBhcmF0b3IgYmV0d2VlbiB0aG91c2FuZHNcbiAqIEByZXR1cm4gdGhlIGZvcm1hdHRlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlcihcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIGRlY2ltYWxMaW1pdDogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICAgZGVjaW1hbFNlcGFyYXRvcjogc3RyaW5nID0gJywnLFxuICAgIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSBDSEFSX05PX0JSRUFLX1NQQUNFLFxuKTogc3RyaW5nIHtcbiAgICBjb25zdCBpbnRlZ2VyUGFydFN0cmluZyA9IE1hdGguZmxvb3IoTWF0aC5hYnModmFsdWUpKS50b1N0cmluZygpO1xuICAgIGNvbnN0IGZyYWN0aW9uUGFydFN0cmluZyA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVsxXSB8fCAnJztcbiAgICBjb25zdCBmcmFjdGlvblBhcnRQYWRkZWQgPVxuICAgICAgICBkZWNpbWFsTGltaXQgPT09IG51bGxcbiAgICAgICAgICAgID8gZnJhY3Rpb25QYXJ0U3RyaW5nXG4gICAgICAgICAgICA6IGZyYWN0aW9uUGFydFN0cmluZy5zdWJzdHIoMCwgZGVjaW1hbExpbWl0KSArXG4gICAgICAgICAgICAgICcwJy5yZXBlYXQoTWF0aC5tYXgoZGVjaW1hbExpbWl0IC0gZnJhY3Rpb25QYXJ0U3RyaW5nLmxlbmd0aCwgMCkpO1xuICAgIGNvbnN0IHJlbWFpbmRlciA9IGludGVnZXJQYXJ0U3RyaW5nLmxlbmd0aCAlIDM7XG4gICAgY29uc3Qgc2lnbiA9IHZhbHVlIDwgMCA/ICctJyA6ICcnO1xuICAgIGxldCByZXN1bHQgPSBzaWduICsgaW50ZWdlclBhcnRTdHJpbmcuY2hhckF0KDApO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBpbnRlZ2VyUGFydFN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSAlIDMgPT09IHJlbWFpbmRlciAmJiBpbnRlZ2VyUGFydFN0cmluZy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gdGhvdXNhbmRTZXBhcmF0b3I7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgKz0gaW50ZWdlclBhcnRTdHJpbmcuY2hhckF0KGkpO1xuICAgIH1cblxuICAgIHJldHVybiAhIWZyYWN0aW9uUGFydFBhZGRlZCB8fCBkZWNpbWFsTGltaXRcbiAgICAgICAgPyByZXN1bHQgKyBkZWNpbWFsU2VwYXJhdG9yICsgZnJhY3Rpb25QYXJ0UGFkZGVkXG4gICAgICAgIDogcmVzdWx0O1xufVxuIl19