import { CHAR_NO_BREAK_SPACE, getDocumentOrShadowRoot, isNativeFocused, isSafari, tuiAssert, } from '@taiga-ui/cdk';
/**
 * Used to finish a number with zeros to a given precision
 */
export function tuiCreateAutoCorrectedNumberPipe(decimalLimit, decimalSymbol, nativeInput) {
    if (decimalLimit === void 0) { decimalLimit = 0; }
    if (decimalSymbol === void 0) { decimalSymbol = ','; }
    tuiAssert.assert(Number.isInteger(decimalLimit));
    tuiAssert.assert(decimalLimit >= 0);
    // Guess for which browser I need this :)
    var previousCaret = -1;
    var unlucky = !!nativeInput && isSafari(nativeInput);
    if (nativeInput && unlucky) {
        nativeInput.addEventListener('beforeinput', function () {
            previousCaret = nativeInput.selectionStart || 0;
        });
    }
    return function (conformedValue, config) {
        // remove these hacks after text mask library has changed
        if (nativeInput && unlucky && isNativeFocused(nativeInput)) {
            var caret_1 = calculateSafariCaret(config.previousConformedValue, conformedValue, previousCaret);
            setTimeout(function () {
                nativeInput.setSelectionRange(caret_1, caret_1);
            });
        }
        if (nativeInput &&
            nativeInput.ownerDocument !== getDocumentOrShadowRoot(nativeInput) &&
            isNativeFocused(nativeInput) &&
            config.currentCaretPosition) {
            var realCaretPosition_1 = config.currentCaretPosition +
                calculateCaretGap(config.previousConformedValue, conformedValue);
            setTimeout(function () {
                nativeInput.setSelectionRange(realCaretPosition_1, realCaretPosition_1);
            });
        }
        if (conformedValue === '' || !decimalLimit) {
            return { value: conformedValue };
        }
        var withDecimalSymbol = addDecimalSymbolIfNeeded(conformedValue, decimalSymbol);
        var decimalPart = withDecimalSymbol.split(decimalSymbol)[1];
        var zeroPaddingSize = decimalLimit - decimalPart.length;
        return {
            value: withDecimalSymbol + '0'.repeat(zeroPaddingSize),
        };
    };
}
function addDecimalSymbolIfNeeded(value, decimalSymbol) {
    if (decimalSymbol === void 0) { decimalSymbol = ','; }
    return value.indexOf(decimalSymbol) === -1 ? value + decimalSymbol : value;
}
function calculateSafariCaret(previousValue, current, previousCaret, decimalSymbol) {
    if (previousValue === void 0) { previousValue = ''; }
    if (decimalSymbol === void 0) { decimalSymbol = ','; }
    var tailRegex = new RegExp(decimalSymbol + ".+");
    var previousWithoutTail = previousValue.replace(tailRegex, '');
    var currentWithoutTail = current.replace(tailRegex, '');
    var pasteOrCutOperation = Math.abs(previousWithoutTail.length - currentWithoutTail.length) > 2;
    if (pasteOrCutOperation) {
        return current.length;
    }
    if (previousValue.length === current.length) {
        if (previousValue.indexOf(decimalSymbol) <= previousCaret) {
            return calculateChangedTailIndex(previousValue, current);
        }
        return previousWithoutTail === currentWithoutTail
            ? previousCaret - 1
            : previousCaret + 1;
    }
    if (previousValue.length === 0) {
        return 1;
    }
    var changeLength = current.length - previousValue.length;
    return previousCaret + changeLength;
}
function calculateChangedTailIndex(previous, current) {
    for (var i = 0; i < current.length; i++) {
        if (previous[i] !== current[i]) {
            return current[i] === '0' ? i : i + 1;
        }
    }
    return current.length;
}
function calculateCaretGap(previousValue, current) {
    if (previousValue === void 0) { previousValue = ''; }
    var pasteOrCutOperation = Math.abs(previousValue.length - current.length) > 2;
    if (pasteOrCutOperation) {
        return 0;
    }
    var wereSpaces = previousValue.split(CHAR_NO_BREAK_SPACE).length;
    var nowSpaces = current.split(CHAR_NO_BREAK_SPACE).length;
    return nowSpaces - wereSpaces;
}
//# sourceMappingURL=data:application/json;base64,