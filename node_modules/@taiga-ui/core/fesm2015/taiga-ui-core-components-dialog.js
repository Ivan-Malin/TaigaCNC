import { __decorate, __param } from 'tslib';
import { InjectionToken, ElementRef, Inject, HostBinding, Component, ChangeDetectionStrategy, ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule } from '@angular/core';
import { typedFromEvent, isCurrentTarget, containsOrAfter, TuiDestroyService, TUI_IS_MOBILE, AbstractTuiDialogService, TUI_DIALOGS, TuiPreventDefaultModule } from '@taiga-ui/cdk';
import { tuiSlideInTop, tuiFadeIn } from '@taiga-ui/core/animations';
import { TUI_CLOSE_WORD } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge, Observable } from 'rxjs';
import { DOCUMENT, CommonModule } from '@angular/common';
import { WINDOW } from '@ng-web-apis/common';
import { filter, switchMapTo, take, takeUntil } from 'rxjs/operators';
import { TuiButtonModule } from '@taiga-ui/core/components/button';
import { TuiIdService } from '@taiga-ui/cdk/services';

const TUI_DIALOGS_CLOSE = new InjectionToken('A stream to close dialogs', {
    factory: () => EMPTY,
});
const SCROLLBAR_PLACEHOLDER = 17;
function dialogCloseStreamFactory(documentRef, windowRef, { nativeElement }, close$, destroy$, { dismissible }) {
    return dismissible
        ? merge(typedFromEvent(nativeElement, 'click').pipe(filter(isCurrentTarget)), typedFromEvent(documentRef, 'keydown').pipe(filter(({ key, target }) => key === 'Escape' &&
            target instanceof Element &&
            (!containsOrAfter(nativeElement, target) ||
                nativeElement.contains(target)))), typedFromEvent(documentRef, 'mousedown').pipe(filter(({ target, clientX }) => target instanceof Element &&
            windowRef.innerWidth - clientX > SCROLLBAR_PLACEHOLDER &&
            !containsOrAfter(nativeElement, target)), switchMapTo(typedFromEvent(documentRef, 'mouseup').pipe(take(1), filter(({ target }) => target instanceof Element &&
            !containsOrAfter(nativeElement, target))))), close$).pipe(takeUntil(destroy$))
        : close$;
}
const TUI_DIALOG_CLOSE_STREAM = new InjectionToken('Dialogs closing stream');
const TUI_DIALOG_PROVIDERS = [
    TuiDestroyService,
    {
        provide: TUI_DIALOG_CLOSE_STREAM,
        deps: [
            DOCUMENT,
            WINDOW,
            ElementRef,
            TUI_DIALOGS_CLOSE,
            TuiDestroyService,
            POLYMORPHEUS_CONTEXT,
        ],
        useFactory: dialogCloseStreamFactory,
    },
];

const SMALL_DIALOGS_ANIMATION = { value: '', params: { start: '40px' } };
const FULLSCREEN_DIALOGS_ANIMATION = { value: '', params: { start: '100vh' } };
const REQUIRED_ERROR = new Error('Required dialog was dismissed');
// @dynamic
let TuiDialogComponent = class TuiDialogComponent {
    constructor(isMobile, context, close$, closeWord$) {
        this.isMobile = isMobile;
        this.context = context;
        this.closeWord$ = closeWord$;
        close$.subscribe(() => {
            this.close();
        });
    }
    get size() {
        return this.context.size;
    }
    get header() {
        return this.context.header;
    }
    get h() {
        if (this.isMobile) {
            return 'h5';
        }
        switch (this.size) {
            case 's':
                return 'h5';
            case 'm':
                return 'h4';
            default:
                return 'h3';
        }
    }
    get slideInTop() {
        return this.size === 'fullscreen' || this.size === 'page' || this.isMobile
            ? FULLSCREEN_DIALOGS_ANIMATION
            : SMALL_DIALOGS_ANIMATION;
    }
    close() {
        if (this.context.required) {
            this.context.$implicit.error(REQUIRED_ERROR);
        }
        else {
            this.context.$implicit.complete();
        }
    }
};
TuiDialogComponent.ctorParameters = () => [
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [POLYMORPHEUS_CONTEXT,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DIALOG_CLOSE_STREAM,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_CLOSE_WORD,] }] }
];
__decorate([
    HostBinding('attr.data-size')
], TuiDialogComponent.prototype, "size", null);
__decorate([
    HostBinding('class._centered')
], TuiDialogComponent.prototype, "header", null);
__decorate([
    HostBinding('@tuiSlideInTop')
], TuiDialogComponent.prototype, "slideInTop", null);
TuiDialogComponent = __decorate([
    Component({
        selector: 'tui-dialog',
        template: "<header\n    *ngIf=\"header\"\n    polymorpheus-outlet\n    class=\"header\"\n    [content]=\"header\"\n    [context]=\"context\"\n></header>\n<div class=\"content\">\n    <h2 class=\"heading tui-text_{{h}}\" [id]=\"context.id\">{{context.label}}</h2>\n    <section\n        polymorpheus-outlet\n        [context]=\"context\"\n        [content]=\"context.content\"\n    ></section>\n</div>\n<div *ngIf=\"context.closeable\" class=\"wrapper\">\n    <button\n        tuiIconButton\n        tuiPreventDefault=\"mousedown\"\n        automation-id=\"tui-dialog__close\"\n        class=\"close\"\n        size=\"s\"\n        appearance=\"\"\n        icon=\"tuiIconCloseLarge\"\n        shape=\"rounded\"\n        [title]=\"closeWord$ | async\"\n        (click)=\"close()\"\n    ></button>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TUI_DIALOG_PROVIDERS,
        animations: [tuiSlideInTop, tuiFadeIn],
        host: {
            '[@tuiFadeIn]': 'true',
        },
        styles: [":host{font:var(--tui-font-text-m);position:relative;display:flex;flex-direction:column;box-sizing:border-box;margin:auto;border-radius:16px;border:40px solid transparent}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;box-shadow:0 18px 30px rgba(51,51,51,.52);content:'';border-radius:inherit;pointer-events:none}:host[data-size='s']{width:480px}:host[data-size='s'] .content{padding:24px}:host[data-size='s'] .heading{margin-bottom:8px}:host[data-size='m']{width:680px}:host[data-size='m'] .heading{margin-bottom:12px}:host[data-size='l']{width:880px}:host[data-size='l'] .heading{margin-bottom:16px}:host[data-size=fullscreen],:host[data-size=page]{width:100vw;min-height:100vh;border-radius:0;border:none;background:var(--tui-base-01)}:host[data-size=fullscreen] .content,:host[data-size=page] .content{padding:48px calc(50vw - 720px / 2)}:host[data-size=fullscreen] .heading,:host[data-size=page] .heading{margin-bottom:16px}:host[data-size=page] .content{padding:0}:host._centered{text-align:center}@media screen and (max-width:599px){:host[data-size]{min-width:100vw;width:100vw;max-width:100vw;border-radius:0;border:none;margin:auto 0 0}:host[data-size] .content{padding:32px 24px}:host[data-size] .heading{margin-bottom:8px}:host[data-size=fullscreen] .header{flex:1}}.heading{margin:0;word-wrap:break-word}.heading:empty{display:none}.header{display:flex;border-top-left-radius:inherit;border-top-right-radius:inherit;overflow:hidden}.content{border-radius:inherit;padding:32px;background:var(--tui-base-01)}.content:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.wrapper{position:-webkit-sticky;position:sticky;top:0;order:-1}.close{transition-property:background;transition-duration:.3s;transition-timing-function:ease-in-out;position:absolute;top:0;right:0;color:var(--tui-base-01)}@media screen and (max-width:599px){.close{background:0 0;color:var(--tui-base-06)}.close:hover{color:var(--tui-base-07)}}@media screen and (min-width:600px){.close{position:fixed;top:24px;right:24px;background:rgba(104,104,104,.96)}.close:hover{background:rgba(159,159,159,.86)}:host:not([data-size=fullscreen]) .close{-webkit-animation:.3s tuiFadeIn;animation:.3s tuiFadeIn}:host:not([data-size=fullscreen]).ng-animating .close{display:none}}"]
    }),
    __param(0, Inject(TUI_IS_MOBILE)),
    __param(1, Inject(POLYMORPHEUS_CONTEXT)),
    __param(2, Inject(TUI_DIALOG_CLOSE_STREAM)),
    __param(3, Inject(TUI_CLOSE_WORD))
], TuiDialogComponent);

const DIALOG = new PolymorpheusComponent(TuiDialogComponent);
const ɵ0 = undefined;
const DEFAULT_OPTIONS = {
    size: 'm',
    required: false,
    closeable: true,
    dismissible: true,
    label: '',
    header: '',
    data: ɵ0,
};
let TuiDialogService = class TuiDialogService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.component = DIALOG;
        this.defaultOptions = DEFAULT_OPTIONS;
    }
};
TuiDialogService.ɵprov = ɵɵdefineInjectable({ factory: function TuiDialogService_Factory() { return new TuiDialogService(ɵɵinject(TuiIdService)); }, token: TuiDialogService, providedIn: "root" });
TuiDialogService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], TuiDialogService);

let TuiDialogModule = class TuiDialogModule {
};
TuiDialogModule = __decorate([
    NgModule({
        declarations: [TuiDialogComponent],
        exports: [TuiDialogComponent],
        entryComponents: [TuiDialogComponent],
        providers: [
            {
                provide: TUI_DIALOGS,
                useExisting: TuiDialogService,
                multi: true,
            },
        ],
        imports: [PolymorpheusModule, TuiButtonModule, CommonModule, TuiPreventDefaultModule],
    })
], TuiDialogModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DIALOGS_CLOSE, TUI_DIALOG_CLOSE_STREAM, TUI_DIALOG_PROVIDERS, TuiDialogComponent, TuiDialogModule, TuiDialogService, dialogCloseStreamFactory, ɵ0 };
//# sourceMappingURL=taiga-ui-core-components-dialog.js.map
