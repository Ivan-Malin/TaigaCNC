import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, Optional, Input, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { isNativeFocused, TuiFocusVisibleService, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiDestroyService } from '@taiga-ui/cdk';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import { Observable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';

var TuiLinkComponent_1;
// @bad TODO: Think about extending Interactive
let TuiLinkComponent = TuiLinkComponent_1 = class TuiLinkComponent {
    constructor(elementRef, mode$, routerLinkActive, focusVisible$) {
        this.elementRef = elementRef;
        this.mode$ = mode$;
        this.routerLinkActive = routerLinkActive;
        this.pseudo = false;
        this.icon = null;
        this.iconAlign = 'right';
        this.iconRotated = false;
        this.mode = null;
        this.focusVisible = false;
        focusVisible$.subscribe(visible => {
            this.focusVisible = visible;
        });
    }
    get nativeFocusableElement() {
        return this.elementRef.nativeElement;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get active() {
        return !!this.routerLinkActive && this.routerLinkActive.isActive;
    }
    get hasIcon() {
        return this.icon !== null;
    }
    get iconAlignLeft() {
        return this.hasIcon && this.iconAlign === 'left';
    }
    get iconAlignRight() {
        return this.hasIcon && this.iconAlign === 'right';
    }
};
TuiLinkComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: RouterLinkActive, decorators: [{ type: Optional }, { type: Inject, args: [RouterLinkActive,] }] },
    { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] }
];
__decorate([
    Input(),
    HostBinding('class._pseudo'),
    tuiDefaultProp()
], TuiLinkComponent.prototype, "pseudo", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLinkComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLinkComponent.prototype, "iconAlign", void 0);
__decorate([
    Input(),
    HostBinding('class._icon-rotated'),
    tuiDefaultProp()
], TuiLinkComponent.prototype, "iconRotated", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-mode'),
    tuiDefaultProp()
], TuiLinkComponent.prototype, "mode", void 0);
__decorate([
    HostBinding('class._focus-visible')
], TuiLinkComponent.prototype, "focusVisible", void 0);
__decorate([
    HostBinding('class._active')
], TuiLinkComponent.prototype, "active", null);
TuiLinkComponent = TuiLinkComponent_1 = __decorate([
    Component({
        selector: 'a[tuiLink], button[tuiLink]',
        template: "<tui-svg *ngIf=\"iconAlignLeft\" class=\"icon icon_left\" [src]=\"icon\"></tui-svg>\n<span class=\"content\">\n    <ng-content></ng-content>\n</span>\n<tui-svg *ngIf=\"iconAlignRight\" class=\"icon icon_right\" [src]=\"icon\"></tui-svg>\n",
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiLinkComponent_1),
            },
            TuiFocusVisibleService,
            TuiDestroyService,
            MODE_PROVIDER,
        ],
        changeDetection: ChangeDetectionStrategy.OnPush,
        exportAs: 'tuiLink',
        host: {
            '($.data-mode.attr)': 'mode$',
        },
        styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;transition-property:color;transition-duration:.3s;transition-timing-function:ease-in-out;color:var(--tui-link);text-decoration:none;text-align:left;text-transform:inherit;font-weight:inherit;cursor:pointer;outline:0}:host:hover{color:var(--tui-link-hover)}:host[data-mode=onLight]{color:var(--tui-text-03)}:host[data-mode=onLight]._active,:host[data-mode=onLight]:hover{color:var(--tui-text-01)}:host[data-mode=onLight]._pseudo{color:var(--tui-text-01)}:host[data-mode=onLight]._pseudo._active,:host[data-mode=onLight]._pseudo:hover{color:var(--tui-text-03)}:host[data-mode=onLight][data-mode=negative]{color:var(--tui-negative-night)}:host[data-mode=onLight][data-mode=negative]._active,:host[data-mode=onLight][data-mode=negative]:active,:host[data-mode=onLight][data-mode=negative]:hover{color:var(--tui-negative-night-hover)}:host[data-mode=onDark]{color:var(--tui-text-03-night)}:host[data-mode=onDark]._active,:host[data-mode=onDark]:active,:host[data-mode=onDark]:hover{color:var(--tui-text-01-night)}:host[data-mode=onDark]._pseudo{color:var(--tui-text-01-night)}:host[data-mode=onDark]._pseudo._active,:host[data-mode=onDark]._pseudo:active,:host[data-mode=onDark]._pseudo:hover{color:var(--tui-text-03-night)}:host[data-mode=onDark][data-mode=positive]{color:var(--tui-positive-night)}:host[data-mode=onDark][data-mode=positive]._active,:host[data-mode=onDark][data-mode=positive]:active,:host[data-mode=onDark][data-mode=positive]:hover{color:var(--tui-positive-night-hover)}:host[data-mode=negative]{color:var(--tui-negative)}:host[data-mode=negative]:hover{color:var(--tui-negative-hover)}:host[data-mode=positive]{color:var(--tui-positive)}:host[data-mode=positive]:hover{color:var(--tui-positive-hover)}.content{display:inline-block}:host._focus-visible .content{background:var(--tui-selection)}:host[data-mode=onLight]._focus-visible .content{background:var(--tui-text-01);color:var(--tui-base-01)}:host[data-mode=onDark]._focus-visible .content{background:var(--tui-base-01);color:var(--tui-text-01)}:host[data-mode=positive]._focus-visible .content{background:var(--tui-success-bg)}:host[data-mode=negative]._focus-visible .content{background:var(--tui-error-bg)}:host._pseudo .content{padding-bottom:.15em;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}.icon{transition-property:transform;transition-duration:.3s;transition-timing-function:ease-in-out;margin-top:-2px;opacity:.8}.icon_left{margin-right:4px}.icon_right{margin-left:4px}:host._hovered .icon{opacity:1}:host._icon-rotated .icon{transform:rotate(180deg)}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TUI_MODE)),
    __param(2, Optional()),
    __param(2, Inject(RouterLinkActive)),
    __param(3, Inject(TuiFocusVisibleService))
], TuiLinkComponent);

let TuiLinkModule = class TuiLinkModule {
};
TuiLinkModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiSvgModule],
        declarations: [TuiLinkComponent],
        exports: [TuiLinkComponent],
    })
], TuiLinkModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLinkComponent, TuiLinkModule };
//# sourceMappingURL=taiga-ui-core-components-link.js.map
