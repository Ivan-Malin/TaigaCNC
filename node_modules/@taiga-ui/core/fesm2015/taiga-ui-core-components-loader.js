import { __decorate, __param } from 'tslib';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Inject, ElementRef, Input, HostBinding, Component, ChangeDetectionStrategy, NgZone, Directive, NgModule } from '@angular/core';
import { USER_AGENT, ANIMATION_FRAME } from '@ng-web-apis/common';
import { isEdgeOlderThan, isIE, isSafari, blurNativeFocused, isNativeFocusedIn, TUI_IS_IOS, tuiDefaultProp, tuiRequiredSetter, tuiZonefree, TuiDestroyService } from '@taiga-ui/cdk';
import { sizeBigger } from '@taiga-ui/core/utils/miscellaneous';
import { Observable } from 'rxjs';
import { pairwise, takeUntil } from 'rxjs/operators';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

// @dynamic
let TuiLoaderComponent = class TuiLoaderComponent {
    constructor(documentRef, elementRef, userAgent, isIos) {
        this.documentRef = documentRef;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.isIos = isIos;
        this.size = 'm';
        this.inheritColor = false;
        this.overlay = false;
        this.textContent = null;
        this.loading = true;
        this.animatedWithJs = isEdgeOlderThan(17, this.userAgent) || isIE(this.userAgent);
        this.isApple = isSafari(this.elementRef.nativeElement) || this.isIos;
    }
    set showLoader(value) {
        // @bad TODO: https://github.com/angular/angular/issues/32083 think of a better way
        if (value && this.focused) {
            blurNativeFocused(this.documentRef);
        }
        this.loading = value;
    }
    get hasOverlay() {
        return this.overlay && this.loading;
    }
    get hasText() {
        return !!this.textContent;
    }
    get isHorizontal() {
        return !sizeBigger(this.size);
    }
    get focused() {
        return isNativeFocusedIn(this.elementRef.nativeElement);
    }
};
TuiLoaderComponent.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "inheritColor", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "overlay", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLoaderComponent.prototype, "textContent", void 0);
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiLoaderComponent.prototype, "showLoader", null);
__decorate([
    HostBinding('class._loading')
], TuiLoaderComponent.prototype, "loading", void 0);
__decorate([
    HostBinding('class._animated-with-js')
], TuiLoaderComponent.prototype, "animatedWithJs", void 0);
TuiLoaderComponent = __decorate([
    Component({
        selector: 'tui-loader',
        template: "<fieldset\n    class=\"content\"\n    [class.content_has-overlay]=\"hasOverlay\"\n    [class.content_loading]=\"loading\"\n    [disabled]=\"loading && !isApple\"\n>\n    <ng-content></ng-content>\n</fieldset>\n\n<div\n    *ngIf=\"loading\"\n    class=\"loader\"\n    [attr.data-tui-element-size]=\"size\"\n    [class.loader_horizontal]=\"isHorizontal\"\n    [class.loader_inherit-color]=\"inheritColor\"\n>\n    <svg\n        automation-id=\"tui-loader__loader\"\n        class=\"icon\"\n        focusable=\"false\"\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <circle\n            class=\"circle\"\n            cx=\"50\"\n            cy=\"50\"\n            r=\"50\"\n            stroke-dasharray=\"314\"\n        ></circle>\n    </svg>\n\n    <div\n        polymorpheus-outlet\n        *ngIf=\"hasText\"\n        automation-id=\"tui-loader__text\"\n        class=\"text\"\n        [class.text_horizontal]=\"isHorizontal\"\n        [content]=\"textContent\"\n    ></div>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["@-webkit-keyframes tuiLoaderDashOffset{0%,100%{stroke-dashoffset:-66}50%{stroke-dashoffset:-314}}@keyframes tuiLoaderDashOffset{0%,100%{stroke-dashoffset:-66}50%{stroke-dashoffset:-314}}@-webkit-keyframes tuiLoaderRotate{0%{transform:rotate(0)}50%{transform:rotate(1turn)}100%{transform:rotate(3turn)}}@keyframes tuiLoaderRotate{0%{transform:rotate(0)}50%{transform:rotate(1turn)}100%{transform:rotate(3turn)}}:host{position:relative;display:flex}:host._loading{overflow:hidden}.content{z-index:0;min-width:100%;height:100%;padding:0;margin:0;border:none}.content_has-overlay{opacity:.3}.content_loading{pointer-events:none}.loader{position:relative;left:-100%;display:flex;flex-direction:column;align-items:center;justify-content:center;min-width:100%;flex-shrink:0;-ms-grid-row-align:center;align-self:center;color:var(--tui-text-01);stroke:var(--tui-primary);-webkit-animation:.3s tuiFadeIn;animation:.3s tuiFadeIn}.loader.loader_horizontal{flex-direction:row}.loader.loader_inherit-color{color:inherit;stroke:currentColor}.loader[data-tui-element-size=xs]{font-size:12px;stroke-width:38}.loader[data-tui-element-size='s']{font-size:16px;stroke-width:25}.loader[data-tui-element-size='m']{font-size:24px;stroke-width:17}.loader[data-tui-element-size='l']{font-size:40px;stroke-width:15}.loader[data-tui-element-size=xl]{font-size:56px;stroke-width:14}.loader[data-tui-element-size=xxl]{font-size:80px;stroke-width:10}.text{font:var(--tui-font-text-s);color:var(--tui-text-01);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-top:16px;color:inherit;max-width:100%;text-align:center;stroke-width:0}.text_horizontal{margin:0 0 0 16px}.icon{display:block;min-width:1em;max-width:1em;min-height:1em;max-height:1em;margin:4px -.5em;border-radius:100%;overflow:hidden;transform:scale(1,-1)}:host:not(._animated-with-js) .icon{-webkit-animation:3s linear infinite tuiLoaderRotate;animation:3s linear infinite tuiLoaderRotate}.circle{fill:none;stroke:inherit;stroke-width:inherit;-webkit-animation:3s linear infinite tuiLoaderDashOffset;animation:3s linear infinite tuiLoaderDashOffset}"]
    }),
    __param(0, Inject(DOCUMENT)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(USER_AGENT)),
    __param(3, Inject(TUI_IS_IOS))
], TuiLoaderComponent);

const PERIMETER = 314;
const COEFFICIENT = 1.5;
let TuiLoaderDirective = class TuiLoaderDirective {
    constructor(animationFrame$, ngZone, destroy$, elementRef, userAgent) {
        this.elementRef = elementRef;
        this.strokeDasharray = PERIMETER;
        this.strokeDashoffset = 0;
        if (!isEdgeOlderThan(17, userAgent) && !isIE(userAgent)) {
            return;
        }
        animationFrame$
            .pipe(tuiZonefree(ngZone), pairwise(), takeUntil(destroy$))
            .subscribe(([cur, prev]) => {
            this.animate(prev - cur);
        });
    }
    animate(delta) {
        if (this.strokeDasharray < 0) {
            this.strokeDasharray = PERIMETER * 2;
            this.strokeDashoffset = 0;
        }
        const strokeDasharray = Math.abs(this.strokeDasharray - PERIMETER);
        const fps = 1000 / delta;
        const offsetStep = 1 + Math.floor(this.strokeDasharray / PERIMETER);
        const { style } = this.elementRef.nativeElement;
        style.strokeDashoffset = this.strokeDashoffset.toString();
        style.strokeDasharray = PERIMETER - strokeDasharray + ' ' + strokeDasharray;
        this.strokeDasharray -= PERIMETER / COEFFICIENT / fps;
        this.strokeDashoffset += (offsetStep * PERIMETER) / COEFFICIENT / fps;
        // this.elementRef.nativeElement.parentElement!.style.animation = 'none';
    }
};
TuiLoaderDirective.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
];
TuiLoaderDirective = __decorate([
    Directive({
        selector: 'circle',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ANIMATION_FRAME)),
    __param(1, Inject(NgZone)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(ElementRef)),
    __param(4, Inject(USER_AGENT))
], TuiLoaderDirective);

let TuiLoaderModule = class TuiLoaderModule {
};
TuiLoaderModule = __decorate([
    NgModule({
        imports: [CommonModule, PolymorpheusModule],
        declarations: [TuiLoaderComponent, TuiLoaderDirective],
        exports: [TuiLoaderComponent],
    })
], TuiLoaderModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLoaderComponent, TuiLoaderDirective, TuiLoaderModule };
//# sourceMappingURL=taiga-ui-core-components-loader.js.map
