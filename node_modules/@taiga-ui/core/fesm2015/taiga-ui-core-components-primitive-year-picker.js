import { __decorate } from 'tslib';
import { EventEmitter, Input, Output, HostBinding, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { TuiMonth, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, TuiMonthRange, TuiYear, inRange, tuiDefaultProp, TuiHoveredModule, TuiPressedModule, TuiRepeatTimesModule, TuiLetModule } from '@taiga-ui/cdk';
import { TuiScrollIntoViewModule } from '@taiga-ui/core/directives/scroll-into-view';

const LIMIT = 100;
const ITEMS_IN_ROW = 4;
let TuiPrimitiveYearPickerComponent = class TuiPrimitiveYearPickerComponent {
    constructor() {
        this.value = null;
        this.initialItem = TuiMonth.currentLocal();
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.yearClick = new EventEmitter();
        this.hoveredItem = null;
        this.pressedItem = null;
        this.currentYear = TuiMonth.currentLocal().year;
    }
    get isSingle() {
        const { value } = this;
        return !!value && this.isRange(value) && value.from.yearSame(value.to);
    }
    get rows() {
        return Math.ceil((this.calculatedMax - this.calculatedMin) / ITEMS_IN_ROW);
    }
    get calculatedMin() {
        const initial = this.initialItem.year - LIMIT;
        return this.min.year > initial ? this.min.year : initial;
    }
    get calculatedMax() {
        const initial = this.initialItem.year + LIMIT;
        return this.max.year < initial ? this.max.year + 1 : initial;
    }
    isRange(item) {
        return item instanceof TuiMonthRange;
    }
    scrollItemIntoView(item) {
        return this.initialItem.year === item;
    }
    getItem(rowIndex, colIndex) {
        return rowIndex * ITEMS_IN_ROW + colIndex + this.calculatedMin;
    }
    getItemState(item) {
        const { disabledItemHandler, max, pressedItem, hoveredItem } = this;
        if (max.year < item ||
            (disabledItemHandler !== ALWAYS_FALSE_HANDLER && disabledItemHandler(item))) {
            return "disabled" /* Disabled */;
        }
        if (pressedItem === item) {
            return "pressed" /* Pressed */;
        }
        if (hoveredItem === item) {
            return "hovered" /* Hovered */;
        }
        return null;
    }
    getItemRange(item) {
        const { value, hoveredItem } = this;
        if (value === null) {
            return null;
        }
        if (value instanceof TuiYear) {
            return value.year === item ? "single" /* Single */ : null;
        }
        if ((value.from.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem > value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem < value.from.year &&
                value.from.yearSame(value.to))) {
            return "start" /* Start */;
        }
        if ((value.to.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem < value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem > value.from.year &&
                value.from.yearSame(value.to))) {
            return "end" /* End */;
        }
        return value.from.yearSame(value.to) && value.from.year === item
            ? "single" /* Single */
            : null;
    }
    itemIsToday(item) {
        return this.currentYear === item;
    }
    itemIsInterval(item) {
        const { value, hoveredItem } = this;
        if (value === null || !this.isRange(value)) {
            return false;
        }
        if (!value.from.yearSame(value.to)) {
            return value.from.year <= item && value.to.year > item;
        }
        if (hoveredItem === null || value.from.year === hoveredItem) {
            return false;
        }
        return inRange(item, Math.min(value.from.year, hoveredItem), Math.max(value.from.year, hoveredItem));
    }
    onItemHovered(hovered, item) {
        this.updateHoveredItem(hovered, item);
    }
    onItemPressed(pressed, item) {
        this.updatePressedItem(pressed, item);
    }
    onItemClick(item) {
        this.yearClick.emit(new TuiYear(item));
    }
    updateHoveredItem(hovered, item) {
        this.hoveredItem = hovered ? item : null;
    }
    updatePressedItem(pressed, item) {
        this.pressedItem = pressed ? item : null;
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "value", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "initialItem", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    Output()
], TuiPrimitiveYearPickerComponent.prototype, "yearClick", void 0);
__decorate([
    HostBinding('class._single')
], TuiPrimitiveYearPickerComponent.prototype, "isSingle", null);
TuiPrimitiveYearPickerComponent = __decorate([
    Component({
        selector: 'tui-primitive-year-picker',
        template: "<div\n    *tuiRepeatTimes=\"let rowIndex of rows\"\n    automation-id=\"tui-primitive-year-picker__row\"\n    class=\"row\"\n>\n    <ng-container *tuiRepeatTimes=\"let colIndex of 4\">\n        <div\n            *tuiLet=\"getItem(rowIndex, colIndex) as item\"\n            automation-id=\"tui-primitive-year-picker__cell\"\n            class=\"cell\"\n            [class.cell_today]=\"itemIsToday(item)\"\n            [class.cell_interval]=\"itemIsInterval(item)\"\n            [attr.data-tui-element-range]=\"getItemRange(item)\"\n            [attr.data-tui-element-state]=\"getItemState(item)\"\n            [tuiScrollIntoView]=\"scrollItemIntoView(item)\"\n            (tuiHoveredChange)=\"onItemHovered($event, item)\"\n            (tuiPressedChange)=\"onItemPressed($event, item)\"\n            (click)=\"onItemClick(item)\"\n        >\n            <div class=\"item\">{{item}}</div>\n        </div>\n    </ng-container>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{font:var(--tui-font-text-m);display:block}.row{position:relative;z-index:0;display:flex;justify-content:space-between;height:36px;margin:14px 0}.item{position:relative;flex:1;line-height:32px;border-radius:var(--tui-radius-m)}.item:after,.item:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.cell{position:relative;display:flex;align-items:center;justify-content:center;width:63px;text-align:center;outline:0;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent}.cell:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.cell_today:after{position:absolute;left:50%;transform:translate(-50%,0);content:'';bottom:5px;height:2px;width:12px;border-radius:6px;background-color:var(--tui-text-02)}.cell_interval:before{background:var(--tui-base-02)}:host._single .cell_interval:before{background:var(--tui-secondary-hover)}.cell_interval:not(:last-child):before{right:-63px}.cell_interval:last-child:first-child:before{right:0}.cell_interval:first-child>.item{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.cell_interval:last-child>.item{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.cell_interval>.item{border-radius:0}.cell[data-tui-element-range]:after{background-color:var(--tui-primary-text)}.cell[data-tui-element-range]>.item{color:var(--tui-primary-text)}.cell[data-tui-element-range]>.item:after,.cell[data-tui-element-range]>.item:before{background-color:var(--tui-primary)}.cell[data-tui-element-range][data-tui-element-state=hovered]>.item:after,.cell[data-tui-element-range][data-tui-element-state=hovered]>.item:before{background-color:var(--tui-primary-hover)}.cell[data-tui-element-range][data-tui-element-state=pressed]>.item:after,.cell[data-tui-element-range][data-tui-element-state=pressed]>.item:before{background-color:var(--tui-primary-active)}.cell[data-tui-element-range=end]>.item:before{left:4px}.cell[data-tui-element-range=end]>.item:after{left:-32px;right:100%;transform:translateX(23px) scaleY(.6) scaleX(.4) rotate(45deg)}.cell[data-tui-element-range=start]>.item:before{right:4px}.cell[data-tui-element-range=start]>.item:after{left:100%;right:-32px;transform:translateX(-23px) scaleY(.6) scaleX(.4) rotate(45deg)}.cell[data-tui-element-state=disabled]{pointer-events:none}.cell[data-tui-element-state=disabled]>.item{opacity:.36}.cell[data-tui-element-state=hovered]:hover:not([data-tui-element-range])>.item{background-color:var(--tui-secondary-hover)}.cell[data-tui-element-state=pressed]:hover:not([data-tui-element-range])>.item{background-color:var(--tui-secondary-active)}:host{width:252px}.row:first-child{margin-top:0}.row:last-child{margin-bottom:0}"]
    })
], TuiPrimitiveYearPickerComponent);

let TuiPrimitiveYearPickerModule = class TuiPrimitiveYearPickerModule {
};
TuiPrimitiveYearPickerModule = __decorate([
    NgModule({
        imports: [
            TuiHoveredModule,
            TuiPressedModule,
            TuiRepeatTimesModule,
            TuiLetModule,
            TuiScrollIntoViewModule,
        ],
        declarations: [TuiPrimitiveYearPickerComponent],
        exports: [TuiPrimitiveYearPickerComponent],
    })
], TuiPrimitiveYearPickerModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPrimitiveYearPickerComponent, TuiPrimitiveYearPickerModule };
//# sourceMappingURL=taiga-ui-core-components-primitive-year-picker.js.map
