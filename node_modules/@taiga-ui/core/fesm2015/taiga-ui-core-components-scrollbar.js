import { __decorate, __param } from 'tslib';
import { Directive, Inject, ElementRef, Input, HostBinding, ContentChild, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { CSS, USER_AGENT } from '@ng-web-apis/common';
import { isFirefox, getElementOffset, tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_SCROLL_INTO_VIEW } from '@taiga-ui/core/constants';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { CommonModule } from '@angular/common';
import { TuiScrollControlsModule } from '@taiga-ui/core/components/scroll-controls';

let TuiScrollableDirective = class TuiScrollableDirective {
};
TuiScrollableDirective = __decorate([
    Directive({
        selector: '[tuiScrollable]',
    })
], TuiScrollableDirective);

var TuiScrollbarComponent_1;
function scrollRefFactory({ browserScrollRef, }) {
    return browserScrollRef;
}
// @dynamic
let TuiScrollbarComponent = TuiScrollbarComponent_1 = class TuiScrollbarComponent {
    constructor(
    /**
     * TODO: remove "any" in new TS version; https://github.com/ng-web-apis/common/pull/6
     */
    cssRef, elementRef, userAgent) {
        this.cssRef = cssRef;
        this.elementRef = elementRef;
        this.userAgent = userAgent;
        this.hidden = false;
        this.isLegacy = !this.cssRef.supports('position', 'sticky') ||
            (isFirefox(this.userAgent) && !this.cssRef.supports('scrollbar-width', 'none'));
    }
    get showScrollbars() {
        return !this.hidden && (!this.isLegacy || !!this.scrollable);
    }
    get browserScrollRef() {
        return this.scrollable || this.elementRef;
    }
    get showNative() {
        return this.isLegacy && !this.hidden && !this.scrollable;
    }
    scrollIntoView(event) {
        const { detail } = event;
        const { nativeElement } = this.browserScrollRef;
        event.stopPropagation();
        const { offsetTop, offsetLeft } = getElementOffset(nativeElement, detail);
        nativeElement.scrollTop =
            offsetTop + detail.offsetHeight / 2 - nativeElement.clientHeight / 2;
        nativeElement.scrollLeft =
            offsetLeft + detail.offsetWidth / 2 - nativeElement.clientWidth / 2;
    }
};
TuiScrollbarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CSS,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: String, decorators: [{ type: Inject, args: [USER_AGENT,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiScrollbarComponent.prototype, "hidden", void 0);
__decorate([
    HostBinding('class._container'),
    ContentChild(TuiScrollableDirective, { read: ElementRef })
], TuiScrollbarComponent.prototype, "scrollable", void 0);
__decorate([
    HostBinding('class._legacy')
], TuiScrollbarComponent.prototype, "showNative", null);
__decorate([
    HostListener(TUI_SCROLL_INTO_VIEW, ['$event'])
], TuiScrollbarComponent.prototype, "scrollIntoView", null);
TuiScrollbarComponent = TuiScrollbarComponent_1 = __decorate([
    Component({
        selector: 'tui-scrollbar',
        template: "<tui-scroll-controls *ngIf=\"showScrollbars\"></tui-scroll-controls>\n<div class=\"content\">\n    <ng-content></ng-content>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_SCROLL_REF,
                deps: [TuiScrollbarComponent_1],
                useFactory: scrollRefFactory,
            },
        ],
        styles: [":host{position:relative;display:flex;overflow:auto}:host:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}:host:not(._legacy)::-webkit-scrollbar,:host:not(._legacy)::-webkit-scrollbar-thumb{background:0 0;width:0;height:0}:host._legacy{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution:0.001dpcm){:host._legacy::-webkit-scrollbar,:host._legacy::-webkit-scrollbar-thumb{width:16px;height:16px;border-radius:100px;background-clip:padding-box;border:6px solid transparent}:host._legacy::-webkit-scrollbar{background-color:transparent}:host._legacy::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}:host._legacy::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}:host._legacy::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}:host._container tui-scroll-controls{position:absolute}.content{position:relative;z-index:0;flex:1;flex-basis:auto;width:100%}"]
    }),
    __param(0, Inject(CSS)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(USER_AGENT))
], TuiScrollbarComponent);

const SCROLL_REF_SELECTOR = '[tuiScrollRef]';
let TuiScrollRefDirective = class TuiScrollRefDirective {
};
TuiScrollRefDirective = __decorate([
    Directive({
        selector: SCROLL_REF_SELECTOR,
        providers: [
            {
                provide: TUI_SCROLL_REF,
                useExisting: ElementRef,
            },
        ],
    })
], TuiScrollRefDirective);

let TuiScrollbarModule = class TuiScrollbarModule {
};
TuiScrollbarModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiScrollControlsModule],
        declarations: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective],
        exports: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective],
    })
], TuiScrollbarModule);

/**
 * Generated bundle index. Do not edit.
 */

export { SCROLL_REF_SELECTOR, TuiScrollRefDirective, TuiScrollableDirective, TuiScrollbarComponent, TuiScrollbarModule, scrollRefFactory };
//# sourceMappingURL=taiga-ui-core-components-scrollbar.js.map
