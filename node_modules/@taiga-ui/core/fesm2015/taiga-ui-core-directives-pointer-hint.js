import { __decorate, __param } from 'tslib';
import { ElementRef, Inject, Input, Directive, NgModule } from '@angular/core';
import { typedFromEvent, TuiDestroyService, TuiHoveredService, tuiRequiredSetter } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { filter, startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';

let TuiPointerHintDirective = class TuiPointerHintDirective extends AbstractTuiHint {
    constructor(elementRef, hintService, destroy$, hoveredService) {
        super(elementRef, hintService);
        this.destroy$ = destroy$;
        this.content = '';
        this.currentMouseRect = this.mousePositionToClientRect();
        const hint$ = hoveredService.createHovered$(this.elementRef.nativeElement).pipe(filter(() => !!this.content), startWith(false), distinctUntilChanged());
        hint$.pipe(takeUntil(destroy$)).subscribe({
            next: visible => {
                if (visible) {
                    this.showTooltip();
                }
                else {
                    this.hideTooltip();
                }
            },
            complete: () => {
                this.hideTooltip();
            },
        });
        this.initMouseMoveSubscription();
    }
    set tuiPointerHint(value) {
        if (!value) {
            this.hideTooltip();
            this.content = '';
            return;
        }
        this.content = value;
    }
    getElementClientRect() {
        return this.currentMouseRect;
    }
    initMouseMoveSubscription() {
        const mouseMove$ = typedFromEvent(this.elementRef.nativeElement, 'mousemove');
        mouseMove$.pipe(takeUntil(this.destroy$)).subscribe(({ clientX, clientY }) => {
            this.currentMouseRect = this.mousePositionToClientRect(clientX, clientY);
        });
    }
    mousePositionToClientRect(x = 0, y = 0) {
        return {
            left: x,
            right: x,
            top: y,
            bottom: y,
            width: 0,
            height: 0,
        };
    }
};
TuiPointerHintDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] }
];
__decorate([
    Input(),
    tuiRequiredSetter()
], TuiPointerHintDirective.prototype, "tuiPointerHint", null);
TuiPointerHintDirective = __decorate([
    Directive({
        selector: '[tuiPointerHint]:not(ng-container)',
        providers: [TuiDestroyService],
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(TuiHintService)),
    __param(2, Inject(TuiDestroyService)),
    __param(3, Inject(TuiHoveredService))
], TuiPointerHintDirective);

let TuiPointerHintModule = class TuiPointerHintModule {
};
TuiPointerHintModule = __decorate([
    NgModule({
        declarations: [TuiPointerHintDirective],
        exports: [TuiPointerHintDirective],
    })
], TuiPointerHintModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPointerHintDirective, TuiPointerHintModule };
//# sourceMappingURL=taiga-ui-core-directives-pointer-hint.js.map
