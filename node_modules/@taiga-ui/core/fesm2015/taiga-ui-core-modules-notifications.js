import { __decorate, __param } from 'tslib';
import { Inject, Input, Component, ChangeDetectionStrategy, NgModule, ɵɵdefineInjectable, Injectable } from '@angular/core';
import { TuiDestroyService, tuiPure, tuiAssert, TuiLetModule } from '@taiga-ui/cdk';
import { timer, BehaviorSubject, Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiNotificationModule } from '@taiga-ui/core/components/notification';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { tuiFadeInList, tuiSlideInRightList, tuiHeightCollapseList } from '@taiga-ui/core/animations';

const ALERT_AUTOCLOSE_TIMEOUT = 3000;
let TuiNotificationAlertComponent = class TuiNotificationAlertComponent {
    constructor(destroy$) {
        timer(ALERT_AUTOCLOSE_TIMEOUT)
            .pipe(takeUntil(destroy$))
            .subscribe(() => {
            if (this.safeItem.autoClose) {
                this.closeDialog();
            }
        });
    }
    get safeItem() {
        if (!this.item) {
            throw new Error('Notification was created as undefined');
        }
        return this.item;
    }
    get context() {
        return this.calculateContext(this.safeItem);
    }
    closeDialog() {
        this.safeItem.observer.complete();
    }
    calculateContext({ status, data, label, observer, }) {
        return {
            $implicit: status,
            data: data,
            label: label,
            closeHook: () => {
                observer.complete();
            },
            emitHook: (data) => {
                observer.next(data);
            },
            emitAndCloseHook: (data) => {
                observer.next(data);
                observer.complete();
            },
        };
    }
};
TuiNotificationAlertComponent.ctorParameters = () => [
    { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
];
__decorate([
    Input()
], TuiNotificationAlertComponent.prototype, "item", void 0);
__decorate([
    tuiPure
], TuiNotificationAlertComponent.prototype, "calculateContext", null);
TuiNotificationAlertComponent = __decorate([
    Component({
        selector: 'tui-notification-alert',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: "<tui-notification\n    *ngIf=\"safeItem.hasCloseButton else noClose\"\n    [status]=\"safeItem.status\"\n    [hasIcon]=\"safeItem.hasIcon\"\n    (close)=\"closeDialog()\"\n>\n    <label\n        *ngIf=\"safeItem.label\"\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"heading\"\n    >\n        {{safeItem.label}}\n    </label>\n    <div\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__content\"\n        class=\"content\"\n        [content]=\"safeItem.content\"\n        [context]=\"context\"\n    ></div>\n</tui-notification>\n<ng-template #noClose>\n    <tui-notification [status]=\"safeItem.status\" [hasIcon]=\"safeItem.hasIcon\">\n        <label\n            *ngIf=\"safeItem.label\"\n            automation-id=\"tui-notification-alert__heading\"\n            class=\"heading\"\n        >\n            {{safeItem.label}}\n        </label>\n        <div\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__content\"\n            class=\"content\"\n            [content]=\"safeItem.content\"\n            [context]=\"context\"\n        ></div>\n    </tui-notification>\n</ng-template>\n",
        providers: [TuiDestroyService],
        styles: [":host{box-shadow:0 8px 16px rgba(51,51,51,.2);display:block;border-radius:var(--tui-radius-m)}.heading{font:var(--tui-font-text-m);line-height:20px;font-weight:700;margin:0}.content{color:var(--tui-text-01);word-wrap:break-word}.content:empty{display:none}"]
    }),
    __param(0, Inject(TuiDestroyService))
], TuiNotificationAlertComponent);

let TuiNotificationAlertModule = class TuiNotificationAlertModule {
};
TuiNotificationAlertModule = __decorate([
    NgModule({
        imports: [CommonModule, PolymorpheusModule, TuiNotificationModule],
        declarations: [TuiNotificationAlertComponent],
        exports: [TuiNotificationAlertComponent],
    })
], TuiNotificationAlertModule);

class NotificationAlert {
    constructor(observer, content, options) {
        const { label = '', status = "info" /* Info */, hasIcon = true, autoClose = true, hasCloseButton = true, } = options;
        this.observer = observer;
        this.content = content;
        this.label = label;
        this.status = status;
        this.hasIcon = hasIcon;
        this.autoClose = autoClose;
        this.hasCloseButton = hasCloseButton;
        if (options && this.withData(options)) {
            this.data = options.data;
        }
    }
    withData(options) {
        return 'data' in options;
    }
}

const NO_HOST = 'Notifications are disabled, enable support by adding TuiNotificationsModule to your main app module';
let TuiNotificationsService = class TuiNotificationsService {
    constructor() {
        /** @internal */
        this.items$ = new BehaviorSubject([]);
    }
    show(content, options = {}) {
        tuiAssert.assert(!!this.items$.observers.length, NO_HOST);
        return new Observable((observer) => {
            const notification = new NotificationAlert(observer, content, options);
            this.items$.next([...this.items$.value, notification]);
            return () => {
                this.items$.next(this.items$.value.filter(item => item !== notification));
            };
        });
    }
};
TuiNotificationsService.ɵprov = ɵɵdefineInjectable({ factory: function TuiNotificationsService_Factory() { return new TuiNotificationsService(); }, token: TuiNotificationsService, providedIn: "root" });
TuiNotificationsService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], TuiNotificationsService);

let TuiNotificationsHostComponent = class TuiNotificationsHostComponent {
    constructor(service) {
        this.service = service;
    }
};
TuiNotificationsHostComponent.ctorParameters = () => [
    { type: TuiNotificationsService, decorators: [{ type: Inject, args: [TuiNotificationsService,] }] }
];
TuiNotificationsHostComponent = __decorate([
    Component({
        selector: 'tui-notifications-host',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: "<ng-container *tuiLet=\"service.items$ | async as items\">\n    <div\n        *ngIf=\"items.length\"\n        class=\"wrapper\"\n        [@tuiFadeInList]=\"items.length\"\n        [@tuiHeightCollapseList]=\"items.length\"\n        [@tuiSlideInRightList]=\"items.length\"\n    >\n        <tui-notification-alert\n            *ngFor=\"let item of items\"\n            class=\"alert\"\n            role=\"alert\"\n            [item]=\"item\"\n        ></tui-notification-alert>\n    </div>\n</ng-container>\n",
        animations: [tuiFadeInList, tuiSlideInRightList, tuiHeightCollapseList],
        styles: [":host{position:fixed;top:0;left:0;width:100%;height:0}.wrapper{width:288px;margin-left:auto;padding:32px 48px 0 0}@media screen and (max-width:1023px){.wrapper{padding:16px 16px 0 0}}@media screen and (min-width:1360px){.wrapper{width:368px}}.alert:not(:first-child){margin-top:12px}"]
    }),
    __param(0, Inject(TuiNotificationsService))
], TuiNotificationsHostComponent);

const ɵ0 = TuiNotificationsHostComponent;
let TuiNotificationsModule = class TuiNotificationsModule {
};
TuiNotificationsModule = __decorate([
    NgModule({
        imports: [CommonModule, TuiNotificationAlertModule, TuiLetModule],
        declarations: [TuiNotificationsHostComponent],
        exports: [TuiNotificationsHostComponent],
        entryComponents: [TuiNotificationsHostComponent],
        providers: [
            {
                provide: TuiNotificationsHostComponent,
                useValue: ɵ0,
            },
        ],
    })
], TuiNotificationsModule);

/**
 * Generated bundle index. Do not edit.
 */

export { ALERT_AUTOCLOSE_TIMEOUT, NotificationAlert, TuiNotificationAlertComponent, TuiNotificationAlertModule, TuiNotificationsHostComponent, TuiNotificationsModule, TuiNotificationsService, ɵ0 };
//# sourceMappingURL=taiga-ui-core-modules-notifications.js.map
