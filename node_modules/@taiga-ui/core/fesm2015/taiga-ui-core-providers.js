import { watch } from '@taiga-ui/cdk';
import { takeUntil } from 'rxjs/operators';
import { Optional, ElementRef } from '@angular/core';
import { TuiModeDirective } from '@taiga-ui/core/directives/mode';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import { modeFactory } from '@taiga-ui/core/utils/miscellaneous';

function watchedControllerFactory(controller, changeDetectorRef, destroy$) {
    controller.change$.pipe(watch(changeDetectorRef), takeUntil(destroy$)).subscribe();
    return controller;
}

const ɵ0 = modeFactory;
const MODE_PROVIDER = {
    provide: TUI_MODE,
    deps: [[new Optional(), TuiModeDirective], ElementRef],
    useFactory: ɵ0,
};

/**
 * Generated bundle index. Do not edit.
 */

export { MODE_PROVIDER, watchedControllerFactory, ɵ0 };
//# sourceMappingURL=taiga-ui-core-providers.js.map
