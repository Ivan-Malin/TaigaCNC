import { isEdgeOlderThan } from '@taiga-ui/cdk';

/**
 * TODO: remove "any" in new TS version; https://github.com/ng-web-apis/common/pull/6
 */
function areCssVarsSupported(cssRef, userAgent) {
    return cssRef.supports('(--a: 0)') && !isEdgeOlderThan(17, userAgent);
}

function checkFixedPosition(element) {
    if (!element || typeof getComputedStyle === 'undefined') {
        return false;
    }
    const style = getComputedStyle(element);
    return (style.getPropertyValue('position') === 'fixed' ||
        checkFixedPosition(element.parentElement));
}

/**
 * Calculates size of safe area on mobile devices (status bars)
 *
 * ATTENTION: Only use in browser environment
 */
function getSafeAreaSize() {
    if (!CSS.supports('padding-top: env(safe-area-inset-top)')) {
        return 0;
    }
    const div = document.createElement('div');
    div.style.paddingTop = 'env(safe-area-inset-top)';
    document.body.appendChild(div);
    const safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop, 10) || 0;
    document.body.removeChild(div);
    return safeAreaSize;
}

function getScreenWidth(documentRef) {
    return Math.max(documentRef.documentElement.clientWidth, documentRef.defaultView ? documentRef.defaultView.innerWidth : 0);
}

const WIDTH_SEARCH = 'width="';
const HEIGHT_SEARCH = 'height="';
const START = '<svg';
function processIcon(source, name) {
    if (source.includes(`id="${name}"`)) {
        return source;
    }
    const src = source.substring(source.indexOf(START));
    const attributes = src.substring(0, src.indexOf('>'));
    if (!attributes ||
        !attributes.includes(WIDTH_SEARCH) ||
        !attributes.includes(HEIGHT_SEARCH)) {
        return (src.replace(START, `<svg xmlns="http://www.w3.org/2000/svg"><g id="${name}" xmlns="http://www.w3.org/2000/svg"><svg`) + '</g></svg>');
    }
    const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    const widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    const widthString = attributes.substring(widthOffset, attributes.indexOf('"', widthOffset));
    const heightString = attributes.substring(heightOffset, attributes.indexOf('"', heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes('%') ||
        heightString.includes('%')) {
        return src.replace(START, `<svg id="${name}"`);
    }
    const width = parseInt(widthString, 10);
    const height = parseInt(heightString, 10);
    const transform = `translate(-${width / 2},-${height / 2})`;
    return `<g id="${name}" xmlns="http://www.w3.org/2000/svg" transform="${transform}"><svg x="50%" y="50%">${src}</svg></g>`;
}

/**
 * Generated bundle index. Do not edit.
 */

export { areCssVarsSupported, checkFixedPosition, getSafeAreaSize, getScreenWidth, processIcon };
//# sourceMappingURL=taiga-ui-core-utils-dom.js.map
