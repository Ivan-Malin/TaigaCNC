import { __extends, __decorate, __param } from 'tslib';
import { ElementRef, Inject, ChangeDetectorRef, Input, HostBinding, HostListener, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { watch, pressedObservable, isNativeFocused, TuiFocusVisibleService, TuiHoveredService, TuiDestroyService, tuiDefaultProp, TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiInteractive } from '@taiga-ui/cdk';
import { Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiLoaderModule } from '@taiga-ui/core/components/loader';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import { TuiWrapperModule } from '@taiga-ui/core/components/wrapper';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

var TuiButtonComponent = /** @class */ (function (_super) {
    __extends(TuiButtonComponent, _super);
    function TuiButtonComponent(elementRef, focusVisible$, hoveredService, destroy$, changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.appearance = "primary" /* Primary */;
        _this.disabled = false;
        _this.icon = '';
        _this.iconRight = '';
        _this.shape = null;
        _this.showLoader = false;
        _this.size = 'l';
        hoveredService
            .createHovered$(elementRef.nativeElement)
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(function (hovered) {
            _this.updateHovered(hovered);
        });
        pressedObservable(elementRef.nativeElement)
            .pipe(watch(changeDetectorRef), takeUntil(destroy$))
            .subscribe(function (pressed) {
            _this.updatePressed(pressed);
        });
        focusVisible$.subscribe(function (focusVisible) {
            _this.updateFocusVisible(focusVisible);
        });
        return _this;
    }
    TuiButtonComponent_1 = TuiButtonComponent;
    Object.defineProperty(TuiButtonComponent.prototype, "nativeFocusableElement", {
        get: function () {
            return this.nativeDisabled ? null : this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "focused", {
        get: function () {
            return isNativeFocused(this.elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "loaderSize", {
        get: function () {
            return this.size === 'l' || this.size === 'xl' ? 'm' : 's';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "nativeDisabled", {
        get: function () {
            return this.computedDisabled || this.showLoader ? '' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiButtonComponent.prototype, "tabIndex", {
        get: function () {
            return this.focusable ? 0 : -1;
        },
        enumerable: true,
        configurable: true
    });
    TuiButtonComponent.prototype.onFocused = function (focused) {
        this.updateFocused(focused);
    };
    var TuiButtonComponent_1;
    TuiButtonComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiFocusVisibleService, decorators: [{ type: Inject, args: [TuiFocusVisibleService,] }] },
        { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.data-appearance'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "appearance", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "icon", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "iconRight", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-shape'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "shape", void 0);
    __decorate([
        Input(),
        HostBinding('class._loading'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "showLoader", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-size'),
        tuiDefaultProp()
    ], TuiButtonComponent.prototype, "size", void 0);
    __decorate([
        HostBinding('attr.disabled')
    ], TuiButtonComponent.prototype, "nativeDisabled", null);
    __decorate([
        HostBinding('tabIndex')
    ], TuiButtonComponent.prototype, "tabIndex", null);
    __decorate([
        HostListener('focusin', ['true']),
        HostListener('focusout', ['false'])
    ], TuiButtonComponent.prototype, "onFocused", null);
    TuiButtonComponent = TuiButtonComponent_1 = __decorate([
        Component({
            selector: 'button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]',
            template: "<tui-wrapper\n    class=\"wrapper\"\n    [appearance]=\"appearance\"\n    [hovered]=\"computedHovered\"\n    [pressed]=\"computedPressed\"\n    [disabled]=\"computedDisabled\"\n    [focused]=\"computedFocusVisible\"\n>\n    <span class=\"content\">\n        <span *ngIf=\"icon\" class=\"left\" polymorpheus-outlet [content]=\"icon\">\n            <ng-template let-icon>\n                <tui-svg class=\"icon\" [src]=\"icon\"></tui-svg>\n            </ng-template>\n        </span>\n        <ng-content></ng-content>\n        <span\n            *ngIf=\"iconRight\"\n            class=\"right\"\n            polymorpheus-outlet\n            [content]=\"iconRight\"\n        >\n            <ng-template let-icon>\n                <tui-svg class=\"icon\" [src]=\"icon\"></tui-svg>\n            </ng-template>\n        </span>\n    </span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"loader\"\n        [size]=\"loaderSize\"\n        [inheritColor]=\"true\"\n    ></tui-loader>\n</tui-wrapper>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                    useExisting: forwardRef(function () { return TuiButtonComponent_1; }),
                },
                TuiDestroyService,
                TuiFocusVisibleService,
            ],
            styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:0 0;font-size:inherit;line-height:inherit;font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:inline-block;flex-shrink:0;vertical-align:top;border-radius:var(--tui-radius-m);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;font-weight:700;outline:0}:host[disabled]{pointer-events:none}:host[tuiIconButton] .left,:host[tuiIconButton] .right{margin:0}:host[data-tui-host-shape=rounded]{border-radius:100px}:host[data-tui-host-size=xs]{height:var(--tui-height-xs);font-weight:400}:host[data-tui-host-size=xs][data-tui-host-shape=square],:host[data-tui-host-size=xs][tuiIconButton]{height:var(--tui-height-xs);width:var(--tui-height-xs)}:host[data-tui-host-size='s']{height:var(--tui-height-s);font-weight:400}:host[data-tui-host-size='s'][data-tui-host-shape=square],:host[data-tui-host-size='s'][tuiIconButton]{height:var(--tui-height-s);width:var(--tui-height-s)}:host[data-tui-host-size='m']{height:var(--tui-height-m);font-size:15px}:host[data-tui-host-size='m'][data-tui-host-shape=square],:host[data-tui-host-size='m'][tuiIconButton]{height:var(--tui-height-m);width:var(--tui-height-m)}:host[data-tui-host-size='l']{height:var(--tui-height-l);font-size:15px}:host[data-tui-host-size='l'][data-tui-host-shape=square],:host[data-tui-host-size='l'][tuiIconButton]{height:var(--tui-height-l);width:var(--tui-height-l)}:host[data-tui-host-size=xl]{height:60px;font-size:15px}:host[data-tui-host-size=xl][data-tui-host-shape=square],:host[data-tui-host-size=xl][tuiIconButton]{height:60px;width:60px}.loader{position:absolute;top:0;left:0;width:100%;height:100%;cursor:default}.left{margin:0 8px 0 -4px}.right{margin:0 -4px 0 8px}.icon{display:block}:host[data-tui-host-size='s'] .icon,:host[data-tui-host-size=xs] .icon{width:16px;height:16px}:host[tuiIconButton] .icon,:host[tuiIconButton] .left,:host[tuiIconButton] .right{display:flex;width:100%;height:100%;align-items:center;justify-content:center}.wrapper{position:relative;z-index:0;box-sizing:border-box;cursor:pointer}:host[data-tui-host-size=xs] .wrapper{padding:0 8px}:host[data-tui-host-size='s'] .wrapper{padding:0 12px}:host[data-tui-host-size='m'] .wrapper{padding:0 24px}:host[data-tui-host-size='l'] .wrapper{padding:0 36px}:host[data-tui-host-size=xl] .wrapper{padding:0 40px}:host[data-tui-host-shape=square] .wrapper,:host[tuiIconButton] .wrapper{padding:0}.content{display:flex;height:100%;align-items:center;justify-content:center;text-align:center}:host._loading .content{opacity:0}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(TuiFocusVisibleService)),
        __param(2, Inject(TuiHoveredService)),
        __param(3, Inject(TuiDestroyService)),
        __param(4, Inject(ChangeDetectorRef))
    ], TuiButtonComponent);
    return TuiButtonComponent;
}(AbstractTuiInteractive));

var TuiButtonModule = /** @class */ (function () {
    function TuiButtonModule() {
    }
    TuiButtonModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                PolymorpheusModule,
                TuiWrapperModule,
                TuiSvgModule,
                TuiLoaderModule,
            ],
            declarations: [TuiButtonComponent],
            exports: [TuiButtonComponent],
        })
    ], TuiButtonModule);
    return TuiButtonModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiButtonComponent, TuiButtonModule };
//# sourceMappingURL=taiga-ui-core-components-button.js.map
