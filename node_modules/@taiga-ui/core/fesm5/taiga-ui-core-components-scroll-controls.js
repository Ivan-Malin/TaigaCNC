import { __read, __decorate, __param } from 'tslib';
import { DOCUMENT, ViewportScroller, CommonModule } from '@angular/common';
import { NgZone, Inject, Renderer2, ElementRef, Optional, Input, Directive, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { typedFromEvent, preventDefault, tuiZonefree, POLLING_TIME, TuiDestroyService, tuiZoneOptimized, TuiLetModule } from '@taiga-ui/cdk';
import { TUI_SCROLL_REF, TUI_MODE } from '@taiga-ui/core/tokens';
import { merge, fromEvent, interval, Observable } from 'rxjs';
import { switchMap, map, takeUntil, startWith, distinctUntilChanged } from 'rxjs/operators';
import { tuiFadeIn } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';

var MIN_WIDTH = 24;
// @bad TODO: add support for window scroll control
// @dynamic
var TuiScrollbarDirective = /** @class */ (function () {
    function TuiScrollbarDirective(ngZone, renderer, destroy$, container, documentRef, windowRef, elementRef, viewportScroller) {
        var _this = this;
        this.container = container;
        this.documentRef = documentRef;
        this.windowRef = windowRef;
        this.elementRef = elementRef;
        this.viewportScroller = viewportScroller;
        this.tuiScrollbar = "vertical" /* Vertical */;
        var nativeElement = this.elementRef.nativeElement;
        var mousedown$ = typedFromEvent(nativeElement, 'mousedown');
        var mousemove$ = typedFromEvent(this.documentRef, 'mousemove');
        var mouseup$ = typedFromEvent(this.documentRef, 'mouseup');
        mousedown$
            .pipe(preventDefault(), switchMap(function (event) {
            var rect = event.currentTarget.getBoundingClientRect();
            var vertical = getOffsetVertical(event, rect);
            var horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(function (event) { return _this.getScrolled(event, vertical, horizontal); }), takeUntil(mouseup$));
        }), takeUntil(destroy$), tuiZonefree(ngZone))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), scrollTop = _b[0], scrollLeft = _b[1];
            var _c = __read(_this.viewportScroller.getScrollPosition(), 2), x = _c[0], y = _c[1];
            if (!_this.container) {
                _this.viewportScroller.scrollToPosition([
                    _this.tuiScrollbar === "vertical" /* Vertical */ ? x : scrollLeft,
                    _this.tuiScrollbar === "vertical" /* Vertical */ ? scrollTop : y,
                ]);
                return;
            }
            if (_this.tuiScrollbar === "vertical" /* Vertical */) {
                renderer.setProperty(_this.container.nativeElement, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(_this.container.nativeElement, 'scrollLeft', scrollLeft);
            }
        });
        merge(fromEvent(this.container ? this.container.nativeElement : this.windowRef, 'scroll'), interval(POLLING_TIME))
            .pipe(takeUntil(destroy$), tuiZonefree(ngZone))
            .subscribe(function () {
            if (_this.tuiScrollbar === "vertical" /* Vertical */) {
                renderer.setStyle(nativeElement, 'top', _this.thumb * 100 + "%");
                renderer.setStyle(nativeElement, 'height', _this.view * 100 + "%");
            }
            else {
                renderer.setStyle(nativeElement, 'left', _this.thumb * 100 + "%");
                renderer.setStyle(nativeElement, 'width', _this.view * 100 + "%");
            }
        });
    }
    Object.defineProperty(TuiScrollbarDirective.prototype, "scrolled", {
        get: function () {
            var _a = this.computedContainer, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight, scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
            return this.tuiScrollbar === "vertical" /* Vertical */
                ? scrollTop / (scrollHeight - clientHeight)
                : scrollLeft / (scrollWidth - clientWidth);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "compensation", {
        get: function () {
            var _a = this.computedContainer, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
                this.tuiScrollbar === "vertical" /* Vertical */) ||
                ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                    this.tuiScrollbar === "horizontal" /* Horizontal */)) {
                return 0;
            }
            return this.tuiScrollbar === "vertical" /* Vertical */
                ? MIN_WIDTH / clientHeight
                : MIN_WIDTH / clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "thumb", {
        get: function () {
            var compensation = this.compensation || this.view;
            return this.scrolled * (1 - compensation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "view", {
        get: function () {
            var _a = this.computedContainer, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            return this.tuiScrollbar === "vertical" /* Vertical */
                ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
                : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiScrollbarDirective.prototype, "computedContainer", {
        get: function () {
            return this.container
                ? this.container.nativeElement
                : this.documentRef.documentElement;
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollbarDirective.prototype.getScrolled = function (_a, offsetVertical, offsetHorizontal) {
        var clientY = _a.clientY, clientX = _a.clientX;
        var _b = this.windowRef, innerWidth = _b.innerWidth, innerHeight = _b.innerHeight;
        var _c = this.elementRef.nativeElement, offsetHeight = _c.offsetHeight, offsetWidth = _c.offsetWidth;
        var _d = this
            .container
            ? this.container.nativeElement.getBoundingClientRect()
            : {}, _e = _d.top, top = _e === void 0 ? 0 : _e, _f = _d.left, left = _f === void 0 ? 0 : _f, _g = _d.width, width = _g === void 0 ? innerWidth : _g, _h = _d.height, height = _h === void 0 ? innerHeight : _h;
        var maxTop = this.computedContainer.scrollHeight - height;
        var maxLeft = this.computedContainer.scrollWidth - width;
        var scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        var scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    };
    TuiScrollbarDirective.ctorParameters = function () { return [
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SCROLL_REF,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Window, decorators: [{ type: Inject, args: [WINDOW,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: ViewportScroller, decorators: [{ type: Inject, args: [ViewportScroller,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiScrollbarDirective.prototype, "tuiScrollbar", void 0);
    TuiScrollbarDirective = __decorate([
        Directive({
            selector: '[tuiScrollbar]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(NgZone)),
        __param(1, Inject(Renderer2)),
        __param(2, Inject(TuiDestroyService)),
        __param(3, Optional()),
        __param(3, Inject(TUI_SCROLL_REF)),
        __param(4, Inject(DOCUMENT)),
        __param(5, Inject(WINDOW)),
        __param(6, Inject(ElementRef)),
        __param(7, Inject(ViewportScroller))
    ], TuiScrollbarDirective);
    return TuiScrollbarDirective;
}());
function getOffsetVertical(_a, _b) {
    var clientY = _a.clientY;
    var top = _b.top, height = _b.height;
    return (clientY - top) / height;
}
function getOffsetHorizontal(_a, _b) {
    var clientX = _a.clientX;
    var left = _b.left, width = _b.width;
    return (clientX - left) / width;
}

// @bad TODO: handle click on bar to scroll to that position
// @dynamic
var TuiScrollControlsComponent = /** @class */ (function () {
    function TuiScrollControlsComponent(ngZone, documentRef, scrollRef, mode$) {
        var _this = this;
        this.ngZone = ngZone;
        this.documentRef = documentRef;
        this.scrollRef = scrollRef;
        this.mode$ = mode$;
        this.refresh$ = interval(300).pipe(map(function () { return _this.scrollbars; }), startWith([false, false]), distinctUntilChanged(function (a, b) { return a[0] === b[0] && a[1] === b[1]; }), tuiZoneOptimized(this.ngZone));
    }
    Object.defineProperty(TuiScrollControlsComponent.prototype, "scrollbars", {
        get: function () {
            var _a = this.scrollRef
                ? this.scrollRef.nativeElement
                : this.documentRef.documentElement, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight, clientWidth = _a.clientWidth, scrollWidth = _a.scrollWidth;
            return [
                Math.ceil((clientHeight / scrollHeight) * 100) < 100,
                Math.ceil((clientWidth / scrollWidth) * 100) < 100,
            ];
        },
        enumerable: true,
        configurable: true
    });
    TuiScrollControlsComponent.ctorParameters = function () { return [
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [TUI_SCROLL_REF,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
    ]; };
    TuiScrollControlsComponent = __decorate([
        Component({
            selector: 'tui-scroll-controls',
            template: "<ng-container *tuiLet=\"refresh$ | async as bars\">\n    <div\n        *ngIf=\"bars[0]\"\n        class=\"bar bar_vertical\"\n        [class.bar_has-horizontal]=\"bars[1]\"\n        [@tuiFadeIn]\n    >\n        <div tuiScrollbar=\"vertical\" class=\"thumb\"></div>\n    </div>\n    <div\n        *ngIf=\"bars[1]\"\n        class=\"bar bar_horizontal\"\n        [class.bar_has-vertical]=\"bars[0]\"\n        [@tuiFadeIn]\n    >\n        <div tuiScrollbar=\"horizontal\" class=\"thumb\"></div>\n    </div>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: [tuiFadeIn],
            providers: [MODE_PROVIDER],
            host: {
                '($.data-mode.attr)': 'mode$',
            },
            styles: [":host{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:100;min-width:calc(100% - 1px);min-height:calc(100% - 1px);float:left;margin-right:calc(-100% + 1px);pointer-events:none}.bar{position:absolute;right:0;bottom:0}.bar_vertical{top:0}.bar_horizontal{left:0}.bar_has-horizontal{bottom:8px}.bar_has-vertical{right:8px}.thumb{transition-duration:.15s;transition-timing-function:ease-in-out;position:absolute;border-radius:100px;border:4px solid transparent;cursor:pointer;pointer-events:auto;background:var(--tui-text-01);background-clip:content-box;box-sizing:border-box;transition-property:width,height;opacity:.2}.thumb:hover{opacity:.24}.thumb:active{opacity:.48}:host[data-mode=onDark] .thumb{background-color:var(--tui-text-01-night)}.bar_vertical .thumb{right:0;width:12px;min-height:24px}.bar_vertical .thumb:active,.bar_vertical:hover .thumb{width:14px}.bar_horizontal .thumb{bottom:0;height:12px;min-width:24px}.bar_horizontal .thumb:active,.bar_horizontal:hover .thumb{height:14px}"]
        }),
        __param(0, Inject(NgZone)),
        __param(1, Inject(DOCUMENT)),
        __param(2, Optional()),
        __param(2, Inject(TUI_SCROLL_REF)),
        __param(3, Inject(TUI_MODE))
    ], TuiScrollControlsComponent);
    return TuiScrollControlsComponent;
}());

var TuiScrollControlsModule = /** @class */ (function () {
    function TuiScrollControlsModule() {
    }
    TuiScrollControlsModule = __decorate([
        NgModule({
            imports: [CommonModule, TuiLetModule],
            declarations: [TuiScrollbarDirective, TuiScrollControlsComponent],
            exports: [TuiScrollControlsComponent],
        })
    ], TuiScrollControlsModule);
    return TuiScrollControlsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TuiScrollControlsComponent, TuiScrollControlsModule, TuiScrollbarDirective };
//# sourceMappingURL=taiga-ui-core-components-scroll-controls.js.map
