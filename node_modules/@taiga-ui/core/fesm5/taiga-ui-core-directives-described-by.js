import { __decorate, __param } from 'tslib';
import { InjectionToken, ElementRef, Inject, Input, HostBinding, Directive, NgModule } from '@angular/core';
import { TuiDestroyService, TuiFocusVisibleService, typedFromEvent, tuiDefaultProp } from '@taiga-ui/cdk';
import { TuiHintService } from '@taiga-ui/core/services';
import { merge, timer, Observable } from 'rxjs';
import { filter, switchMapTo, mapTo, takeUntil, take, tap, startWith, distinctUntilChanged } from 'rxjs/operators';

var DELAY = 1000;
var TUI_DESCRIBED_BY_SHOW = new InjectionToken('Accessible tooltip visibility stream');
var TUI_DESCRIBED_BY_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    {
        provide: TUI_DESCRIBED_BY_SHOW,
        deps: [TuiFocusVisibleService, ElementRef],
        useFactory: describedByFactory,
    },
];
function describedByFactory(focusVisible$, _a) {
    var nativeElement = _a.nativeElement;
    return merge(focusVisible$.pipe(filter(function (v) { return v; }), switchMapTo(timer(DELAY).pipe(mapTo(true), takeUntil(typedFromEvent(nativeElement, 'keydown')))), switchMapTo(typedFromEvent(nativeElement, 'keydown').pipe(filter(function (_a) {
        var key = _a.key;
        return key === 'Escape';
    }), take(1), tap(function (event) {
        event.stopPropagation();
    }), mapTo(false), startWith(true)))), typedFromEvent(nativeElement, 'blur').pipe(mapTo(false))).pipe(distinctUntilChanged());
}

var DESCRIBED_BY = '_described-by';
/**
 * A directive linking focusable elements and hints for accessibility
 */
var TuiDescribedByDirective = /** @class */ (function () {
    function TuiDescribedByDirective(hintService, visibility$) {
        var _this = this;
        this.tuiDescribedBy = '';
        visibility$.subscribe(function (visible) {
            if (!_this.tuiDescribedBy) {
                return;
            }
            if (visible) {
                hintService.showHintForId(_this.tuiDescribedBy);
            }
            else {
                hintService.hideHintForId(_this.tuiDescribedBy);
            }
        });
    }
    Object.defineProperty(TuiDescribedByDirective.prototype, "computedDescribedBy", {
        get: function () {
            return this.tuiDescribedBy ? this.tuiDescribedBy + DESCRIBED_BY : null;
        },
        enumerable: true,
        configurable: true
    });
    TuiDescribedByDirective.ctorParameters = function () { return [
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_DESCRIBED_BY_SHOW,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiDescribedByDirective.prototype, "tuiDescribedBy", void 0);
    __decorate([
        HostBinding('attr.aria-describedby')
    ], TuiDescribedByDirective.prototype, "computedDescribedBy", null);
    TuiDescribedByDirective = __decorate([
        Directive({
            selector: '[tuiDescribedBy]:not(ng-container)',
            providers: TUI_DESCRIBED_BY_PROVIDERS,
        }),
        __param(0, Inject(TuiHintService)),
        __param(1, Inject(TUI_DESCRIBED_BY_SHOW))
    ], TuiDescribedByDirective);
    return TuiDescribedByDirective;
}());

var TuiDescribedByModule = /** @class */ (function () {
    function TuiDescribedByModule() {
    }
    TuiDescribedByModule = __decorate([
        NgModule({
            declarations: [TuiDescribedByDirective],
            exports: [TuiDescribedByDirective],
        })
    ], TuiDescribedByModule);
    return TuiDescribedByModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DESCRIBED_BY, TUI_DESCRIBED_BY_PROVIDERS, TUI_DESCRIBED_BY_SHOW, TuiDescribedByDirective, TuiDescribedByModule, describedByFactory };
//# sourceMappingURL=taiga-ui-core-directives-described-by.js.map
