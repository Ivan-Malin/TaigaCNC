import { __extends, __read, __decorate, __param } from 'tslib';
import { Renderer2, Inject, ElementRef, Self, Input, Directive, NgModule } from '@angular/core';
import { TuiDestroyService, TuiObscuredService, TuiHoveredService, tuiDefaultProp, tuiRequiredSetter, TuiParentsScrollService } from '@taiga-ui/cdk';
import { AbstractTuiHint } from '@taiga-ui/core/abstract';
import { DESCRIBED_BY } from '@taiga-ui/core/directives/described-by';
import { TuiHintService } from '@taiga-ui/core/services';
import { Subject, combineLatest, of } from 'rxjs';
import { startWith, map, switchMap, delay, take, distinctUntilChanged, takeUntil } from 'rxjs/operators';

var HINT_HOVERED_CLASS = '_hint_hovered';
var SHOW_DELAY = 500;
var HIDE_DELAY = 200;
var TuiHintDirective = /** @class */ (function (_super) {
    __extends(TuiHintDirective, _super);
    function TuiHintDirective(renderer, elementRef, hintService, destroy$, obscured$, hoveredService) {
        var _this = _super.call(this, elementRef, hintService) || this;
        _this.renderer = renderer;
        _this.componentHovered$ = new Subject();
        _this.tuiHintHost = null;
        // @bad TODO: Use private provider
        combineLatest(hoveredService.createHovered$(elementRef.nativeElement), _this.componentHovered$.pipe(startWith(false)))
            .pipe(map(function (_a) {
            var _b = __read(_a, 2), directiveHovered = _b[0], componentHovered = _b[1];
            return directiveHovered || componentHovered;
        }), switchMap(function (visible) {
            _this.toggleClass(visible);
            return of(visible).pipe(delay(visible ? SHOW_DELAY : HIDE_DELAY));
        }), switchMap(function (visible) {
            return visible && _this.mode !== "overflow" /* Overflow */
                ? obscured$.pipe(map(function (obscured) { return !obscured; }), take(2))
                : of(visible);
        }), distinctUntilChanged(), takeUntil(destroy$))
            .subscribe({
            next: function (visible) {
                if (visible) {
                    _this.showTooltip();
                }
                else {
                    _this.hideTooltip();
                }
            },
            complete: function () {
                _this.hideTooltip();
            },
        });
        _this.hintService.register(_this);
        return _this;
    }
    Object.defineProperty(TuiHintDirective.prototype, "tuiHint", {
        set: function (value) {
            if (!value) {
                this.hideTooltip();
                this.content = '';
                return;
            }
            this.content = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHintDirective.prototype, "id", {
        get: function () {
            return this.tuiHintId ? this.tuiHintId + DESCRIBED_BY : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiHintDirective.prototype, "host", {
        get: function () {
            return this.tuiHintHost ? this.tuiHintHost : this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    TuiHintDirective.prototype.getElementClientRect = function () {
        return this.host.getBoundingClientRect();
    };
    TuiHintDirective.prototype.ngOnDestroy = function () {
        this.hintService.unregister(this);
        this.hideTooltip();
    };
    TuiHintDirective.prototype.showTooltip = function () {
        if (this.content === '') {
            return;
        }
        this.toggleClass(true);
        this.hintService.add(this);
    };
    TuiHintDirective.prototype.hideTooltip = function () {
        this.toggleClass(false);
        this.hintService.remove(this);
    };
    TuiHintDirective.prototype.toggleClass = function (add) {
        if (add) {
            this.renderer.addClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, HINT_HOVERED_CLASS);
        }
    };
    TuiHintDirective.ctorParameters = function () { return [
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiHintService, decorators: [{ type: Inject, args: [TuiHintService,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: TuiObscuredService, decorators: [{ type: Inject, args: [TuiObscuredService,] }, { type: Self }] },
        { type: TuiHoveredService, decorators: [{ type: Inject, args: [TuiHoveredService,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiHintDirective.prototype, "tuiHintId", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiHintDirective.prototype, "tuiHintHost", void 0);
    __decorate([
        Input(),
        tuiRequiredSetter()
    ], TuiHintDirective.prototype, "tuiHint", null);
    TuiHintDirective = __decorate([
        Directive({
            selector: '[tuiHint]:not(ng-container)',
            providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
        }),
        __param(0, Inject(Renderer2)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(TuiHintService)),
        __param(3, Inject(TuiDestroyService)),
        __param(4, Inject(TuiObscuredService)),
        __param(4, Self()),
        __param(5, Inject(TuiHoveredService))
    ], TuiHintDirective);
    return TuiHintDirective;
}(AbstractTuiHint));

var TuiHintModule = /** @class */ (function () {
    function TuiHintModule() {
    }
    TuiHintModule = __decorate([
        NgModule({
            declarations: [TuiHintDirective],
            exports: [TuiHintDirective],
        })
    ], TuiHintModule);
    return TuiHintModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { HINT_HOVERED_CLASS, TuiHintDirective, TuiHintModule };
//# sourceMappingURL=taiga-ui-core-directives-hint.js.map
