import { __decorate, __param, __spread } from 'tslib';
import { Inject, Input, Component, ChangeDetectionStrategy, NgModule, ɵɵdefineInjectable, Injectable } from '@angular/core';
import { TuiDestroyService, tuiPure, tuiAssert, TuiLetModule } from '@taiga-ui/cdk';
import { timer, BehaviorSubject, Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { TuiNotificationModule } from '@taiga-ui/core/components/notification';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { tuiFadeInList, tuiSlideInRightList, tuiHeightCollapseList } from '@taiga-ui/core/animations';

var ALERT_AUTOCLOSE_TIMEOUT = 3000;
var TuiNotificationAlertComponent = /** @class */ (function () {
    function TuiNotificationAlertComponent(destroy$) {
        var _this = this;
        timer(ALERT_AUTOCLOSE_TIMEOUT)
            .pipe(takeUntil(destroy$))
            .subscribe(function () {
            if (_this.safeItem.autoClose) {
                _this.closeDialog();
            }
        });
    }
    Object.defineProperty(TuiNotificationAlertComponent.prototype, "safeItem", {
        get: function () {
            if (!this.item) {
                throw new Error('Notification was created as undefined');
            }
            return this.item;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiNotificationAlertComponent.prototype, "context", {
        get: function () {
            return this.calculateContext(this.safeItem);
        },
        enumerable: true,
        configurable: true
    });
    TuiNotificationAlertComponent.prototype.closeDialog = function () {
        this.safeItem.observer.complete();
    };
    TuiNotificationAlertComponent.prototype.calculateContext = function (_a) {
        var status = _a.status, data = _a.data, label = _a.label, observer = _a.observer;
        return {
            $implicit: status,
            data: data,
            label: label,
            closeHook: function () {
                observer.complete();
            },
            emitHook: function (data) {
                observer.next(data);
            },
            emitAndCloseHook: function (data) {
                observer.next(data);
                observer.complete();
            },
        };
    };
    TuiNotificationAlertComponent.ctorParameters = function () { return [
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] }
    ]; };
    __decorate([
        Input()
    ], TuiNotificationAlertComponent.prototype, "item", void 0);
    __decorate([
        tuiPure
    ], TuiNotificationAlertComponent.prototype, "calculateContext", null);
    TuiNotificationAlertComponent = __decorate([
        Component({
            selector: 'tui-notification-alert',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "<tui-notification\n    *ngIf=\"safeItem.hasCloseButton else noClose\"\n    [status]=\"safeItem.status\"\n    [hasIcon]=\"safeItem.hasIcon\"\n    (close)=\"closeDialog()\"\n>\n    <label\n        *ngIf=\"safeItem.label\"\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"heading\"\n    >\n        {{safeItem.label}}\n    </label>\n    <div\n        polymorpheus-outlet\n        automation-id=\"tui-notification-alert__content\"\n        class=\"content\"\n        [content]=\"safeItem.content\"\n        [context]=\"context\"\n    ></div>\n</tui-notification>\n<ng-template #noClose>\n    <tui-notification [status]=\"safeItem.status\" [hasIcon]=\"safeItem.hasIcon\">\n        <label\n            *ngIf=\"safeItem.label\"\n            automation-id=\"tui-notification-alert__heading\"\n            class=\"heading\"\n        >\n            {{safeItem.label}}\n        </label>\n        <div\n            polymorpheus-outlet\n            automation-id=\"tui-notification-alert__content\"\n            class=\"content\"\n            [content]=\"safeItem.content\"\n            [context]=\"context\"\n        ></div>\n    </tui-notification>\n</ng-template>\n",
            providers: [TuiDestroyService],
            styles: [":host{box-shadow:0 8px 16px rgba(51,51,51,.2);display:block;border-radius:var(--tui-radius-m)}.heading{font:var(--tui-font-text-m);line-height:20px;font-weight:700;margin:0}.content{color:var(--tui-text-01);word-wrap:break-word}.content:empty{display:none}"]
        }),
        __param(0, Inject(TuiDestroyService))
    ], TuiNotificationAlertComponent);
    return TuiNotificationAlertComponent;
}());

var TuiNotificationAlertModule = /** @class */ (function () {
    function TuiNotificationAlertModule() {
    }
    TuiNotificationAlertModule = __decorate([
        NgModule({
            imports: [CommonModule, PolymorpheusModule, TuiNotificationModule],
            declarations: [TuiNotificationAlertComponent],
            exports: [TuiNotificationAlertComponent],
        })
    ], TuiNotificationAlertModule);
    return TuiNotificationAlertModule;
}());

var NotificationAlert = /** @class */ (function () {
    function NotificationAlert(observer, content, options) {
        var _a = options.label, label = _a === void 0 ? '' : _a, _b = options.status, status = _b === void 0 ? "info" /* Info */ : _b, _c = options.hasIcon, hasIcon = _c === void 0 ? true : _c, _d = options.autoClose, autoClose = _d === void 0 ? true : _d, _e = options.hasCloseButton, hasCloseButton = _e === void 0 ? true : _e;
        this.observer = observer;
        this.content = content;
        this.label = label;
        this.status = status;
        this.hasIcon = hasIcon;
        this.autoClose = autoClose;
        this.hasCloseButton = hasCloseButton;
        if (options && this.withData(options)) {
            this.data = options.data;
        }
    }
    NotificationAlert.prototype.withData = function (options) {
        return 'data' in options;
    };
    return NotificationAlert;
}());

var NO_HOST = 'Notifications are disabled, enable support by adding TuiNotificationsModule to your main app module';
var TuiNotificationsService = /** @class */ (function () {
    function TuiNotificationsService() {
        /** @internal */
        this.items$ = new BehaviorSubject([]);
    }
    TuiNotificationsService.prototype.show = function (content, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        tuiAssert.assert(!!this.items$.observers.length, NO_HOST);
        return new Observable(function (observer) {
            var notification = new NotificationAlert(observer, content, options);
            _this.items$.next(__spread(_this.items$.value, [notification]));
            return function () {
                _this.items$.next(_this.items$.value.filter(function (item) { return item !== notification; }));
            };
        });
    };
    TuiNotificationsService.ɵprov = ɵɵdefineInjectable({ factory: function TuiNotificationsService_Factory() { return new TuiNotificationsService(); }, token: TuiNotificationsService, providedIn: "root" });
    TuiNotificationsService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TuiNotificationsService);
    return TuiNotificationsService;
}());

var TuiNotificationsHostComponent = /** @class */ (function () {
    function TuiNotificationsHostComponent(service) {
        this.service = service;
    }
    TuiNotificationsHostComponent.ctorParameters = function () { return [
        { type: TuiNotificationsService, decorators: [{ type: Inject, args: [TuiNotificationsService,] }] }
    ]; };
    TuiNotificationsHostComponent = __decorate([
        Component({
            selector: 'tui-notifications-host',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "<ng-container *tuiLet=\"service.items$ | async as items\">\n    <div\n        *ngIf=\"items.length\"\n        class=\"wrapper\"\n        [@tuiFadeInList]=\"items.length\"\n        [@tuiHeightCollapseList]=\"items.length\"\n        [@tuiSlideInRightList]=\"items.length\"\n    >\n        <tui-notification-alert\n            *ngFor=\"let item of items\"\n            class=\"alert\"\n            role=\"alert\"\n            [item]=\"item\"\n        ></tui-notification-alert>\n    </div>\n</ng-container>\n",
            animations: [tuiFadeInList, tuiSlideInRightList, tuiHeightCollapseList],
            styles: [":host{position:fixed;top:0;left:0;width:100%;height:0}.wrapper{width:288px;margin-left:auto;padding:32px 48px 0 0}@media screen and (max-width:1023px){.wrapper{padding:16px 16px 0 0}}@media screen and (min-width:1360px){.wrapper{width:368px}}.alert:not(:first-child){margin-top:12px}"]
        }),
        __param(0, Inject(TuiNotificationsService))
    ], TuiNotificationsHostComponent);
    return TuiNotificationsHostComponent;
}());

var ɵ0 = TuiNotificationsHostComponent;
var TuiNotificationsModule = /** @class */ (function () {
    function TuiNotificationsModule() {
    }
    TuiNotificationsModule = __decorate([
        NgModule({
            imports: [CommonModule, TuiNotificationAlertModule, TuiLetModule],
            declarations: [TuiNotificationsHostComponent],
            exports: [TuiNotificationsHostComponent],
            entryComponents: [TuiNotificationsHostComponent],
            providers: [
                {
                    provide: TuiNotificationsHostComponent,
                    useValue: ɵ0,
                },
            ],
        })
    ], TuiNotificationsModule);
    return TuiNotificationsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ALERT_AUTOCLOSE_TIMEOUT, NotificationAlert, TuiNotificationAlertComponent, TuiNotificationAlertModule, TuiNotificationsHostComponent, TuiNotificationsModule, TuiNotificationsService, ɵ0 };
//# sourceMappingURL=taiga-ui-core-modules-notifications.js.map
