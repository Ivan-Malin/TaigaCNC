import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
import { __read } from 'tslib';

/**
 * Capitalizes a given string, replacing it with a lowercase string and making
 * the first letter of each word uppercase.
 *
 * @param value the input string
 * @return the capitalized string
 */
function capitalize(value) {
    return value.toLowerCase().replace(/(?:^|\s)\S/g, function (char) { return char.toUpperCase(); });
}

/**
 * Formats number adding thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param decimalLimit number of digits of decimal part, null to keep untouched
 * @param decimalSeparator separator between the integer and the decimal part
 * @param thousandSeparator separator between thousands
 * @return the formatted string
 */
function formatNumber(value, decimalLimit, decimalSeparator, thousandSeparator) {
    if (decimalLimit === void 0) { decimalLimit = null; }
    if (decimalSeparator === void 0) { decimalSeparator = ','; }
    if (thousandSeparator === void 0) { thousandSeparator = CHAR_NO_BREAK_SPACE; }
    var integerPartString = Math.floor(Math.abs(value)).toString();
    var fractionPartString = value.toString().split('.')[1] || '';
    var fractionPartPadded = decimalLimit === null
        ? fractionPartString
        : fractionPartString.substr(0, decimalLimit) +
            '0'.repeat(Math.max(decimalLimit - fractionPartString.length, 0));
    var remainder = integerPartString.length % 3;
    var sign = value < 0 ? '-' : '';
    var result = sign + integerPartString.charAt(0);
    for (var i = 1; i < integerPartString.length; i++) {
        if (i % 3 === remainder && integerPartString.length > 3) {
            result += thousandSeparator;
        }
        result += integerPartString.charAt(i);
    }
    return !!fractionPartPadded || decimalLimit
        ? result + decimalSeparator + fractionPartPadded
        : result;
}

/**
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
function formatPhone(value, countryCode, phoneMask) {
    if (!value) {
        return '';
    }
    var result = countryCode;
    if (!value.startsWith(countryCode)) {
        value = countryCode + value.replace('+', '');
    }
    var splitPhoneMask = phoneMask.split('');
    var splitValue = value.slice(countryCode.length).split('');
    result += ' ';
    if (splitValue.length === 0) {
        return result;
    }
    for (var i = 0; i < splitPhoneMask.length; i++) {
        if (splitValue.length === 0) {
            break;
        }
        if (splitPhoneMask[i] === '#') {
            result += splitValue[0] || '';
            splitValue.splice(0, 1);
        }
        else {
            result += splitPhoneMask[i];
        }
    }
    return result;
}

function otherDecimalSymbol(symbol) {
    return symbol === '.' ? ',' : '.';
}

/**
 * Selects the correct plural form to display.
 *
 * @param value the input number
 * @param args an array of three plural forms, e.g. ['год', 'года', 'лет']
 * @deprecated This implementation targets Russian.
 * Use https://angular.io/api/common/NgPlural for your implementations.
 */
function pluralize(value, _a) {
    var _b = __read(_a, 3), one = _b[0], few = _b[1], many = _b[2];
    var ten = value % 10;
    var hundred = value % 100;
    // 1, 21, 101, 121, но не 11, 111, 211...
    if (ten === 1 && hundred !== 11) {
        return one;
    }
    // 2, 3, 4, 22, 33, 44, 152, 163, 174, но не 12, 13, 14, 112, 213, 314...
    if (ten >= 2 && ten <= 4 && (hundred < 10 || hundred >= 20)) {
        return few;
    }
    return many;
}

/**
 * Generated bundle index. Do not edit.
 */

export { capitalize, formatNumber, formatPhone, otherDecimalSymbol, pluralize };
//# sourceMappingURL=taiga-ui-core-utils-format.js.map
