import { DEFAULT_ICONS_PATH, tuiEditingKeys } from '@taiga-ui/core/constants';
import { EMPTY } from 'rxjs';
import { startWith, map } from 'rxjs/operators';

var PADDING_SMALL = 12;
var PADDING_LARGE = 16;
var ITEM_SIZE = 24;
var CONTENT_SIZE = 40;
function getPadding(sizeBig, hasIcon, hasCleaner, hasTooltip, hasContent) {
    if (hasCleaner === void 0) { hasCleaner = false; }
    if (hasTooltip === void 0) { hasTooltip = false; }
    if (hasContent === void 0) { hasContent = false; }
    var padding = sizeBig ? PADDING_LARGE : PADDING_SMALL;
    if (hasIcon) {
        padding += ITEM_SIZE;
    }
    if (hasCleaner) {
        padding += ITEM_SIZE;
    }
    if (hasTooltip) {
        padding += ITEM_SIZE;
    }
    if (hasContent) {
        padding += CONTENT_SIZE;
    }
    return padding;
}

function iconsPathFactory(staticPath) {
    var base = staticPath[staticPath.length - 1] === '/' ? staticPath : staticPath + '/';
    return function (name) {
        if (name.startsWith('tuiIcon')) {
            return "" + base + name + ".svg#" + name;
        }
        return DEFAULT_ICONS_PATH(name);
    };
}

/**
 * Check if pressed key is interactive in terms of input field
 */
function isEditingKey(key) {
    return key.length === 1 || tuiEditingKeys.indexOf(key) !== -1;
}

function isPresumedHTMLString(candidate) {
    var trimmed = candidate.trim();
    return trimmed.startsWith('<') && trimmed.endsWith('>');
}

function modeFactory(mode, _a) {
    var nativeElement = _a.nativeElement;
    var mode$ = mode
        ? mode.change$.pipe(startWith(null), map(function () { return mode.mode; }))
        : EMPTY;
    return (nativeElement['$.data-mode.attr'] = mode$);
}

var SIZES = ['xs', 's', 'm', 'l', 'xl', 'xxl'];
/**
 * Compares size constants to determine if first size is bigger than the second
 *
 * @param size size that we need to compare
 * @param biggerThanSize size to compare with, 's' by default
 */
function sizeBigger(size, biggerThanSize) {
    if (biggerThanSize === void 0) { biggerThanSize = 's'; }
    return SIZES.indexOf(size) > SIZES.indexOf(biggerThanSize);
}

/**
 * Generated bundle index. Do not edit.
 */

export { getPadding, iconsPathFactory, isEditingKey, isPresumedHTMLString, modeFactory, sizeBigger };
//# sourceMappingURL=taiga-ui-core-utils-miscellaneous.js.map
