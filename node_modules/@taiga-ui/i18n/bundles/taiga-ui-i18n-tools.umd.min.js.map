{"version":3,"sources":["ng://@taiga-ui/i18n/tools/language.ts","ng://@taiga-ui/i18n/tools/extract-i18n.ts"],"names":["TUI_LANGUAGE","InjectionToken","factory","of","TUI_ENGLISH_LANGUAGE","key","inject","pipe","map","lang"],"mappings":"4iBAKaA,EAAe,IAAIC,EAAAA,eAC5B,uCACA,CACIC,QAAS,WAAM,OAAAC,EAAAA,GAAGC,EAAAA,iECDtBC,GAEA,OAAO,WAAM,OAAAC,EAAAA,OAAON,GAAcO,KAAKC,EAAAA,KAAI,SAAAC,GAAQ,OAAAA,EAAKJ","sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {Language} from '@taiga-ui/i18n/interfaces';\nimport {TUI_ENGLISH_LANGUAGE} from '@taiga-ui/i18n/languages';\nimport {Observable, of} from 'rxjs';\n\nexport const TUI_LANGUAGE = new InjectionToken<Observable<Language>>(\n    `Language for Taiga UI libraries i18n`,\n    {\n        factory: () => of(TUI_ENGLISH_LANGUAGE),\n    },\n);\n","import {inject} from '@angular/core';\nimport {Language} from '@taiga-ui/i18n/interfaces';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {TUI_LANGUAGE} from './language';\n\nexport function extractI18n<K extends keyof Language>(\n    key: K,\n): () => Observable<Language[K]> {\n    return () => inject(TUI_LANGUAGE).pipe(map(lang => lang[key]));\n}\n"]}