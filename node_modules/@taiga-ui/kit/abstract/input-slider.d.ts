import { AbstractTuiControl, TuiInputMode, TuiMapper } from '@taiga-ui/cdk';
import { TuiBrightness, TuiModeDirective, TuiPluralize, TuiSizeL, TuiTextMaskOptions, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { TuiKeySteps } from '@taiga-ui/kit/types';
export declare function quantumAssertion(quantum: number): boolean;
/**
 * @internal
 */
export declare abstract class AbstractTuiInputSlider<T> extends AbstractTuiControl<T> implements TuiWithOptionalMinMax<number> {
    min: number;
    max: number;
    minLabel: string;
    maxLabel: string;
    pluralize: TuiPluralize | null;
    segmentsPluralize: TuiPluralize | null;
    segments: number;
    steps: number;
    quantum: number;
    keySteps: TuiKeySteps | null;
    size: TuiSizeL;
    mask: TuiMapper<number, TuiTextMaskOptions>;
    protected abstract readonly modeDirective: TuiModeDirective | null;
    get segmented(): boolean;
    get hasPlaceholder(): boolean;
    get inputMode(): TuiInputMode;
    get length(): number;
    get computedSteps(): number;
    get step(): number;
    get hostMode(): TuiBrightness | null;
    abstract get showMinLabel(): boolean;
    abstract get showMaxLabel(): boolean;
    onHovered(hovered: boolean): void;
    isPluralized(pluralize: TuiPluralize | null): pluralize is TuiPluralize;
    protected valueGuard(value: number): number;
    protected capInputValue(value: string, max?: number): number | null;
}
