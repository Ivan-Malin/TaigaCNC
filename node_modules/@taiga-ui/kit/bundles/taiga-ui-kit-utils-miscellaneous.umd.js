(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk'), require('@taiga-ui/kit/classes'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/utils/miscellaneous', ['exports', '@taiga-ui/cdk', '@taiga-ui/kit/classes', 'rxjs'], factory) :
    (global = global || self, factory((global['taiga-ui'] = global['taiga-ui'] || {}, global['taiga-ui'].kit = global['taiga-ui'].kit || {}, global['taiga-ui'].kit.utils = global['taiga-ui'].kit.utils || {}, global['taiga-ui'].kit.utils.miscellaneous = {}), global.cdk, global['taiga-ui'].kit.classes, global.rxjs));
}(this, (function (exports, cdk, classes, rxjs) { 'use strict';

    function tuiCreateDefaultDayRangePeriods(periodTitles) {
        if (periodTitles === void 0) { periodTitles = [
            'For all the time',
            'Today',
            'Yesterday',
            'Current week',
            'Current month',
            'Previous month',
        ]; }
        var today = cdk.TuiDay.currentLocal();
        var yesterday = today.append({ day: -1 });
        var startOfWeek = today.append({ day: -today.dayOfWeek() });
        var endOfWeek = startOfWeek.append({ day: 6 });
        var startOfMonth = today.append({ day: 1 - today.day });
        var endOfMonth = startOfMonth.append({ month: 1, day: -1 });
        var startOfLastMonth = startOfMonth.append({ month: -1 });
        return [
            new classes.TuiDayRangePeriod(new cdk.TuiDayRange(cdk.TUI_FIRST_DAY, today), periodTitles[0]),
            new classes.TuiDayRangePeriod(new cdk.TuiDayRange(today, today), periodTitles[1]),
            new classes.TuiDayRangePeriod(new cdk.TuiDayRange(yesterday, yesterday), periodTitles[2]),
            new classes.TuiDayRangePeriod(new cdk.TuiDayRange(startOfWeek, endOfWeek), periodTitles[3]),
            new classes.TuiDayRangePeriod(new cdk.TuiDayRange(startOfMonth, endOfMonth), periodTitles[4]),
            new classes.TuiDayRangePeriod(new cdk.TuiDayRange(startOfLastMonth, startOfMonth.append({ day: -1 })), periodTitles[5]),
        ];
    }

    function tuiCreateTimePeriods(minHour, maxHour, minutes) {
        if (minHour === void 0) { minHour = 0; }
        if (maxHour === void 0) { maxHour = cdk.HOURS_IN_DAY; }
        if (minutes === void 0) { minutes = [0, 30]; }
        var timeArray = [];
        for (var i = minHour; i < maxHour; i++) {
            for (var j = 0; j < minutes.length; j++) {
                var time = new cdk.TuiTime(i, minutes[j]);
                timeArray.push(time);
            }
        }
        return timeArray;
    }

    /**
     * @internal
     */
    function TuiReplayControlValueChangesFactory(control) {
        return control ? cdk.tuiReplayedValueChangesFrom(control) : rxjs.of(null);
    }

    exports.TuiReplayControlValueChangesFactory = TuiReplayControlValueChangesFactory;
    exports.tuiCreateDefaultDayRangePeriods = tuiCreateDefaultDayRangePeriods;
    exports.tuiCreateTimePeriods = tuiCreateTimePeriods;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=taiga-ui-kit-utils-miscellaneous.umd.js.map
