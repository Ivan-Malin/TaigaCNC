import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { AbstractTuiInteractive, TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiBrightness, TuiSizeS } from '@taiga-ui/core';
import { TuiBorders } from '@taiga-ui/kit/enums';
import { Observable } from 'rxjs';
import { TuiAccordionItemContentDirective } from './accordion-item-content.directive';
export declare class TuiAccordionItemComponent extends AbstractTuiInteractive implements TuiFocusableElementAccessor {
    private readonly changeDetectorRef;
    readonly mode$: Observable<TuiBrightness | null>;
    noPadding: boolean;
    showArrow: boolean;
    borders: TuiBorders | null;
    size: TuiSizeS;
    disabled: boolean;
    disableHover: boolean;
    open: boolean;
    async: boolean;
    readonly openChange: EventEmitter<boolean>;
    readonly content?: TuiAccordionItemContentDirective;
    private readonly focusableElement?;
    constructor(changeDetectorRef: ChangeDetectorRef, mode$: Observable<TuiBrightness | null>);
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    onHovered(hovered: boolean): void;
    onFocused(focused: boolean): void;
    onFocusVisible(focusVisible: boolean): void;
    onRowToggle(): void;
    onItemKeyDownEsc(event: KeyboardEvent): void;
    onItemKeyDownSpace(event: KeyboardEvent): void;
    close(): void;
    private updateOpen;
}
