import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiFocusableElementAccessor, TuiIdentityMatcher, TuiStringHandler, TuiStringMatcher } from '@taiga-ui/cdk';
import { TuiDataListHost, TuiValueContentContext } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
export declare class TuiComboBoxComponent<T> extends AbstractTuiNullableControl<T | string> implements TuiFocusableElementAccessor, TuiDataListHost<T> {
    stringify: TuiStringHandler<T | string>;
    strictMatcher: TuiStringMatcher<T>;
    identityMatcher: TuiIdentityMatcher<T | string>;
    valueContent: PolymorpheusContent<TuiValueContentContext<T>>;
    strict: boolean;
    search: string | null;
    readonly searchChange: EventEmitter<string | null>;
    readonly arrow: PolymorpheusContent;
    open: boolean;
    readonly datalist: PolymorpheusContent;
    private readonly accessor?;
    private readonly hostedDropdown?;
    private readonly textfield?;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get nativeValue(): string;
    get showValueTemplate(): boolean;
    get canOpen(): boolean;
    get computedContent(): PolymorpheusContent<TuiValueContentContext<T>>;
    onActiveZone(active: boolean): void;
    checkOption(option: T): void;
    handleOption(item: T): void;
    onFieldKeyDownEnter(event: KeyboardEvent): void;
    onInput(value: string): void;
    onHovered(hovered: boolean): void;
    computeContext($implicit: T | null, active: boolean): TuiValueContentContext<T | null>;
    toggle(): void;
    private isStrictMatch;
    private close;
    private updateSearch;
    private focusInput;
}
