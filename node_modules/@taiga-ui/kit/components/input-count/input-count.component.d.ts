import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TuiFocusableElementAccessor } from '@taiga-ui/cdk';
import { TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { Observable } from 'rxjs';
export declare class TuiInputCountComponent extends AbstractTuiControl<number> implements TuiWithOptionalMinMax<number>, TuiFocusableElementAccessor {
    private readonly appearance;
    private readonly textfieldSize;
    readonly minusTexts$: Observable<[string, string]>;
    private readonly isMobile;
    step: number;
    min: number;
    max: number;
    hideButtons: boolean;
    postfix: string;
    readonly textMaskOptions: TuiTextMaskOptions;
    private readonly primitiveTextfield?;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, appearance: string, textfieldSize: TuiTextfieldSizeDirective, minusTexts$: Observable<[string, string]>, isMobile: boolean);
    get nativeFocusableElement(): HTMLInputElement | null;
    get size(): TuiSizeL | TuiSizeS;
    get focused(): boolean;
    get hasButtons(): boolean;
    get exampleText(): string;
    get computedValue(): string;
    get minusButtonDisabled(): boolean;
    get plusButtonDisabled(): boolean;
    onButtonMouseDown(event: MouseEvent, disabled?: boolean): void;
    onFocused(focused: boolean): void;
    onHovered(hovered: boolean): void;
    onPressed(pressed: boolean): void;
    onValueChange(): void;
    decreaseValue(): void;
    increaseValue(): void;
    onKeydown(event: KeyboardEvent): void;
    protected getFallbackValue(): number;
    private get nativeNumberValue();
    private get nativeValue();
    private set nativeValue(value);
    private safeUpdateValue;
    private capValue;
    private onBlur;
}
