import { ChangeDetectorRef, Injector, Type } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiBooleanHandler, TuiDay, TuiFocusableElementAccessor, TuiMonth } from '@taiga-ui/cdk';
import { TuiDialogService, TuiMarkerHandler, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { TuiNamedDay } from '@taiga-ui/kit/classes';
export declare class TuiInputDateComponent extends AbstractTuiNullableControl<TuiDay> implements TuiWithOptionalMinMax<TuiDay>, TuiFocusableElementAccessor {
    private readonly injector;
    private readonly isMobile;
    private readonly dialogService;
    private readonly mobileCalendar;
    private readonly textfieldSize;
    readonly filler: string;
    min: TuiDay;
    max: TuiDay;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler;
    items: ReadonlyArray<TuiNamedDay>;
    defaultActiveYearMonth: TuiMonth;
    open: boolean;
    private month;
    private readonly textfield?;
    private readonly textMaskOptions;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, injector: Injector, isMobile: boolean, dialogService: TuiDialogService, mobileCalendar: Type<any> | null, textfieldSize: TuiTextfieldSizeDirective, filler: string);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedMobile(): boolean;
    get calendarIcon(): string;
    get computedFiller(): string;
    get computedValue(): string;
    get computedActiveYearMonth(): TuiMonth;
    get nativeValue(): string;
    set nativeValue(value: string);
    get canOpen(): boolean;
    get computedMask(): TuiTextMaskOptions;
    get activeItem(): TuiNamedDay | null;
    onItemClick({ day }: TuiNamedDay): void;
    onClick(): void;
    onValueChange(value: string): void;
    onDayClick(value: TuiDay): void;
    onHovered(hovered: boolean): void;
    onMonthChange(month: TuiMonth): void;
    onOpenChange(open: boolean): void;
    onFocused(focused: boolean): void;
    setDisabledState(): void;
    writeValue(value: TuiDay | null): void;
    protected valueIdenticalComparator(oldValue: TuiDay | null, newValue: TuiDay | null): boolean;
}
