import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiBooleanHandler, TuiFocusableElementAccessor, TuiTime, TuiTimeMode } from '@taiga-ui/cdk';
import { TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective, TuiTextMaskOptions } from '@taiga-ui/core';
import { Observable } from 'rxjs';
export declare class TuiInputTimeComponent extends AbstractTuiNullableControl<TuiTime> implements TuiFocusableElementAccessor {
    private readonly textfieldSize;
    private readonly timeTexts$;
    disabledItemHandler: TuiBooleanHandler<TuiTime>;
    items: ReadonlyArray<TuiTime>;
    itemSize: TuiSizeS | TuiSizeL;
    strict: boolean;
    mode: TuiTimeMode;
    open: boolean;
    private readonly textfield?;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, textfieldSize: TuiTextfieldSizeDirective, timeTexts$: Observable<Record<TuiTimeMode, string>>);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get filtered(): ReadonlyArray<TuiTime>;
    get textMaskOptions(): TuiTextMaskOptions;
    get computedValue(): string;
    get computedSearch(): string;
    get interactive(): boolean;
    get innerPseudoFocused(): boolean | null;
    get icon(): string;
    get nativeValue(): string;
    set nativeValue(value: string);
    getFiller$(mode: TuiTimeMode): Observable<string>;
    onValueChange(value: string): void;
    onFocused(focused: boolean): void;
    onHovered(hovered: boolean): void;
    onArrowUp(event: KeyboardEvent): void;
    onArrowDown(event: KeyboardEvent): void;
    onMenuClick(item: TuiTime): void;
    onOpen(open: boolean): void;
    writeValue(value: TuiTime | null): void;
    private findNearestTimeFromItems;
    private getMatch;
    private close;
    private processArrow;
    private calculateShift;
    private shiftTime;
    private focusInput;
    private calculateMask;
    private filter;
}
