import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, TuiBooleanHandler, TuiContextWithImplicit, TuiFocusableElementAccessor, TuiIdentityMatcher, TuiMapper, TuiStringHandler } from '@taiga-ui/cdk';
import { TuiDataListHost, TuiSvgService, TuiTextfieldLabelOutsideDirective } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TuiInputTagComponent } from '@taiga-ui/kit/components/input-tag';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
export declare class TuiMultiSelectComponent<T> extends AbstractTuiMultipleControl<T> implements TuiFocusableElementAccessor, TuiDataListHost<T> {
    readonly textfieldLabelOutside: TuiTextfieldLabelOutsideDirective;
    stringify: TuiStringHandler<T>;
    identityMatcher: TuiIdentityMatcher<T>;
    expandable: boolean;
    search: string | null;
    editable: boolean;
    disabledItemHandler: TuiBooleanHandler<T>;
    valueContent: PolymorpheusContent<TuiContextWithImplicit<ReadonlyArray<T>>>;
    readonly searchChange: EventEmitter<string | null>;
    open: boolean;
    readonly valueMapper: TuiMapper<ReadonlyArray<T>, ReadonlyArray<TuiStringifiableItem<T>>>;
    readonly disabledItemHandlerWrapper: TuiMapper<TuiBooleanHandler<T>, TuiBooleanHandler<TuiStringifiableItem<T>>>;
    readonly datalist: PolymorpheusContent;
    private readonly accessor?;
    private readonly hostedDropdown?;
    private readonly input?;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, svgService: TuiSvgService, textfieldLabelOutside: TuiTextfieldLabelOutsideDirective);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedValue(): ReadonlyArray<T>;
    get searchOrSpace(): string;
    get searchString(): string;
    get tagIcon(): string;
    get interactive(): boolean;
    get inputHidden(): boolean;
    get computedGroup(): boolean;
    get context(): TuiContextWithImplicit<ReadonlyArray<T>>;
    getStringifier(stringify: TuiStringHandler<T>): TuiStringHandler<TuiContextWithImplicit<T>>;
    onHoveredChange(hovered: boolean): void;
    onSpace(event: KeyboardEvent): void;
    handleOption(option: T): void;
    onEnter(event: KeyboardEvent): void;
    onClick({ nativeFocusableElement }: TuiInputTagComponent): void;
    onArrowClick(): void;
    onInput(value: ReadonlyArray<TuiStringifiableItem<T>>): void;
    onSearch(search: string | null): void;
    onActiveZone(active: boolean): void;
    setDisabledState(): void;
    private updateSearch;
    private focusInput;
    private getContext;
}
