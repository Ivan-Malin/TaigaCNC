import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, TuiFocusableElementAccessor, TuiIdentityMatcher } from '@taiga-ui/cdk';
import { TuiDataListHost, TuiTextfieldCleanerDirective, TuiValueContentContext } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
export declare class TuiSelectComponent<T> extends AbstractTuiNullableControl<T> implements TuiFocusableElementAccessor, TuiDataListHost<T> {
    private readonly textfieldCleaner;
    identityMatcher: TuiIdentityMatcher<T | string>;
    valueContent: PolymorpheusContent<TuiValueContentContext<T>>;
    readonly arrow: PolymorpheusContent;
    readonly datalist: PolymorpheusContent;
    private readonly textfield?;
    private readonly hostedDropdown?;
    constructor(control: NgControl | null, changeDetectorRef: ChangeDetectorRef, textfieldCleaner: TuiTextfieldCleanerDirective);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedValue(): string;
    get computedContent(): PolymorpheusContent<TuiValueContentContext<T>>;
    get canOpen(): boolean;
    onValueChange(value: string): void;
    onActiveZone(active: boolean): void;
    onHovered(hovered: boolean): void;
    onKeyDownDelete(): void;
    handleOption(option: T): void;
    computeContext($implicit: T | null, active: boolean): TuiValueContentContext<T | null>;
    private focusInput;
}
