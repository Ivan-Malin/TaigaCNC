import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, Renderer2 } from '@angular/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiTabDirective } from '../tab.directive';
export declare class TuiTabsWithMoreComponent implements AfterViewInit {
    private readonly refresh$;
    private readonly elementRef;
    private readonly renderer;
    private readonly changeDetectorRef;
    readonly moreWord$: Observable<string>;
    moreContent: PolymorpheusContent;
    underline: boolean;
    activeItemIndex: number;
    set itemsLimitSetter(itemsLimit: number);
    readonly activeItemIndexChange: EventEmitter<number>;
    private readonly itemsList;
    open: boolean;
    lastVisibleIndex: number;
    private readonly moreButton?;
    private itemsLimit;
    constructor(refresh$: Observable<unknown>, elementRef: ElementRef<HTMLElement>, renderer: Renderer2, changeDetectorRef: ChangeDetectorRef, moreWord$: Observable<string>);
    get items$(): Observable<QueryList<TuiTabDirective>>;
    get tabs(): ReadonlyArray<HTMLElement>;
    get activeElement(): HTMLElement | null;
    get isMoreVisible(): boolean;
    get isMoreActive(): boolean;
    get isMoreFocusable(): boolean;
    ngAfterViewInit(): void;
    onActiveItemIndexChange(activeItemIndex: number): void;
    onPresent(isPresent: boolean, { children }: HTMLElement): void;
    onClick(): void;
    onActivate(tab: HTMLElement, { children }: HTMLElement): void;
    onArrowRight(element: HTMLElement): void;
    onArrowLeft(): void;
    onWrapperArrow(button: HTMLButtonElement, wrapper: HTMLElement, prev: boolean): void;
    private focusMore;
    private getLastVisibleIndex;
    private updateActiveItemIndex;
}
