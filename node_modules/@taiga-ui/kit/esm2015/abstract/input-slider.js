import { __decorate } from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import { AbstractTuiControl, clamp, round, tuiDefaultProp, } from '@taiga-ui/cdk';
import { maskedNumberStringToNumber, tuiCreateAutoCorrectedNumberPipe, tuiCreateNumberMask, } from '@taiga-ui/core';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
export function quantumAssertion(quantum) {
    return quantum > 0;
}
/**
 * @internal
 */
let AbstractTuiInputSlider = class AbstractTuiInputSlider extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.min = 0;
        this.max = Infinity;
        this.minLabel = '';
        this.maxLabel = '';
        this.pluralize = null;
        this.segmentsPluralize = null;
        this.segments = 0;
        this.steps = 0;
        this.quantum = 1;
        this.keySteps = null;
        this.size = 'l';
        this.mask = (quantum, min) => ({
            mask: tuiCreateNumberMask({
                allowNegative: min < 0,
                allowDecimal: !Number.isInteger(quantum),
            }),
            pipe: tuiCreateAutoCorrectedNumberPipe(),
            guide: false,
        });
    }
    get segmented() {
        return this.segments > 0;
    }
    get hasPlaceholder() {
        return this.size === 'l';
    }
    get inputMode() {
        return Number.isInteger(this.quantum)
            ? "numeric" /* Numeric */
            : "decimal" /* Decimal */;
    }
    get length() {
        return this.max - this.min;
    }
    get computedSteps() {
        return this.steps || this.length / this.quantum;
    }
    get step() {
        return this.length / this.computedSteps;
    }
    get hostMode() {
        return this.modeDirective && this.modeDirective.mode;
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    isPluralized(pluralize) {
        return pluralize !== null && pluralize.length === 3;
    }
    valueGuard(value) {
        return this.quantum
            ? clamp(round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION), this.min, this.max)
            : clamp(value, this.min, this.max);
    }
    capInputValue(value, max = this.max) {
        const capped = Math.min(maskedNumberStringToNumber(value), max);
        if (this.min < 0 && capped < this.min) {
            return this.min;
        }
        return isNaN(capped) || capped < this.min ? null : capped;
    }
};
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "min", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "max", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "minLabel", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "maxLabel", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "pluralize", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "segmentsPluralize", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "segments", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "steps", void 0);
__decorate([
    Input(),
    tuiDefaultProp(quantumAssertion, 'Quantum must be positive')
], AbstractTuiInputSlider.prototype, "quantum", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], AbstractTuiInputSlider.prototype, "keySteps", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-tui-host-size')
], AbstractTuiInputSlider.prototype, "size", void 0);
__decorate([
    HostBinding('class._segmented')
], AbstractTuiInputSlider.prototype, "segmented", null);
__decorate([
    HostBinding('attr.data-mode')
], AbstractTuiInputSlider.prototype, "hostMode", null);
AbstractTuiInputSlider = __decorate([
    Directive()
], AbstractTuiInputSlider);
export { AbstractTuiInputSlider };
//# sourceMappingURL=data:application/json;base64,