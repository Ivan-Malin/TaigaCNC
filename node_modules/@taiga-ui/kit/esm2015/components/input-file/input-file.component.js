var TuiInputFileComponent_1;
import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, EMPTY_ARRAY, isNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_MOBILE, tuiDefaultProp, tuiPure, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TUI_MODE, } from '@taiga-ui/core';
import { TUI_DIGITAL_INFORMATION_UNITS, TUI_INPUT_FILE_TEXTS } from '@taiga-ui/kit/tokens';
import { formatSize } from '@taiga-ui/kit/utils/files';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
const DEFAULT_MAX_SIZE = 30 * 1000 * 1000; // 30 MB
// @dynamic
let TuiInputFileComponent = TuiInputFileComponent_1 = class TuiInputFileComponent extends AbstractTuiNullableControl {
    constructor(control, changeDetectorRef, isMobile, inputFileTexts$, mode$, units$) {
        super(control, changeDetectorRef);
        this.isMobile = isMobile;
        this.inputFileTexts$ = inputFileTexts$;
        this.mode$ = mode$;
        this.units$ = units$;
        this.link = '';
        this.label = '';
        this.accept = '';
        this.multiple = false;
        this.size = 'm';
        this.showSize = true;
        this.maxFileSize = DEFAULT_MAX_SIZE;
        this.loadingFiles = [];
        this.rejectedFiles = [];
        this.rejectedFilesChange = new EventEmitter();
        this.dataTransfer = null;
    }
    get nativeFocusableElement() {
        return this.input ? this.input.nativeElement : null;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get allowDelete() {
        return !this.computedDisabled && !this.readOnly;
    }
    get computedLink$() {
        return this.computeLink$(this.fileDragged, this.multiple, this.link);
    }
    get computedLabel$() {
        return this.computeLabel$(this.isMobile, this.fileDragged, this.multiple, this.label);
    }
    // @bad TODO: refactor after IE is dropped
    get fileDragged() {
        return (!!this.dataTransfer &&
            Array.prototype.indexOf.call(this.dataTransfer.types, 'Files') !== -1);
    }
    get acceptArray() {
        return this.getAcceptArray(this.accept);
    }
    get arrayValue() {
        return this.getValueArray(this.value);
    }
    get readyFiles() {
        return this.getReadyFiles(this.arrayValue, this.loadingFiles);
    }
    get computedLoading() {
        return this.getLoadingFiles(this.arrayValue, this.loadingFiles);
    }
    get hasFiles() {
        return !!this.rejectedFiles.length || !!this.arrayValue.length;
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    // TODO: refactor i18n messages
    onFilesSelected(input, texts, units) {
        this.processSelectedFiles(input.files, texts, units);
        input.value = '';
    }
    onDropped(event, texts, units) {
        this.processSelectedFiles(event.files, texts, units);
    }
    onDragOver(dataTransfer) {
        this.dataTransfer = dataTransfer;
    }
    removeFile(removedFile) {
        this.updateValue(this.multiple ? this.arrayValue.filter(file => file !== removedFile) : null);
    }
    removeRejectedFile(removedFile) {
        this.updateRejectedFiles(this.rejectedFiles.filter(file => file !== removedFile));
    }
    getAppearance(mode) {
        return mode === null ? '' : "outline" /* Outline */;
    }
    computeLink$(fileDragged, multiple, link) {
        if (fileDragged) {
            return of('');
        }
        return this.inputFileTexts$.pipe(map(texts => multiple && link === ''
            ? texts.defaultLinkMultiple
            : link || texts.defaultLinkSingle));
    }
    computeLabel$(isMobile, fileDragged, multiple, label) {
        if (isMobile) {
            return of('');
        }
        if (fileDragged) {
            return this.inputFileTexts$.pipe(map(texts => (multiple ? texts.dropMultiple : texts.drop)));
        }
        return this.inputFileTexts$.pipe(map(texts => multiple && label === ''
            ? texts.defaultLabelMultiple
            : label || texts.defaultLabelSingle));
    }
    getValueArray(value) {
        if (!value) {
            return EMPTY_ARRAY;
        }
        return value instanceof Array ? value : [value];
    }
    getReadyFiles(value, loading) {
        return value.filter(file => loading.indexOf(file) === -1);
    }
    getLoadingFiles(value, loading) {
        return loading.filter(file => value.indexOf(file) !== -1);
    }
    getAcceptArray(accept) {
        return accept.toLowerCase().split(',');
    }
    processSelectedFiles(files, texts, units) {
        // IE11 after selecting a file through the open dialog generates a second event passing an empty FileList.
        if (files === null || files.length === 0) {
            return;
        }
        const newFiles = this.multiple ? Array.from(files) : [files[0]];
        const tooBigFiles = newFiles.filter(file => file.size > this.maxFileSize);
        const wrongFormatFiles = newFiles.filter(file => !this.isFormatAcceptable(file) && tooBigFiles.indexOf(file) === -1);
        const acceptedFiles = newFiles.filter(file => tooBigFiles.indexOf(file) === -1 && wrongFormatFiles.indexOf(file) === -1);
        this.updateRejectedFiles([
            ...tooBigFiles.map(file => ({
                name: file.name,
                type: file.type,
                size: file.size,
                content: texts.maxSizeRejectionReason + formatSize(units, this.maxFileSize),
            })),
            ...wrongFormatFiles.map(file => ({
                name: file.name,
                type: file.type,
                size: file.size,
                content: texts.formatRejectionReason,
            })),
        ]);
        this.updateValue(this.multiple
            ? [...this.readyFiles, ...acceptedFiles]
            : acceptedFiles[0] || null);
    }
    isFormatAcceptable(file) {
        if (!this.accept) {
            return true;
        }
        const extension = '.' + (file.name.split('.').pop() || '').toLowerCase();
        return this.acceptArray.some(format => format === extension ||
            format === file.type ||
            (format.split('/')[1] === '*' &&
                file.type.split('/')[0] === format.split('/')[0]));
    }
    updateRejectedFiles(rejectedFiles) {
        this.rejectedFiles = rejectedFiles;
        this.rejectedFilesChange.emit(rejectedFiles);
    }
};
TuiInputFileComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_MOBILE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_INPUT_FILE_TEXTS,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_DIGITAL_INFORMATION_UNITS,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "link", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "label", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "accept", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "multiple", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "showSize", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "maxFileSize", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "loadingFiles", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiInputFileComponent.prototype, "rejectedFiles", void 0);
__decorate([
    Output()
], TuiInputFileComponent.prototype, "rejectedFilesChange", void 0);
__decorate([
    ViewChild('input')
], TuiInputFileComponent.prototype, "input", void 0);
__decorate([
    tuiPure
], TuiInputFileComponent.prototype, "computeLink$", null);
__decorate([
    tuiPure
], TuiInputFileComponent.prototype, "computeLabel$", null);
__decorate([
    tuiPure
], TuiInputFileComponent.prototype, "getValueArray", null);
__decorate([
    tuiPure
], TuiInputFileComponent.prototype, "getReadyFiles", null);
__decorate([
    tuiPure
], TuiInputFileComponent.prototype, "getLoadingFiles", null);
__decorate([
    tuiPure
], TuiInputFileComponent.prototype, "getAcceptArray", null);
TuiInputFileComponent = TuiInputFileComponent_1 = __decorate([
    Component({
        selector: 'tui-input-file',
        template: "<tui-wrapper\n    *ngIf=\"multiple || !value\"\n    class=\"wrapper\"\n    [class.wrapper_mobile]=\"isMobile\"\n    [class.wrapper_has-files]=\"hasFiles\"\n    [appearance]=\"getAppearance(mode$ | async)\"\n    [focused]=\"computedFocused\"\n    [hovered]=\"computedHovered || fileDragged\"\n    [pressed]=\"computedPressed\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"computedDisabled\"\n>\n    <label\n        *ngIf=\"(units$ | async) as units\"\n        automation-id=\"tui-input-file__label\"\n    >\n        <a tuiLink>\n            <span\n                polymorpheus-outlet\n                class=\"inline\"\n                [content]=\"computedLink$ | async\"\n            ></span>\n        </a>\n        <ng-container *ngIf=\"computedLabel$ | async as computedLabel\">\n            <span>&nbsp;</span>\n            <span\n                polymorpheus-outlet\n                class=\"inline\"\n                [content]=\"computedLabel\"\n            ></span>\n        </ng-container>\n        <input\n            *ngIf=\"!readOnly && !computedDisabled && (inputFileTexts$ | async) as texts\"\n            #input\n            class=\"native\"\n            type=\"file\"\n            tuiPreventDefault=\"mousedown\"\n            [id]=\"id\"\n            [accept]=\"accept\"\n            [multiple]=\"multiple\"\n            [tuiFocusable]=\"focusable\"\n            (change)=\"onFilesSelected(input, texts, units)\"\n            (tuiHoveredChange)=\"onHovered($event)\"\n            (tuiFocusedChange)=\"onFocused($event)\"\n            (tuiPressedChange)=\"onPressed($event)\"\n            (tuiDroppableDropped)=\"onDropped($event, texts, units)\"\n            (tuiDroppableDragOverChange)=\"onDragOver($event)\"\n        />\n    </label>\n</tui-wrapper>\n\n<section\n    *tuiLet=\"mode$ | async as mode\"\n    tuiGroup\n    class=\"files\"\n    orientation=\"vertical\"\n    [collapsed]=\"true\"\n>\n    <tui-file\n        *ngFor=\"let file of rejectedFiles\"\n        automation-id=\"tui-input-file__error\"\n        state=\"error\"\n        [attr.data-mode]=\"mode\"\n        [showSize]=\"showSize\"\n        [allowDelete]=\"allowDelete\"\n        [size]=\"size\"\n        [file]=\"file\"\n        (fileRemoved)=\"removeRejectedFile(file)\"\n    ></tui-file>\n    <tui-file\n        *ngFor=\"let file of computedLoading\"\n        automation-id=\"tui-input-file__loading\"\n        state=\"loading\"\n        [attr.data-mode]=\"mode\"\n        [showSize]=\"showSize\"\n        [allowDelete]=\"allowDelete\"\n        [size]=\"size\"\n        [file]=\"file\"\n        (fileRemoved)=\"removeFile(file)\"\n    ></tui-file>\n    <tui-file\n        *ngFor=\"let file of readyFiles\"\n        automation-id=\"tui-input-file__file\"\n        [attr.data-mode]=\"mode\"\n        [showSize]=\"showSize\"\n        [allowDelete]=\"allowDelete\"\n        [size]=\"size\"\n        [file]=\"file\"\n        (fileRemoved)=\"removeFile(file)\"\n    ></tui-file>\n</section>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            MODE_PROVIDER,
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiInputFileComponent_1),
            },
        ],
        styles: [":host{font:var(--tui-font-text-m);display:block;word-wrap:break-word;color:var(--tui-text-02)}.native{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.native::-webkit-file-upload-button{display:none}.inline{display:inline}.wrapper{display:flex;flex:1;justify-content:center;align-items:center;min-height:var(--tui-height-l);border-radius:var(--tui-radius-m);padding:16px 8px;box-sizing:border-box}.wrapper:after{border:1px dashed;color:var(--tui-link)}.wrapper_mobile:after{border-style:solid}.wrapper_has-files{margin-bottom:8px}.wrapper[data-state=hovered]{background:var(--tui-secondary)}.wrapper[data-state=hovered]:after{color:var(--tui-link-hover)}.wrapper[data-state=pressed]{background:var(--tui-secondary-hover)}.wrapper[data-state=readonly]{pointer-events:none}.wrapper[data-state=readonly]:after{color:var(--tui-text-03)}.wrapper[data-state=disabled]{opacity:var(--tui-disabled-opacity);pointer-events:none}.wrapper[data-state=disabled]:after{color:var(--tui-text-03)}.wrapper._focused:after{border-style:solid;border-width:2px;color:var(--tui-focus)}.files{display:flex}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(TUI_IS_MOBILE)),
    __param(3, Inject(TUI_INPUT_FILE_TEXTS)),
    __param(4, Inject(TUI_MODE)),
    __param(5, Inject(TUI_DIGITAL_INFORMATION_UNITS))
], TuiInputFileComponent);
export { TuiInputFileComponent };
//# sourceMappingURL=data:application/json;base64,