import { __decorate, __param } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, Renderer2, ViewChild, } from '@angular/core';
import { isCurrentTarget, tuiDefaultProp, tuiPure, typedFromEvent } from '@taiga-ui/cdk';
import { PolymorpheusOutletComponent } from '@tinkoff/ng-polymorpheus';
import { BehaviorSubject, of } from 'rxjs';
import { filter, mapTo, pairwise, startWith, switchMap } from 'rxjs/operators';
let TuiLineClampComponent = class TuiLineClampComponent {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.lineHeight = 24;
        this.content = '';
        this.linesLimit$ = new BehaviorSubject(1);
        this.initialized = false;
        // Skipping initial transition
        setTimeout(() => {
            renderer.addClass(this.elementRef.nativeElement, '_initialized');
        });
    }
    set linesLimit(linesLimit) {
        this.linesLimit$.next(linesLimit);
    }
    get lineClamp$() {
        return this.linesLimit$.pipe(startWith(1), pairwise(), switchMap(([prev, next]) => next >= prev
            ? of(next)
            : typedFromEvent(this.elementRef.nativeElement, 'transitionend').pipe(filter(isCurrentTarget), mapTo(next))));
    }
    get overflown() {
        if (!this.outlet) {
            return false;
        }
        const { scrollHeight, scrollWidth } = this.outlet.nativeElement;
        const { clientHeight, clientWidth } = this.elementRef.nativeElement;
        // 4px buffer for IE/Edge incorrectly rounding scrollHeight
        return scrollHeight - clientHeight > 4 || scrollWidth - clientWidth > 0;
    }
    get computedContent() {
        return this.overflown ? this.content : '';
    }
    get oneLine() {
        return this.linesLimit$.value === 1;
    }
    get maxHeight() {
        return this.initialized ? this.lineHeight * this.linesLimit$.value : null;
    }
    get height() {
        return !this.outlet ? 0 : this.outlet.nativeElement.scrollHeight + 4 || null;
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    // Change detection
    markForCheck() { }
};
TuiLineClampComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLineClampComponent.prototype, "linesLimit", null);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLineClampComponent.prototype, "lineHeight", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiLineClampComponent.prototype, "content", void 0);
__decorate([
    ViewChild(PolymorpheusOutletComponent, { read: ElementRef })
], TuiLineClampComponent.prototype, "outlet", void 0);
__decorate([
    tuiPure
], TuiLineClampComponent.prototype, "lineClamp$", null);
__decorate([
    HostBinding('style.maxHeight.px')
], TuiLineClampComponent.prototype, "maxHeight", null);
__decorate([
    HostBinding('style.height.px')
], TuiLineClampComponent.prototype, "height", null);
__decorate([
    HostListener('mouseenter')
], TuiLineClampComponent.prototype, "markForCheck", null);
TuiLineClampComponent = __decorate([
    Component({
        selector: 'tui-line-clamp',
        template: "<div\n    polymorpheus-outlet\n    class=\"wrapper\"\n    lineClamp\n    tuiHintId=\"unnecessary\"\n    tuiHintMode=\"overflow\"\n    [tuiHint]=\"computedContent\"\n    [class.wrapper_ellipsis]=\"oneLine\"\n    [style.-webkit-line-clamp]=\"lineClamp$ | async\"\n    [content]=\"content\"\n    (tuiResize)=\"markForCheck()\"\n></div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{position:relative;display:block;overflow:hidden}:host._initialized{transition-property:max-height;transition-duration:.3s;transition-timing-function:ease-in-out}.wrapper{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden}.wrapper_ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}"]
    }),
    __param(0, Inject(ElementRef)),
    __param(1, Inject(Renderer2))
], TuiLineClampComponent);
export { TuiLineClampComponent };
//# sourceMappingURL=data:application/json;base64,