import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { tuiDefaultProp, TuiDestroyService } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TUI_MODE, } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
let TuiMarkerIconComponent = class TuiMarkerIconComponent {
    constructor(destroy$, mode$) {
        this.mode = null;
        this.size = 'm';
        this.src = '';
        this.globalMode = null;
        mode$.pipe(takeUntil(destroy$)).subscribe(mode => {
            this.globalMode = mode;
        });
    }
    // TODO: Simplify
    get computedMode() {
        return this.globalMode === 'onDark' && !this.mode
            ? "onDark" /* OnDark */
            : this.mode;
    }
};
TuiMarkerIconComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MODE,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMarkerIconComponent.prototype, "mode", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-tui-host-size'),
    tuiDefaultProp()
], TuiMarkerIconComponent.prototype, "size", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMarkerIconComponent.prototype, "src", void 0);
__decorate([
    HostBinding('attr.data-mode')
], TuiMarkerIconComponent.prototype, "computedMode", null);
TuiMarkerIconComponent = __decorate([
    Component({
        selector: 'tui-marker-icon',
        template: "<tui-svg class=\"icon\" [src]=\"src\"></tui-svg>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [TuiDestroyService, MODE_PROVIDER],
        styles: [":host{transition-duration:.3s;transition-timing-function:ease-in-out;position:relative;display:inline-flex;align-items:center;justify-content:center;flex-shrink:0;border-radius:100%;color:var(--tui-text-03);background-color:var(--tui-base-02);background-size:cover!important;transition-property:color,background-color}:host[data-tui-host-size=xs]{width:32px;height:32px}:host[data-tui-host-size='s']{width:48px;height:48px}:host[data-tui-host-size='m']{width:64px;height:64px}:host[data-tui-host-size='l']{width:96px;height:96px}:host[data-tui-host-size=xl]{width:128px;height:128px}:host[data-mode=primary]{color:var(--tui-primary-text);background-color:var(--tui-primary)}:host[data-mode=white]{color:var(--tui-text-03);background-color:var(--tui-base-01)}:host[data-mode=warning]{color:var(--tui-warning-fill);background-color:var(--tui-warning-bg)}:host[data-mode=secondary]{color:var(--tui-base-01);background-color:var(--tui-info-fill)}:host[data-mode=error]{color:var(--tui-error-fill);background-color:var(--tui-error-bg)}:host[data-mode=success]{color:var(--tui-success-fill);background-color:var(--tui-success-bg)}:host[data-mode=onDark]{color:var(--tui-base-01);background-color:var(--tui-clear-inverse)}:host[data-mode=link]{transition-property:color;transition-duration:.3s;transition-timing-function:ease-in-out;cursor:pointer;color:var(--tui-link);background-color:var(--tui-secondary)}:host[data-mode=link]:hover{color:var(--tui-link-hover);background-color:var(--tui-secondary-hover)}:host[data-mode=link]:active{color:var(--tui-link-hover);background-color:var(--tui-secondary-active)}.icon{width:48px;height:48px}:host[data-tui-host-size=xs] .icon{transform:scale(.667)}:host[data-tui-host-size='m'] .icon{transform:scale(1.333)}:host[data-tui-host-size='l'] .icon{transform:scale(2)}:host[data-tui-host-size=xl] .icon{transform:scale(2.667)}"]
    }),
    __param(0, Inject(TuiDestroyService)),
    __param(1, Inject(TUI_MODE))
], TuiMarkerIconComponent);
export { TuiMarkerIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL21hcmtlci1pY29uLyIsInNvdXJjZXMiOlsibWFya2VyLWljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssR0FDUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFDSCxhQUFhLEVBQ2IsUUFBUSxHQUlYLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFTekMsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFnQi9CLFlBQytCLFFBQTZCLEVBQ3RDLEtBQXVDO1FBZjdELFNBQUksR0FBNkIsSUFBSSxDQUFDO1FBS3RDLFNBQUksR0FBMEIsR0FBRyxDQUFDO1FBSWxDLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFFRCxlQUFVLEdBQXlCLElBQUksQ0FBQztRQU01QyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxpQkFBaUI7SUFFakIsSUFBSSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQzdDLENBQUM7WUFDRCxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0NBQ0osQ0FBQTs7WUFmNEMsVUFBVSx1QkFBOUMsTUFBTSxTQUFDLGlCQUFpQjtZQUNBLFVBQVUsdUJBQWxDLE1BQU0sU0FBQyxRQUFROztBQWZwQjtJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTtvREFDcUI7QUFLdEM7SUFIQyxLQUFLLEVBQUU7SUFDUCxXQUFXLENBQUMseUJBQXlCLENBQUM7SUFDdEMsY0FBYyxFQUFFO29EQUNpQjtBQUlsQztJQUZDLEtBQUssRUFBRTtJQUNQLGNBQWMsRUFBRTttREFDUjtBQWVUO0lBREMsV0FBVyxDQUFDLGdCQUFnQixDQUFDOzBEQUs3QjtBQS9CUSxzQkFBc0I7SUFQbEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQiw4REFBMEM7UUFFMUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxDQUFDOztLQUNoRCxDQUFDO0lBa0JPLFdBQUEsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDekIsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7R0FsQlosc0JBQXNCLENBZ0NsQztTQWhDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlEZWZhdWx0UHJvcCwgVHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBNT0RFX1BST1ZJREVSLFxuICAgIFRVSV9NT0RFLFxuICAgIFR1aUJyaWdodG5lc3MsXG4gICAgVHVpU2l6ZVhMLFxuICAgIFR1aVNpemVYUyxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUdWlNYXJrZXJJY29uTW9kZX0gZnJvbSAnQHRhaWdhLXVpL2tpdC9lbnVtcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktbWFya2VyLWljb24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9tYXJrZXItaWNvbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9tYXJrZXItaWNvbi5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbVHVpRGVzdHJveVNlcnZpY2UsIE1PREVfUFJPVklERVJdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlNYXJrZXJJY29uQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbW9kZTogVHVpTWFya2VySWNvbk1vZGUgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtdHVpLWhvc3Qtc2l6ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaXplOiBUdWlTaXplWFMgfCBUdWlTaXplWEwgPSAnbSc7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc3JjID0gJyc7XG5cbiAgICBwcml2YXRlIGdsb2JhbE1vZGU6IFR1aUJyaWdodG5lc3MgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChUVUlfTU9ERSkgbW9kZSQ6IE9ic2VydmFibGU8VHVpQnJpZ2h0bmVzcyB8IG51bGw+LFxuICAgICkge1xuICAgICAgICBtb2RlJC5waXBlKHRha2VVbnRpbChkZXN0cm95JCkpLnN1YnNjcmliZShtb2RlID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTW9kZSA9IG1vZGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFNpbXBsaWZ5XG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtbW9kZScpXG4gICAgZ2V0IGNvbXB1dGVkTW9kZSgpOiBUdWlNYXJrZXJJY29uTW9kZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxNb2RlID09PSAnb25EYXJrJyAmJiAhdGhpcy5tb2RlXG4gICAgICAgICAgICA/IFR1aU1hcmtlckljb25Nb2RlLk9uRGFya1xuICAgICAgICAgICAgOiB0aGlzLm1vZGU7XG4gICAgfVxufVxuIl19