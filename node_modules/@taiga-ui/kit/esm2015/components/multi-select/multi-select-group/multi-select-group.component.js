import { __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, Inject, Input, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { EMPTY_QUERY, getOriginalArrayFromQueryList, isPresent, itemsQueryListObservable, TUI_DEFAULT_IDENTITY_MATCHER, tuiDefaultProp, tuiPure, tuiReplayedValueChangesFrom, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_DATA_LIST_HOST, TuiOptionComponent, } from '@taiga-ui/core';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
let TuiMultiSelectGroupComponent = class TuiMultiSelectGroupComponent {
    constructor(host, control) {
        this.host = host;
        this.control = control;
        this.label = '';
        this.options = EMPTY_QUERY;
    }
    get size() {
        return (this.options.first && this.options.first.size) || 'm';
    }
    get checkboxSize() {
        return this.options.first && sizeBigger(this.options.first.size) ? 'l' : 'm';
    }
    get empty$() {
        return itemsQueryListObservable(this.options).pipe(map(({ length }) => !length));
    }
    get disabled$() {
        return itemsQueryListObservable(this.options).pipe(map(items => items.every(({ disabled }) => disabled)));
    }
    get value$() {
        return combineLatest(this.items$, this.valueChanges$).pipe(map(([items, current]) => {
            let result = false;
            for (let i = 0; i < items.length; i++) {
                const selected = current.some(selected => this.matcher(selected, items[i]));
                if ((!selected && result) || (selected && !result && i)) {
                    return null;
                }
                result = selected;
            }
            return result;
        }));
    }
    onClick(checked) {
        if (!this.control.control) {
            return;
        }
        const controlValue = this.control.value || [];
        const { values } = this;
        const filtered = controlValue.filter(current => values.every(item => !this.matcher(current, item)));
        this.control.control.setValue(checked ? filtered : [...filtered, ...values]);
    }
    get values() {
        return this.filter(getOriginalArrayFromQueryList(this.options));
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    get items$() {
        return itemsQueryListObservable(this.options).pipe(map(options => options.map(({ value }) => value).filter(isPresent)));
    }
    get valueChanges$() {
        return tuiReplayedValueChangesFrom(this.control).pipe(map(value => value || []));
    }
    filter(items) {
        return items.map(({ value }) => value).filter(isPresent);
    }
};
TuiMultiSelectGroupComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
    { type: NgControl, decorators: [{ type: Inject, args: [NgControl,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiMultiSelectGroupComponent.prototype, "label", void 0);
__decorate([
    ContentChildren(TuiOptionComponent)
], TuiMultiSelectGroupComponent.prototype, "options", void 0);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "empty$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "value$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "items$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "filter", null);
TuiMultiSelectGroupComponent = __decorate([
    Component({
        selector: 'tui-opt-group[tuiMultiSelectGroup]',
        template: "<ng-container *tuiLet=\"value$ | async as value\">\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiMultiSelectGroupReset\n        tuiOption\n        [size]=\"size\"\n        [disabled]=\"disabled$ | async\"\n        (click)=\"onClick(value)\"\n    >\n        <tui-primitive-checkbox\n            class=\"tui-space_right-3\"\n            [size]=\"checkboxSize\"\n            [value]=\"value\"\n        ></tui-primitive-checkbox>\n        <span class=\"label\">{{label}}</span>\n    </button>\n</ng-container>\n<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:flex;flex-direction:column}:host:before{content:''}.label{font:var(--tui-font-text-xs);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;flex:1;color:var(--tui-text-02)}"]
    }),
    __param(0, Inject(TUI_DATA_LIST_HOST)),
    __param(1, Inject(NgControl))
], TuiMultiSelectGroupComponent);
export { TuiMultiSelectGroupComponent };
//# sourceMappingURL=data:application/json;base64,