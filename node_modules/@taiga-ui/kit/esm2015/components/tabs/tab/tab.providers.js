import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ElementRef, InjectionToken } from '@angular/core';
import { identity, tuiCustomEvent, TuiDestroyService, TuiFocusVisibleService, typedFromEvent, watch, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiRouterLinkActiveService } from '@taiga-ui/core';
import { EMPTY, merge } from 'rxjs';
import { filter, mapTo, takeUntil } from 'rxjs/operators';
export const TUI_TAB_ACTIVATE = 'tui-tab-activate';
export const TUI_TAB_EVENT = new InjectionToken('Stream of tab activation events');
export const TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            DOCUMENT,
            TuiRouterLinkActiveService,
            TuiDestroyService,
            ChangeDetectorRef,
        ],
        useFactory: tabActiveFactory,
    },
    MODE_PROVIDER,
];
export function tabActiveFactory({ nativeElement }, documentRef, routerLinkActiveService, destroy$, changeDetectorRef) {
    return merge(routerLinkActiveService.pipe(filter(identity)), nativeElement.matches('button') ? typedFromEvent(nativeElement, 'click') : EMPTY).pipe(takeUntil(destroy$), watch(changeDetectorRef), mapTo(tuiCustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }, documentRef)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90YWJzLyIsInNvdXJjZXMiOlsidGFiL3RhYi5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxRQUFRLEVBQ1IsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsY0FBYyxFQUNkLEtBQUssR0FDUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFFLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUMzQyxpQ0FBaUMsQ0FDcEMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFlO0lBQ3pDLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsMEJBQTBCO0lBQzFCO1FBQ0ksT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFO1lBQ0YsVUFBVTtZQUNWLFFBQVE7WUFDUiwwQkFBMEI7WUFDMUIsaUJBQWlCO1lBQ2pCLGlCQUFpQjtTQUNwQjtRQUNELFVBQVUsRUFBRSxnQkFBZ0I7S0FDL0I7SUFDRCxhQUFhO0NBQ2hCLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCLENBQzVCLEVBQUMsYUFBYSxFQUEwQixFQUN4QyxXQUFxQixFQUNyQix1QkFBNEMsRUFDNUMsUUFBMEIsRUFDMUIsaUJBQW9DO0lBRXBDLE9BQU8sS0FBSyxDQUNSLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDOUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUNuRixDQUFDLElBQUksQ0FDRixTQUFTLENBQUMsUUFBUSxDQUFDLEVBQ25CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUN4QixLQUFLLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQ3hFLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIGlkZW50aXR5LFxuICAgIHR1aUN1c3RvbUV2ZW50LFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgdHlwZWRGcm9tRXZlbnQsXG4gICAgd2F0Y2gsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtNT0RFX1BST1ZJREVSLCBUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtFTVBUWSwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcFRvLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9UQUJfQUNUSVZBVEUgPSAndHVpLXRhYi1hY3RpdmF0ZSc7XG5leHBvcnQgY29uc3QgVFVJX1RBQl9FVkVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPEV2ZW50Pj4oXG4gICAgJ1N0cmVhbSBvZiB0YWIgYWN0aXZhdGlvbiBldmVudHMnLFxuKTtcbmV4cG9ydCBjb25zdCBUVUlfVEFCX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLFxuICAgIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RBQl9FVkVOVCxcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgRWxlbWVudFJlZixcbiAgICAgICAgICAgIERPQ1VNRU5ULFxuICAgICAgICAgICAgVHVpUm91dGVyTGlua0FjdGl2ZVNlcnZpY2UsXG4gICAgICAgICAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICAgICAgICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBdLFxuICAgICAgICB1c2VGYWN0b3J5OiB0YWJBY3RpdmVGYWN0b3J5LFxuICAgIH0sXG4gICAgTU9ERV9QUk9WSURFUixcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWJBY3RpdmVGYWN0b3J5KFxuICAgIHtuYXRpdmVFbGVtZW50fTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgZG9jdW1lbnRSZWY6IERvY3VtZW50LFxuICAgIHJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHZvaWQ+LFxuICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbik6IE9ic2VydmFibGU8RXZlbnQ+IHtcbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICAgIHJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLnBpcGUoZmlsdGVyKGlkZW50aXR5KSksXG4gICAgICAgIG5hdGl2ZUVsZW1lbnQubWF0Y2hlcygnYnV0dG9uJykgPyB0eXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnY2xpY2snKSA6IEVNUFRZLFxuICAgICkucGlwZShcbiAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3kkKSxcbiAgICAgICAgd2F0Y2goY2hhbmdlRGV0ZWN0b3JSZWYpLFxuICAgICAgICBtYXBUbyh0dWlDdXN0b21FdmVudChUVUlfVEFCX0FDVElWQVRFLCB7YnViYmxlczogdHJ1ZX0sIGRvY3VtZW50UmVmKSksXG4gICAgKTtcbn1cbiJdfQ==