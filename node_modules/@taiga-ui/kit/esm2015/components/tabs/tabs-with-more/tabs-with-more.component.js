import { __decorate, __param } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Input, Output, QueryList, Renderer2, ViewChild, } from '@angular/core';
import { EMPTY_QUERY, getClosestKeyboardFocusable, isNativeFocused, setNativeFocused, tuiDefaultProp, tuiPure, tuiRequiredSetter, } from '@taiga-ui/cdk';
import { TUI_MORE_WORD } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { filter, map, startWith } from 'rxjs/operators';
import { TuiTabDirective } from '../tab.directive';
import { TuiTabComponent } from '../tab/tab.component';
import { TAB_ACTIVE_CLASS, TAB_MARGIN } from '../tabs.const';
import { TABS_PROVIDERS, TABS_REFRESH } from './tabs-with-more.providers';
// @dynamic
let TuiTabsWithMoreComponent = class TuiTabsWithMoreComponent {
    constructor(refresh$, elementRef, renderer, changeDetectorRef, moreWord$) {
        this.refresh$ = refresh$;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.moreWord$ = moreWord$;
        this.moreContent = '';
        this.underline = true;
        this.activeItemIndex = 0;
        this.activeItemIndexChange = new EventEmitter();
        this.itemsList = EMPTY_QUERY;
        this.open = false;
        this.lastVisibleIndex = Infinity;
        this.itemsLimit = Infinity;
    }
    set itemsLimitSetter(itemsLimit) {
        this.itemsLimit = itemsLimit;
        this.lastVisibleIndex = this.getLastVisibleIndex();
    }
    get items$() {
        return this.itemsList.changes.pipe(startWith(this.itemsList));
    }
    get tabs() {
        return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        const { tabs } = this;
        if (this.activeItemIndex > this.lastVisibleIndex) {
            return tabs[tabs.length - 1];
        }
        return tabs[this.activeItemIndex] || null;
    }
    get isMoreVisible() {
        return this.lastVisibleIndex < this.tabs.length - 2;
    }
    get isMoreActive() {
        return this.open || this.activeItemIndex > this.lastVisibleIndex;
    }
    get isMoreFocusable() {
        return (this.isMoreActive ||
            (!!this.moreButton && isNativeFocused(this.moreButton.nativeElement)));
    }
    ngAfterViewInit() {
        this.refresh$
            .pipe(map(() => this.getLastVisibleIndex()), filter(lastVisibleIndex => this.lastVisibleIndex !== lastVisibleIndex))
            .subscribe(lastVisibleIndex => {
            this.lastVisibleIndex = lastVisibleIndex;
            this.changeDetectorRef.detectChanges();
        });
    }
    onActiveItemIndexChange(activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    }
    onPresent(isPresent, { children }) {
        if (!isPresent || this.lastVisibleIndex >= this.activeItemIndex) {
            return;
        }
        const buttons = Array.from(children);
        const active = buttons[this.activeItemIndex - this.lastVisibleIndex - 1];
        this.renderer.addClass(active, TAB_ACTIVE_CLASS);
    }
    onClick() {
        this.open = false;
        this.focusMore();
    }
    onActivate(tab, { children }) {
        const elements = Array.from(children);
        const index = elements.findIndex(element => element === tab);
        if (index !== -1) {
            this.updateActiveItemIndex(index + this.lastVisibleIndex + 1);
        }
    }
    onArrowRight(element) {
        if (isNativeFocused(element)) {
            this.focusMore();
        }
    }
    onArrowLeft() {
        const { tabs } = this;
        let index = tabs.length - 2;
        while (index >= 0) {
            setNativeFocused(tabs[index]);
            if (isNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    }
    onWrapperArrow(button, wrapper, prev) {
        const target = getClosestKeyboardFocusable(button, prev, wrapper);
        if (target) {
            setNativeFocused(target);
        }
    }
    focusMore() {
        if (this.moreButton) {
            setNativeFocused(this.moreButton.nativeElement);
        }
    }
    getLastVisibleIndex() {
        const { tabs } = this;
        if (!tabs.length) {
            return 0;
        }
        const filtered = tabs.filter((tab, index) => tab.scrollWidth && index !== tabs.length - 1);
        const last = filtered[filtered.length - 1];
        const moreWidth = tabs[tabs.length - 1].scrollWidth;
        const width = this.elementRef.nativeElement.clientWidth - moreWidth - TAB_MARGIN;
        let accumulatedWidth = 0;
        let lastVisibleIndex = 0;
        for (let tabIndex = 0; tabIndex < tabs.length - 1; tabIndex++) {
            accumulatedWidth +=
                tabs[tabIndex] === last
                    ? tabs[tabIndex].scrollWidth - moreWidth - TAB_MARGIN
                    : tabs[tabIndex].scrollWidth;
            if (tabIndex > this.itemsLimit) {
                return lastVisibleIndex - 1;
            }
            if (accumulatedWidth > width) {
                return lastVisibleIndex;
            }
            accumulatedWidth += TAB_MARGIN * Math.min(tabs[tabIndex].scrollWidth, 1);
            lastVisibleIndex = tabIndex;
        }
        return Infinity;
    }
    updateActiveItemIndex(activeItemIndex) {
        if (this.activeItemIndex === activeItemIndex) {
            return;
        }
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
    }
};
TuiTabsWithMoreComponent.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [TABS_REFRESH,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_MORE_WORD,] }] }
];
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "moreContent", void 0);
__decorate([
    Input(),
    HostBinding('class._underline'),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "underline", void 0);
__decorate([
    Input(),
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "activeItemIndex", void 0);
__decorate([
    Input('itemsLimit'),
    tuiRequiredSetter()
], TuiTabsWithMoreComponent.prototype, "itemsLimitSetter", null);
__decorate([
    Output()
], TuiTabsWithMoreComponent.prototype, "activeItemIndexChange", void 0);
__decorate([
    ContentChildren(TuiTabDirective)
], TuiTabsWithMoreComponent.prototype, "itemsList", void 0);
__decorate([
    ViewChild(TuiTabComponent, { read: ElementRef })
], TuiTabsWithMoreComponent.prototype, "moreButton", void 0);
__decorate([
    tuiPure
], TuiTabsWithMoreComponent.prototype, "items$", null);
TuiTabsWithMoreComponent = __decorate([
    Component({
        selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]',
        template: "<div *ngIf=\"items$ | async as items\" class=\"wrapper\">\n    <tui-underline *ngIf=\"underline\" [element]=\"activeElement\"></tui-underline>\n    <tui-tabs\n        class=\"tabs\"\n        [underline]=\"false\"\n        [activeItemIndex]=\"activeItemIndex\"\n        (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n        (keydown.arrowRight)=\"onArrowRight($event.target)\"\n    >\n        <ng-container *ngFor=\"let item of items; let index = index\">\n            <ng-container\n                *ngIf=\"index <= lastVisibleIndex; else hidden\"\n                [ngTemplateOutlet]=\"item.template\"\n            ></ng-container>\n            <ng-template #hidden>\n                <div class=\"visually-hidden\">\n                    <ng-container\n                        *ngTemplateOutlet=\"item.template\"\n                    ></ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </tui-tabs>\n    <tui-hosted-dropdown\n        class=\"more_wrapper\"\n        [class.visually-hidden]=\"!isMoreVisible\"\n        [content]=\"dropdown\"\n        [(open)]=\"open\"\n    >\n        <button\n            tuiTab\n            type=\"button\"\n            class=\"more\"\n            [class._active]=\"isMoreActive\"\n            [tuiFocusable]=\"isMoreFocusable\"\n            (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n        >\n            <span polymorpheus-outlet [content]=\"moreContent || more\"></span>\n        </button>\n        <ng-template #more>\n            {{moreWord$ | async}}\n            <tui-svg\n                src=\"tuiIconChevronDown\"\n                class=\"icon\"\n                [class.icon_rotated]=\"open\"\n            ></tui-svg>\n        </ng-template>\n    </tui-hosted-dropdown>\n    <ng-template #dropdown>\n        <div\n            #element\n            class=\"dropdown\"\n            (click)=\"onClick()\"\n            (tui-tab-activate)=\"onActivate($event.target, element)\"\n            (keydown.arrowUp.prevent)=\"onWrapperArrow($event.target, element, true)\"\n            (keydown.arrowDown.prevent)=\"onWrapperArrow($event.target, element, false)\"\n            (tuiPresentChange)=\"onPresent($event, element)\"\n        >\n            <ng-container *ngFor=\"let item of items; let index = index\">\n                <ng-container\n                    *ngIf=\"index > lastVisibleIndex\"\n                    [ngTemplateOutlet]=\"item.template\"\n                ></ng-container\n            ></ng-container>\n        </div>\n    </ng-template>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: TABS_PROVIDERS,
        styles: [":host{font:var(--tui-font-text-m);position:relative;display:flex;height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.wrapper{position:relative;display:flex}.tabs{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.visually-hidden{width:0;max-width:0;overflow:hidden;visibility:hidden}.more_wrapper{height:100%}.more.more._active{pointer-events:auto}.icon{transition-property:transform;transition-duration:.3s;transition-timing-function:ease-in-out;margin-right:-4px;vertical-align:bottom}.icon_rotated{transform:rotate(180deg)}.dropdown{display:flex;flex-direction:column;padding:8px 0}.dropdown ::ng-deep [tuiTab]{height:44px;justify-content:flex-start;margin:0;padding:0 16px;color:var(--tui-text-02)}.dropdown ::ng-deep [tuiTab]:before{display:none}.dropdown ::ng-deep [tuiTab]._active,.dropdown ::ng-deep [tuiTab]:focus,.dropdown ::ng-deep [tuiTab]:hover{box-shadow:none;color:var(--tui-base-08);background:var(--tui-base-02)}"]
    }),
    __param(0, Inject(TABS_REFRESH)),
    __param(1, Inject(ElementRef)),
    __param(2, Inject(Renderer2)),
    __param(3, Inject(ChangeDetectorRef)),
    __param(4, Inject(TUI_MORE_WORD))
], TuiTabsWithMoreComponent);
export { TuiTabsWithMoreComponent };
//# sourceMappingURL=data:application/json;base64,