import { __decorate, __extends } from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import { AbstractTuiControl, clamp, round, tuiDefaultProp, } from '@taiga-ui/cdk';
import { maskedNumberStringToNumber, tuiCreateAutoCorrectedNumberPipe, tuiCreateNumberMask, } from '@taiga-ui/core';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
export function quantumAssertion(quantum) {
    return quantum > 0;
}
/**
 * @internal
 */
var AbstractTuiInputSlider = /** @class */ (function (_super) {
    __extends(AbstractTuiInputSlider, _super);
    function AbstractTuiInputSlider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.min = 0;
        _this.max = Infinity;
        _this.minLabel = '';
        _this.maxLabel = '';
        _this.pluralize = null;
        _this.segmentsPluralize = null;
        _this.segments = 0;
        _this.steps = 0;
        _this.quantum = 1;
        _this.keySteps = null;
        _this.size = 'l';
        _this.mask = function (quantum, min) { return ({
            mask: tuiCreateNumberMask({
                allowNegative: min < 0,
                allowDecimal: !Number.isInteger(quantum),
            }),
            pipe: tuiCreateAutoCorrectedNumberPipe(),
            guide: false,
        }); };
        return _this;
    }
    Object.defineProperty(AbstractTuiInputSlider.prototype, "segmented", {
        get: function () {
            return this.segments > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "hasPlaceholder", {
        get: function () {
            return this.size === 'l';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "inputMode", {
        get: function () {
            return Number.isInteger(this.quantum)
                ? "numeric" /* Numeric */
                : "decimal" /* Decimal */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "length", {
        get: function () {
            return this.max - this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "computedSteps", {
        get: function () {
            return this.steps || this.length / this.quantum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "step", {
        get: function () {
            return this.length / this.computedSteps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiInputSlider.prototype, "hostMode", {
        get: function () {
            return this.modeDirective && this.modeDirective.mode;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiInputSlider.prototype.onHovered = function (hovered) {
        this.updateHovered(hovered);
    };
    AbstractTuiInputSlider.prototype.isPluralized = function (pluralize) {
        return pluralize !== null && pluralize.length === 3;
    };
    AbstractTuiInputSlider.prototype.valueGuard = function (value) {
        return this.quantum
            ? clamp(round(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION), this.min, this.max)
            : clamp(value, this.min, this.max);
    };
    AbstractTuiInputSlider.prototype.capInputValue = function (value, max) {
        if (max === void 0) { max = this.max; }
        var capped = Math.min(maskedNumberStringToNumber(value), max);
        if (this.min < 0 && capped < this.min) {
            return this.min;
        }
        return isNaN(capped) || capped < this.min ? null : capped;
    };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "minLabel", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "maxLabel", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "pluralize", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "segmentsPluralize", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "segments", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "steps", void 0);
    __decorate([
        Input(),
        tuiDefaultProp(quantumAssertion, 'Quantum must be positive')
    ], AbstractTuiInputSlider.prototype, "quantum", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiInputSlider.prototype, "keySteps", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-size')
    ], AbstractTuiInputSlider.prototype, "size", void 0);
    __decorate([
        HostBinding('class._segmented')
    ], AbstractTuiInputSlider.prototype, "segmented", null);
    __decorate([
        HostBinding('attr.data-mode')
    ], AbstractTuiInputSlider.prototype, "hostMode", null);
    AbstractTuiInputSlider = __decorate([
        Directive()
    ], AbstractTuiInputSlider);
    return AbstractTuiInputSlider;
}(AbstractTuiControl));
export { AbstractTuiInputSlider };
//# sourceMappingURL=data:application/json;base64,