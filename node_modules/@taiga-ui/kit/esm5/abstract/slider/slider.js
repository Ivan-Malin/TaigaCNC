import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Inject, Input, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, clamp, quantize, round, setNativeFocused, tuiDefaultProp, typedFromEvent, } from '@taiga-ui/cdk';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable, race, Subject } from 'rxjs';
import { map, switchMap, takeUntil } from 'rxjs/operators';
export var SLIDER_KEYBOARD_STEP = 0.05;
export var DOT_WIDTH = {
    s: 8,
    m: 16,
};
/**
 * @awful TODO: refactor
 * @internal
 * @dynamic
 */
var AbstractTuiSlider = /** @class */ (function (_super) {
    __extends(AbstractTuiSlider, _super);
    function AbstractTuiSlider(ngControl, changeDetectorRef, documentRef, fromToTexts$) {
        var _this = _super.call(this, ngControl, changeDetectorRef) || this;
        _this.documentRef = documentRef;
        _this.fromToTexts$ = fromToTexts$;
        _this.min = 0;
        _this.max = Infinity;
        _this.segments = 0;
        _this.steps = 0;
        _this.pluralize = null;
        _this.size = 'm';
        _this.keySteps = null;
        _this.focusVisibleLeft = false;
        _this.focusVisibleRight = false;
        // @bad TODO: handle pointer events instead of mouse and touch events
        _this.pointerDown$ = new Subject();
        return _this;
    }
    Object.defineProperty(AbstractTuiSlider.prototype, "segmented", {
        get: function () {
            return this.segments > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiSlider.prototype, "discrete", {
        get: function () {
            return this.steps > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiSlider.prototype, "length", {
        get: function () {
            return this.max - this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiSlider.prototype, "isLeftFocusable", {
        get: function () {
            return !this.disabled && this.focusable && this.right !== 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTuiSlider.prototype, "isRightFocusable", {
        get: function () {
            return !this.disabled && this.focusable && this.left !== 100;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTuiSlider.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        var mouseMoves$ = typedFromEvent(this.documentRef, 'mousemove');
        var mouseUps$ = typedFromEvent(this.documentRef, 'mouseup');
        var touchMoves$ = typedFromEvent(this.documentRef, 'touchmove');
        var touchEnds$ = typedFromEvent(this.documentRef, 'touchend');
        var isPointerDownRight;
        this.pointerDown$
            .pipe(map(function (event) {
            var rect = event.currentTarget.getBoundingClientRect();
            var clientX = event instanceof MouseEvent
                ? event.clientX
                : event.touches[0].clientX;
            var fraction = clamp(_this.getFractionFromEvents(rect, clientX), 0, 1);
            var deltaLeft = fraction * 100 - _this.left;
            var deltaRight = fraction * 100 - 100 + _this.right;
            isPointerDownRight =
                Math.abs(deltaLeft) > Math.abs(deltaRight) ||
                    deltaRight > 0 ||
                    (_this.left === 0 && _this.right === 100);
            var calibratedFraction = clamp(_this.getCalibratedFractionFromEvents(rect, clientX, isPointerDownRight), 0, 1);
            var value = _this.getValueFromFraction(_this.fractionGuard(calibratedFraction));
            _this.processValue(value, isPointerDownRight);
            _this.processFocus(isPointerDownRight);
            return rect;
        }), switchMap(function (rect) {
            return race([touchMoves$, mouseMoves$]).pipe(map(function (event) {
                return _this.getCalibratedFractionFromEvents(rect, event instanceof MouseEvent
                    ? event.clientX
                    : event.touches[0].clientX, isPointerDownRight);
            }), takeUntil(race([mouseUps$, touchEnds$])));
        }), map(function (fraction) { return _this.fractionGuard(fraction); }))
            .subscribe(function (fraction) {
            _this.processValue(_this.getValueFromFraction(fraction), isPointerDownRight);
        });
    };
    AbstractTuiSlider.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.pointerDown$.complete();
    };
    AbstractTuiSlider.prototype.onMouseDown = function (event) {
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        this.pointerDown$.next(event);
    };
    AbstractTuiSlider.prototype.onTouchStart = function (event) {
        if (this.disabled) {
            return;
        }
        event.preventDefault();
        this.pointerDown$.next(event);
    };
    AbstractTuiSlider.prototype.isPluralized = function (pluralize) {
        return pluralize !== null && pluralize.length === 3;
    };
    AbstractTuiSlider.prototype.decrement = function (right) {
        this.processStep(false, right);
    };
    AbstractTuiSlider.prototype.increment = function (right) {
        this.processStep(true, right);
    };
    AbstractTuiSlider.prototype.getSegmentLabel = function (segment) {
        return round(this.getValueFromFraction(segment / this.segments), 2);
    };
    AbstractTuiSlider.prototype.getSegmentPrefix = function (segment, texts) {
        if (this.segments !== 1) {
            return '';
        }
        if (segment === 0) {
            return texts[0] + " ";
        }
        return texts[1] + " ";
    };
    AbstractTuiSlider.prototype.onActiveZone = function (active) {
        this.updateFocused(active);
    };
    AbstractTuiSlider.prototype.onLeftFocusVisible = function (focusVisible) {
        this.focusVisibleLeft = focusVisible;
    };
    AbstractTuiSlider.prototype.onRightFocusVisible = function (focusVisible) {
        this.focusVisibleRight = focusVisible;
    };
    AbstractTuiSlider.prototype.getFractionFromValue = function (value) {
        var fraction = (value - this.min) / this.length;
        return this.keySteps !== null
            ? this.fractionValueKeyStepConverter(value, false)
            : clamp(Number.isFinite(fraction) ? fraction : 1, 0, 1);
    };
    AbstractTuiSlider.prototype.getValueFromFraction = function (fraction) {
        return this.keySteps !== null
            ? this.fractionValueKeyStepConverter(fraction, true)
            : round(this.fractionGuard(fraction) * this.length + this.min, TUI_FLOATING_PRECISION);
    };
    AbstractTuiSlider.prototype.getCalibratedFractionFromEvents = function (rect, clientX, _) {
        return this.getFractionFromEvents(rect, clientX);
    };
    AbstractTuiSlider.prototype.processFocus = function (right) {
        if (!this.focusable || !this.dotRight || !this.dotLeft) {
            return;
        }
        if (right) {
            setNativeFocused(this.dotRight.nativeElement);
        }
        else {
            setNativeFocused(this.dotLeft.nativeElement);
        }
    };
    /**
     * Function for converting the fullness of the slider to a value and vice versa
     * taking into account the steps of linear dependence.
     *
     * @param value passed value
     * @param isFraction translation is carried out from fullness to value
     */
    AbstractTuiSlider.prototype.fractionValueKeyStepConverter = function (value, isFraction) {
        var steps = [[0, this.min]].concat(this.keySteps, [
            [100, this.max],
        ]);
        var prevFraction = 0;
        var nextFraction = 100;
        var prevValue = this.min;
        var nextValue = this.max;
        for (var i = 1; i < steps.length; i++) {
            if ((isFraction && steps[i][0] / 100 > value) ||
                (!isFraction && steps[i][1] > value)) {
                prevFraction = steps[i - 1][0] || 0;
                nextFraction = steps[i][0];
                prevValue = steps[i - 1][1];
                nextValue = steps[i][1];
                break;
            }
        }
        var deltaFraction = nextFraction - prevFraction;
        var deltaValue = nextValue - prevValue;
        return isFraction
            ? round(((value * 100 - prevFraction) / deltaFraction) * deltaValue + prevValue, TUI_FLOATING_PRECISION)
            : clamp(((value - prevValue) / deltaValue) * deltaFraction + prevFraction, 0, 100) / 100;
    };
    AbstractTuiSlider.prototype.fractionGuard = function (fraction) {
        return this.discrete
            ? clamp(quantize(fraction, 1 / this.steps), 0, 1)
            : clamp(fraction, 0, 1);
    };
    AbstractTuiSlider.prototype.getFractionFromEvents = function (rect, clientX) {
        var value = clientX - rect.left - DOT_WIDTH[this.size] / 2;
        var total = rect.width - DOT_WIDTH[this.size];
        return round(value / total, TUI_FLOATING_PRECISION);
    };
    AbstractTuiSlider.ctorParameters = function () { return [
        { type: NgControl },
        { type: ChangeDetectorRef },
        { type: Document },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "min", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "max", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "segments", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "steps", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "pluralize", void 0);
    __decorate([
        Input(),
        HostBinding('attr.data-tui-host-size'),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "size", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], AbstractTuiSlider.prototype, "keySteps", void 0);
    __decorate([
        ViewChild('dotLeft')
    ], AbstractTuiSlider.prototype, "dotLeft", void 0);
    __decorate([
        ViewChild('dotRight')
    ], AbstractTuiSlider.prototype, "dotRight", void 0);
    __decorate([
        HostBinding('class._segmented')
    ], AbstractTuiSlider.prototype, "segmented", null);
    AbstractTuiSlider = __decorate([
        Directive(),
        __param(3, Inject(TUI_FROM_TO_TEXTS))
    ], AbstractTuiSlider);
    return AbstractTuiSlider;
}(AbstractTuiControl));
export { AbstractTuiSlider };
//# sourceMappingURL=data:application/json;base64,