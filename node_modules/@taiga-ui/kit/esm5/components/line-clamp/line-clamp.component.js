import { __decorate, __param, __read } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, Renderer2, ViewChild, } from '@angular/core';
import { isCurrentTarget, tuiDefaultProp, tuiPure, typedFromEvent } from '@taiga-ui/cdk';
import { PolymorpheusOutletComponent } from '@tinkoff/ng-polymorpheus';
import { BehaviorSubject, of } from 'rxjs';
import { filter, mapTo, pairwise, startWith, switchMap } from 'rxjs/operators';
var TuiLineClampComponent = /** @class */ (function () {
    function TuiLineClampComponent(elementRef, renderer) {
        var _this = this;
        this.elementRef = elementRef;
        this.lineHeight = 24;
        this.content = '';
        this.linesLimit$ = new BehaviorSubject(1);
        this.initialized = false;
        // Skipping initial transition
        setTimeout(function () {
            renderer.addClass(_this.elementRef.nativeElement, '_initialized');
        });
    }
    Object.defineProperty(TuiLineClampComponent.prototype, "linesLimit", {
        set: function (linesLimit) {
            this.linesLimit$.next(linesLimit);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLineClampComponent.prototype, "lineClamp$", {
        get: function () {
            var _this = this;
            return this.linesLimit$.pipe(startWith(1), pairwise(), switchMap(function (_a) {
                var _b = __read(_a, 2), prev = _b[0], next = _b[1];
                return next >= prev
                    ? of(next)
                    : typedFromEvent(_this.elementRef.nativeElement, 'transitionend').pipe(filter(isCurrentTarget), mapTo(next));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLineClampComponent.prototype, "overflown", {
        get: function () {
            if (!this.outlet) {
                return false;
            }
            var _a = this.outlet.nativeElement, scrollHeight = _a.scrollHeight, scrollWidth = _a.scrollWidth;
            var _b = this.elementRef.nativeElement, clientHeight = _b.clientHeight, clientWidth = _b.clientWidth;
            // 4px buffer for IE/Edge incorrectly rounding scrollHeight
            return scrollHeight - clientHeight > 4 || scrollWidth - clientWidth > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLineClampComponent.prototype, "computedContent", {
        get: function () {
            return this.overflown ? this.content : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLineClampComponent.prototype, "oneLine", {
        get: function () {
            return this.linesLimit$.value === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLineClampComponent.prototype, "maxHeight", {
        get: function () {
            return this.initialized ? this.lineHeight * this.linesLimit$.value : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiLineClampComponent.prototype, "height", {
        get: function () {
            return !this.outlet ? 0 : this.outlet.nativeElement.scrollHeight + 4 || null;
        },
        enumerable: true,
        configurable: true
    });
    TuiLineClampComponent.prototype.ngAfterViewInit = function () {
        this.initialized = true;
    };
    // Change detection
    TuiLineClampComponent.prototype.markForCheck = function () { };
    TuiLineClampComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiLineClampComponent.prototype, "linesLimit", null);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiLineClampComponent.prototype, "lineHeight", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiLineClampComponent.prototype, "content", void 0);
    __decorate([
        ViewChild(PolymorpheusOutletComponent, { read: ElementRef })
    ], TuiLineClampComponent.prototype, "outlet", void 0);
    __decorate([
        tuiPure
    ], TuiLineClampComponent.prototype, "lineClamp$", null);
    __decorate([
        HostBinding('style.maxHeight.px')
    ], TuiLineClampComponent.prototype, "maxHeight", null);
    __decorate([
        HostBinding('style.height.px')
    ], TuiLineClampComponent.prototype, "height", null);
    __decorate([
        HostListener('mouseenter')
    ], TuiLineClampComponent.prototype, "markForCheck", null);
    TuiLineClampComponent = __decorate([
        Component({
            selector: 'tui-line-clamp',
            template: "<div\n    polymorpheus-outlet\n    class=\"wrapper\"\n    lineClamp\n    tuiHintId=\"unnecessary\"\n    tuiHintMode=\"overflow\"\n    [tuiHint]=\"computedContent\"\n    [class.wrapper_ellipsis]=\"oneLine\"\n    [style.-webkit-line-clamp]=\"lineClamp$ | async\"\n    [content]=\"content\"\n    (tuiResize)=\"markForCheck()\"\n></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{position:relative;display:block;overflow:hidden}:host._initialized{transition-property:max-height;transition-duration:.3s;transition-timing-function:ease-in-out}.wrapper{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden}.wrapper_ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(Renderer2))
    ], TuiLineClampComponent);
    return TuiLineClampComponent;
}());
export { TuiLineClampComponent };
//# sourceMappingURL=data:application/json;base64,