import { __decorate, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, NgZone, Renderer2, ViewContainerRef, } from '@angular/core';
import { ANIMATION_FRAME, CSS } from '@ng-web-apis/common';
import { CHAR_ELLIPSIS, TuiDestroyService, tuiZonefree } from '@taiga-ui/cdk';
import { setRangeOffset } from '@taiga-ui/kit/utils/dom';
import { Observable } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { TuiLineClampComponent } from './line-clamp.component';
var HIDDEN_LEFT = -200;
// @dynamic
var TuiLineClampDirective = /** @class */ (function () {
    function TuiLineClampDirective(component, viewContainerRef, documentRef, renderer, ngZone, _a, destroy$, animationFrame$, 
    /**
     * TODO: remove "any" in new TS version; https://github.com/ng-web-apis/common/pull/6
     */
    cssRef) {
        var nativeElement = _a.nativeElement;
        if (cssRef.supports('-webkit-line-clamp', '1') ||
            !(nativeElement.parentElement instanceof HTMLElement)) {
            return;
        }
        var range = documentRef.createRange();
        var ellipsis = renderer.createElement('div');
        var parentElement = nativeElement.parentElement;
        var style = ellipsis.style;
        style.position = 'absolute';
        style.bottom = '0';
        style.left = HIDDEN_LEFT + "px";
        ellipsis.textContent = CHAR_ELLIPSIS;
        viewContainerRef.element.nativeElement.appendChild(ellipsis);
        animationFrame$
            .pipe(map(function () {
            // 4px buffer for IE/Edge incorrectly rounding scrollHeight
            if (component.oneLine ||
                nativeElement.scrollHeight - parentElement.clientHeight < 4) {
                return HIDDEN_LEFT;
            }
            var result = 0;
            var length = nativeElement.textContent
                ? nativeElement.textContent.length
                : 0;
            for (var char = 0; char < length - 2; char++) {
                setRangeOffset(range, nativeElement, char, 'setStart');
                setRangeOffset(range, nativeElement, char + 1, 'setEnd');
                var rangeRect = range.getBoundingClientRect();
                var clientRect = parentElement.getBoundingClientRect();
                if (Math.round(rangeRect.top - clientRect.bottom) >= 0) {
                    break;
                }
                result = rangeRect.right - clientRect.left;
            }
            return result;
        }), tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(function (left) {
            style.left = left + "px";
        });
    }
    TuiLineClampDirective.ctorParameters = function () { return [
        { type: TuiLineClampComponent, decorators: [{ type: Inject, args: [TuiLineClampComponent,] }] },
        { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: TuiDestroyService, decorators: [{ type: Inject, args: [TuiDestroyService,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [ANIMATION_FRAME,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [CSS,] }] }
    ]; };
    TuiLineClampDirective = __decorate([
        Directive({
            selector: '[lineClamp]',
            providers: [TuiDestroyService],
        }),
        __param(0, Inject(TuiLineClampComponent)),
        __param(1, Inject(ViewContainerRef)),
        __param(2, Inject(DOCUMENT)),
        __param(3, Inject(Renderer2)),
        __param(4, Inject(NgZone)),
        __param(5, Inject(ElementRef)),
        __param(6, Inject(TuiDestroyService)),
        __param(7, Inject(ANIMATION_FRAME)),
        __param(8, Inject(CSS))
    ], TuiLineClampDirective);
    return TuiLineClampDirective;
}());
export { TuiLineClampDirective };
//# sourceMappingURL=data:application/json;base64,