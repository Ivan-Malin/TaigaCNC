import { __decorate, __extends } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { isPresent, tuiReplayedValueChangesFrom } from '@taiga-ui/cdk';
import { sizeBigger } from '@taiga-ui/core';
import { TuiSelectOptionComponent } from '@taiga-ui/kit/components/select-option';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { map } from 'rxjs/operators';
var TuiMultiSelectOptionComponent = /** @class */ (function (_super) {
    __extends(TuiMultiSelectOptionComponent, _super);
    function TuiMultiSelectOptionComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selected$ = tuiReplayedValueChangesFrom(_this.control).pipe(map(function (value) {
            return isPresent(_this.option.value) &&
                !!value &&
                !!value.find(function (item) { return _this.matcher(item, _this.option.value); });
        }));
        return _this;
    }
    Object.defineProperty(TuiMultiSelectOptionComponent.prototype, "size", {
        get: function () {
            return sizeBigger(this.option.size) ? 'l' : 'm';
        },
        enumerable: true,
        configurable: true
    });
    TuiMultiSelectOptionComponent = __decorate([
        Component({
            selector: 'tui-multi-select-option',
            template: "<tui-primitive-checkbox\n    class=\"tui-space_right-3\"\n    [size]=\"size\"\n    [value]=\"selected$ | async\"\n></tui-primitive-checkbox>\n<ng-container *ngTemplateOutlet=\"context.$implicit\"></ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;flex:1;align-items:center}"]
        })
    ], TuiMultiSelectOptionComponent);
    return TuiMultiSelectOptionComponent;
}(TuiSelectOptionComponent));
export { TuiMultiSelectOptionComponent };
export var TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvbXVsdGktc2VsZWN0LW9wdGlvbi8iLCJzb3VyY2VzIjpbIm11bHRpLXNlbGVjdC1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxTQUFTLEVBQUUsMkJBQTJCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFVBQVUsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQVFuQztJQUFzRCxpREFBMkI7SUFBakY7UUFBQSxxRUFhQztRQVpZLGVBQVMsR0FBRywyQkFBMkIsQ0FBbUIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDakYsR0FBRyxDQUNDLFVBQUEsS0FBSztZQUNELE9BQUEsU0FBUyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUM1QixDQUFDLENBQUMsS0FBSztnQkFDUCxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBTSxDQUFDLEVBQXRDLENBQXNDLENBQUM7UUFGNUQsQ0FFNEQsQ0FDbkUsQ0FDSixDQUFDOztJQUtOLENBQUM7SUFIRyxzQkFBSSwrQ0FBSTthQUFSO1lBQ0ksT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFaUSw2QkFBNkI7UUFOekMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHlCQUF5QjtZQUNuQyxpT0FBa0Q7WUFFbEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2xELENBQUM7T0FDVyw2QkFBNkIsQ0FhekM7SUFBRCxvQ0FBQztDQUFBLEFBYkQsQ0FBc0Qsd0JBQXdCLEdBYTdFO1NBYlksNkJBQTZCO0FBZTFDLE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLElBQUkscUJBQXFCLENBQzVELDZCQUE2QixDQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7aXNQcmVzZW50LCB0dWlSZXBsYXllZFZhbHVlQ2hhbmdlc0Zyb219IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtzaXplQmlnZ2VyLCBUdWlTaXplTH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUdWlTZWxlY3RPcHRpb25Db21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9zZWxlY3Qtb3B0aW9uJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktbXVsdGktc2VsZWN0LW9wdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL211bHRpLXNlbGVjdC1vcHRpb24udGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbXVsdGktc2VsZWN0LW9wdGlvbi5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU11bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50PFQ+IGV4dGVuZHMgVHVpU2VsZWN0T3B0aW9uQ29tcG9uZW50PFQ+IHtcbiAgICByZWFkb25seSBzZWxlY3RlZCQgPSB0dWlSZXBsYXllZFZhbHVlQ2hhbmdlc0Zyb208UmVhZG9ubHlBcnJheTxUPj4odGhpcy5jb250cm9sKS5waXBlKFxuICAgICAgICBtYXAoXG4gICAgICAgICAgICB2YWx1ZSA9PlxuICAgICAgICAgICAgICAgIGlzUHJlc2VudCh0aGlzLm9wdGlvbi52YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICAhIXZhbHVlICYmXG4gICAgICAgICAgICAgICAgISF2YWx1ZS5maW5kKGl0ZW0gPT4gdGhpcy5tYXRjaGVyKGl0ZW0sIHRoaXMub3B0aW9uLnZhbHVlISkpLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICBnZXQgc2l6ZSgpOiBUdWlTaXplTCB7XG4gICAgICAgIHJldHVybiBzaXplQmlnZ2VyKHRoaXMub3B0aW9uLnNpemUpID8gJ2wnIDogJ20nO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFRVSV9NVUxUSV9TRUxFQ1RfT1BUSU9OID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChcbiAgICBUdWlNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudCxcbik7XG4iXX0=