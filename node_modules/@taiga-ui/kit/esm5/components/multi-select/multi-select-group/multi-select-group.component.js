import { __decorate, __param, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, Inject, Input, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { EMPTY_QUERY, getOriginalArrayFromQueryList, isPresent, itemsQueryListObservable, TUI_DEFAULT_IDENTITY_MATCHER, tuiDefaultProp, tuiPure, tuiReplayedValueChangesFrom, } from '@taiga-ui/cdk';
import { sizeBigger, TUI_DATA_LIST_HOST, TuiOptionComponent, } from '@taiga-ui/core';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
var TuiMultiSelectGroupComponent = /** @class */ (function () {
    function TuiMultiSelectGroupComponent(host, control) {
        this.host = host;
        this.control = control;
        this.label = '';
        this.options = EMPTY_QUERY;
    }
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "size", {
        get: function () {
            return (this.options.first && this.options.first.size) || 'm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "checkboxSize", {
        get: function () {
            return this.options.first && sizeBigger(this.options.first.size) ? 'l' : 'm';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "empty$", {
        get: function () {
            return itemsQueryListObservable(this.options).pipe(map(function (_a) {
                var length = _a.length;
                return !length;
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "disabled$", {
        get: function () {
            return itemsQueryListObservable(this.options).pipe(map(function (items) { return items.every(function (_a) {
                var disabled = _a.disabled;
                return disabled;
            }); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "value$", {
        get: function () {
            var _this = this;
            return combineLatest(this.items$, this.valueChanges$).pipe(map(function (_a) {
                var _b = __read(_a, 2), items = _b[0], current = _b[1];
                var result = false;
                var _loop_1 = function (i) {
                    var selected = current.some(function (selected) {
                        return _this.matcher(selected, items[i]);
                    });
                    if ((!selected && result) || (selected && !result && i)) {
                        return { value: null };
                    }
                    result = selected;
                };
                for (var i = 0; i < items.length; i++) {
                    var state_1 = _loop_1(i);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
                return result;
            }));
        },
        enumerable: true,
        configurable: true
    });
    TuiMultiSelectGroupComponent.prototype.onClick = function (checked) {
        var _this = this;
        if (!this.control.control) {
            return;
        }
        var controlValue = this.control.value || [];
        var values = this.values;
        var filtered = controlValue.filter(function (current) {
            return values.every(function (item) { return !_this.matcher(current, item); });
        });
        this.control.control.setValue(checked ? filtered : __spread(filtered, values));
    };
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "values", {
        get: function () {
            return this.filter(getOriginalArrayFromQueryList(this.options));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "matcher", {
        get: function () {
            return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "items$", {
        get: function () {
            return itemsQueryListObservable(this.options).pipe(map(function (options) { return options.map(function (_a) {
                var value = _a.value;
                return value;
            }).filter(isPresent); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiMultiSelectGroupComponent.prototype, "valueChanges$", {
        get: function () {
            return tuiReplayedValueChangesFrom(this.control).pipe(map(function (value) { return value || []; }));
        },
        enumerable: true,
        configurable: true
    });
    TuiMultiSelectGroupComponent.prototype.filter = function (items) {
        return items.map(function (_a) {
            var value = _a.value;
            return value;
        }).filter(isPresent);
    };
    TuiMultiSelectGroupComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TUI_DATA_LIST_HOST,] }] },
        { type: NgControl, decorators: [{ type: Inject, args: [NgControl,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiMultiSelectGroupComponent.prototype, "label", void 0);
    __decorate([
        ContentChildren(TuiOptionComponent)
    ], TuiMultiSelectGroupComponent.prototype, "options", void 0);
    __decorate([
        tuiPure
    ], TuiMultiSelectGroupComponent.prototype, "empty$", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectGroupComponent.prototype, "value$", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectGroupComponent.prototype, "items$", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
    __decorate([
        tuiPure
    ], TuiMultiSelectGroupComponent.prototype, "filter", null);
    TuiMultiSelectGroupComponent = __decorate([
        Component({
            selector: 'tui-opt-group[tuiMultiSelectGroup]',
            template: "<ng-container *tuiLet=\"value$ | async as value\">\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiMultiSelectGroupReset\n        tuiOption\n        [size]=\"size\"\n        [disabled]=\"disabled$ | async\"\n        (click)=\"onClick(value)\"\n    >\n        <tui-primitive-checkbox\n            class=\"tui-space_right-3\"\n            [size]=\"checkboxSize\"\n            [value]=\"value\"\n        ></tui-primitive-checkbox>\n        <span class=\"label\">{{label}}</span>\n    </button>\n</ng-container>\n<ng-content></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;flex-direction:column}:host:before{content:''}.label{font:var(--tui-font-text-xs);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;flex:1;color:var(--tui-text-02)}"]
        }),
        __param(0, Inject(TUI_DATA_LIST_HOST)),
        __param(1, Inject(NgControl))
    ], TuiMultiSelectGroupComponent);
    return TuiMultiSelectGroupComponent;
}());
export { TuiMultiSelectGroupComponent };
//# sourceMappingURL=data:application/json;base64,