import { __decorate, __read, __spread } from "tslib";
import { Directive, forwardRef, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TUI_OPTION_CONTENT } from '@taiga-ui/core';
import { TUI_MULTI_SELECT_OPTION } from '@taiga-ui/kit/components/multi-select-option';
import { TuiMultiSelectComponent } from '../multi-select.component';
export function hostFallbackFactory(control, host) {
    return (host || {
        handleOption: function (option) {
            if (!control.control) {
                return;
            }
            var value = control.value || [];
            var index = value.indexOf(option);
            control.control.setValue(index === -1
                ? __spread(value, [option]) : __spread(value.slice(0, index), value.slice(index + 1)));
        },
    });
}
var ɵ0 = TUI_MULTI_SELECT_OPTION, ɵ1 = {
    writeValue: EMPTY_FUNCTION,
    registerOnChange: EMPTY_FUNCTION,
    registerOnTouched: EMPTY_FUNCTION,
};
var TuiMultiSelectGroupDirective = /** @class */ (function () {
    function TuiMultiSelectGroupDirective() {
    }
    TuiMultiSelectGroupDirective = __decorate([
        Directive({
            selector: '[tuiMultiSelectGroup]',
            providers: [
                {
                    provide: TUI_OPTION_CONTENT,
                    useValue: ɵ0,
                },
                {
                    provide: TUI_DATA_LIST_HOST,
                    deps: [
                        NgControl,
                        [new Optional(), forwardRef(function () { return TuiMultiSelectComponent; })],
                    ],
                    useFactory: hostFallbackFactory,
                },
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useValue: ɵ1,
                },
            ],
        })
    ], TuiMultiSelectGroupDirective);
    return TuiMultiSelectGroupDirective;
}());
export { TuiMultiSelectGroupDirective };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvIiwic291cmNlcyI6WyJtdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBa0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxNQUFNLFVBQVUsbUJBQW1CLENBQy9CLE9BQWtCLEVBQ2xCLElBQStCO0lBRS9CLE9BQU8sQ0FDSCxJQUFJLElBQUk7UUFDSixZQUFZLEVBQUUsVUFBQSxNQUFNO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUNsQixPQUFPO2FBQ1Y7WUFFRCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUNsQyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXBDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUNwQixLQUFLLEtBQUssQ0FBQyxDQUFDO2dCQUNSLENBQUMsVUFBSyxLQUFLLEdBQUUsTUFBTSxHQUNuQixDQUFDLFVBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDOUQsQ0FBQztRQUNOLENBQUM7S0FDSixDQUNKLENBQUM7QUFDTixDQUFDO1NBT3FCLHVCQUF1QixPQWF2QjtJQUNOLFVBQVUsRUFBRSxjQUFjO0lBQzFCLGdCQUFnQixFQUFFLGNBQWM7SUFDaEMsaUJBQWlCLEVBQUUsY0FBYztDQUNwQztBQUliO0lBQUE7SUFBMkMsQ0FBQztJQUEvQiw0QkFBNEI7UUExQnhDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFFBQVEsSUFBeUI7aUJBQ3BDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLElBQUksRUFBRTt3QkFDRixTQUFTO3dCQUNULENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLHVCQUF1QixFQUF2QixDQUF1QixDQUFDLENBQUM7cUJBQzlEO29CQUNELFVBQVUsRUFBRSxtQkFBbUI7aUJBQ2xDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLEtBQUssRUFBRSxJQUFJO29CQUNYLFFBQVEsSUFJUDtpQkFDSjthQUNKO1NBQ0osQ0FBQztPQUNXLDRCQUE0QixDQUFHO0lBQUQsbUNBQUM7Q0FBQSxBQUE1QyxJQUE0QztTQUEvQiw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUiwgTmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0VNUFRZX0ZVTkNUSU9OfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0RBVEFfTElTVF9IT1NULCBUVUlfT1BUSU9OX0NPTlRFTlQsIFR1aURhdGFMaXN0SG9zdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUVUlfTVVMVElfU0VMRUNUX09QVElPTn0gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC1vcHRpb24nO1xuaW1wb3J0IHtUdWlNdWx0aVNlbGVjdENvbXBvbmVudH0gZnJvbSAnLi4vbXVsdGktc2VsZWN0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBob3N0RmFsbGJhY2tGYWN0b3J5PFQ+KFxuICAgIGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgICBob3N0OiBUdWlEYXRhTGlzdEhvc3Q8VD4gfCBudWxsLFxuKTogVHVpRGF0YUxpc3RIb3N0PFQ+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICBob3N0IHx8IHtcbiAgICAgICAgICAgIGhhbmRsZU9wdGlvbjogb3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRyb2wuY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb250cm9sLnZhbHVlIHx8IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWUuaW5kZXhPZihvcHRpb24pO1xuXG4gICAgICAgICAgICAgICAgY29udHJvbC5jb250cm9sLnNldFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gWy4uLnZhbHVlLCBvcHRpb25dXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFsuLi52YWx1ZS5zbGljZSgwLCBpbmRleCksIC4uLnZhbHVlLnNsaWNlKGluZGV4ICsgMSldLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgKTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpTXVsdGlTZWxlY3RHcm91cF0nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUVUlfT1BUSU9OX0NPTlRFTlQsXG4gICAgICAgICAgICB1c2VWYWx1ZTogVFVJX01VTFRJX1NFTEVDVF9PUFRJT04sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9EQVRBX0xJU1RfSE9TVCxcbiAgICAgICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgICAgICBOZ0NvbnRyb2wsXG4gICAgICAgICAgICAgICAgW25ldyBPcHRpb25hbCgpLCBmb3J3YXJkUmVmKCgpID0+IFR1aU11bHRpU2VsZWN0Q29tcG9uZW50KV0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogaG9zdEZhbGxiYWNrRmFjdG9yeSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgd3JpdGVWYWx1ZTogRU1QVFlfRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJPbkNoYW5nZTogRU1QVFlfRlVOQ1RJT04sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJPblRvdWNoZWQ6IEVNUFRZX0ZVTkNUSU9OLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlNdWx0aVNlbGVjdEdyb3VwRGlyZWN0aXZlIHt9XG4iXX0=