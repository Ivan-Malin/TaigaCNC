import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ElementRef, InjectionToken } from '@angular/core';
import { identity, tuiCustomEvent, TuiDestroyService, TuiFocusVisibleService, typedFromEvent, watch, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiRouterLinkActiveService } from '@taiga-ui/core';
import { EMPTY, merge } from 'rxjs';
import { filter, mapTo, takeUntil } from 'rxjs/operators';
export var TUI_TAB_ACTIVATE = 'tui-tab-activate';
export var TUI_TAB_EVENT = new InjectionToken('Stream of tab activation events');
export var TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            DOCUMENT,
            TuiRouterLinkActiveService,
            TuiDestroyService,
            ChangeDetectorRef,
        ],
        useFactory: tabActiveFactory,
    },
    MODE_PROVIDER,
];
export function tabActiveFactory(_a, documentRef, routerLinkActiveService, destroy$, changeDetectorRef) {
    var nativeElement = _a.nativeElement;
    return merge(routerLinkActiveService.pipe(filter(identity)), nativeElement.matches('button') ? typedFromEvent(nativeElement, 'click') : EMPTY).pipe(takeUntil(destroy$), watch(changeDetectorRef), mapTo(tuiCustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }, documentRef)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvY29tcG9uZW50cy90YWJzLyIsInNvdXJjZXMiOlsidGFiL3RhYi5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFDSCxRQUFRLEVBQ1IsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsY0FBYyxFQUNkLEtBQUssR0FDUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFFLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEQsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUMzQyxpQ0FBaUMsQ0FDcEMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFlO0lBQ3pDLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsMEJBQTBCO0lBQzFCO1FBQ0ksT0FBTyxFQUFFLGFBQWE7UUFDdEIsSUFBSSxFQUFFO1lBQ0YsVUFBVTtZQUNWLFFBQVE7WUFDUiwwQkFBMEI7WUFDMUIsaUJBQWlCO1lBQ2pCLGlCQUFpQjtTQUNwQjtRQUNELFVBQVUsRUFBRSxnQkFBZ0I7S0FDL0I7SUFDRCxhQUFhO0NBQ2hCLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCLENBQzVCLEVBQXdDLEVBQ3hDLFdBQXFCLEVBQ3JCLHVCQUE0QyxFQUM1QyxRQUEwQixFQUMxQixpQkFBb0M7UUFKbkMsZ0NBQWE7SUFNZCxPQUFPLEtBQUssQ0FDUix1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQzlDLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FDbkYsQ0FBQyxJQUFJLENBQ0YsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUNuQixLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFDeEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUN4RSxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBpZGVudGl0eSxcbiAgICB0dWlDdXN0b21FdmVudCxcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLFxuICAgIHR5cGVkRnJvbUV2ZW50LFxuICAgIHdhdGNoLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUiwgVHVpUm91dGVyTGlua0FjdGl2ZVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7RU1QVFksIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXBUbywgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfVEFCX0FDVElWQVRFID0gJ3R1aS10YWItYWN0aXZhdGUnO1xuZXhwb3J0IGNvbnN0IFRVSV9UQUJfRVZFTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTxFdmVudD4+KFxuICAgICdTdHJlYW0gb2YgdGFiIGFjdGl2YXRpb24gZXZlbnRzJyxcbik7XG5leHBvcnQgY29uc3QgVFVJX1RBQl9QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgVHVpRm9jdXNWaXNpYmxlU2VydmljZSxcbiAgICBUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9UQUJfRVZFTlQsXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIEVsZW1lbnRSZWYsXG4gICAgICAgICAgICBET0NVTUVOVCxcbiAgICAgICAgICAgIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLFxuICAgICAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgICAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgXSxcbiAgICAgICAgdXNlRmFjdG9yeTogdGFiQWN0aXZlRmFjdG9yeSxcbiAgICB9LFxuICAgIE1PREVfUFJPVklERVIsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gdGFiQWN0aXZlRmFjdG9yeShcbiAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIGRvY3VtZW50UmVmOiBEb2N1bWVudCxcbiAgICByb3V0ZXJMaW5rQWN0aXZlU2VydmljZTogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4pOiBPYnNlcnZhYmxlPEV2ZW50PiB7XG4gICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICByb3V0ZXJMaW5rQWN0aXZlU2VydmljZS5waXBlKGZpbHRlcihpZGVudGl0eSkpLFxuICAgICAgICBuYXRpdmVFbGVtZW50Lm1hdGNoZXMoJ2J1dHRvbicpID8gdHlwZWRGcm9tRXZlbnQobmF0aXZlRWxlbWVudCwgJ2NsaWNrJykgOiBFTVBUWSxcbiAgICApLnBpcGUoXG4gICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgIHdhdGNoKGNoYW5nZURldGVjdG9yUmVmKSxcbiAgICAgICAgbWFwVG8odHVpQ3VzdG9tRXZlbnQoVFVJX1RBQl9BQ1RJVkFURSwge2J1YmJsZXM6IHRydWV9LCBkb2N1bWVudFJlZikpLFxuICAgICk7XG59XG4iXX0=