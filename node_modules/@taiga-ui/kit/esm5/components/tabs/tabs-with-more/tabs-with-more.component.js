import { __decorate, __param } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Input, Output, QueryList, Renderer2, ViewChild, } from '@angular/core';
import { EMPTY_QUERY, getClosestKeyboardFocusable, isNativeFocused, setNativeFocused, tuiDefaultProp, tuiPure, tuiRequiredSetter, } from '@taiga-ui/cdk';
import { TUI_MORE_WORD } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { filter, map, startWith } from 'rxjs/operators';
import { TuiTabDirective } from '../tab.directive';
import { TuiTabComponent } from '../tab/tab.component';
import { TAB_ACTIVE_CLASS, TAB_MARGIN } from '../tabs.const';
import { TABS_PROVIDERS, TABS_REFRESH } from './tabs-with-more.providers';
// @dynamic
var TuiTabsWithMoreComponent = /** @class */ (function () {
    function TuiTabsWithMoreComponent(refresh$, elementRef, renderer, changeDetectorRef, moreWord$) {
        this.refresh$ = refresh$;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.moreWord$ = moreWord$;
        this.moreContent = '';
        this.underline = true;
        this.activeItemIndex = 0;
        this.activeItemIndexChange = new EventEmitter();
        this.itemsList = EMPTY_QUERY;
        this.open = false;
        this.lastVisibleIndex = Infinity;
        this.itemsLimit = Infinity;
    }
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "itemsLimitSetter", {
        set: function (itemsLimit) {
            this.itemsLimit = itemsLimit;
            this.lastVisibleIndex = this.getLastVisibleIndex();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "items$", {
        get: function () {
            return this.itemsList.changes.pipe(startWith(this.itemsList));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "tabs", {
        get: function () {
            return Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "activeElement", {
        get: function () {
            var tabs = this.tabs;
            if (this.activeItemIndex > this.lastVisibleIndex) {
                return tabs[tabs.length - 1];
            }
            return tabs[this.activeItemIndex] || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreVisible", {
        get: function () {
            return this.lastVisibleIndex < this.tabs.length - 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreActive", {
        get: function () {
            return this.open || this.activeItemIndex > this.lastVisibleIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsWithMoreComponent.prototype, "isMoreFocusable", {
        get: function () {
            return (this.isMoreActive ||
                (!!this.moreButton && isNativeFocused(this.moreButton.nativeElement)));
        },
        enumerable: true,
        configurable: true
    });
    TuiTabsWithMoreComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.refresh$
            .pipe(map(function () { return _this.getLastVisibleIndex(); }), filter(function (lastVisibleIndex) { return _this.lastVisibleIndex !== lastVisibleIndex; }))
            .subscribe(function (lastVisibleIndex) {
            _this.lastVisibleIndex = lastVisibleIndex;
            _this.changeDetectorRef.detectChanges();
        });
    };
    TuiTabsWithMoreComponent.prototype.onActiveItemIndexChange = function (activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    };
    TuiTabsWithMoreComponent.prototype.onPresent = function (isPresent, _a) {
        var children = _a.children;
        if (!isPresent || this.lastVisibleIndex >= this.activeItemIndex) {
            return;
        }
        var buttons = Array.from(children);
        var active = buttons[this.activeItemIndex - this.lastVisibleIndex - 1];
        this.renderer.addClass(active, TAB_ACTIVE_CLASS);
    };
    TuiTabsWithMoreComponent.prototype.onClick = function () {
        this.open = false;
        this.focusMore();
    };
    TuiTabsWithMoreComponent.prototype.onActivate = function (tab, _a) {
        var children = _a.children;
        var elements = Array.from(children);
        var index = elements.findIndex(function (element) { return element === tab; });
        if (index !== -1) {
            this.updateActiveItemIndex(index + this.lastVisibleIndex + 1);
        }
    };
    TuiTabsWithMoreComponent.prototype.onArrowRight = function (element) {
        if (isNativeFocused(element)) {
            this.focusMore();
        }
    };
    TuiTabsWithMoreComponent.prototype.onArrowLeft = function () {
        var tabs = this.tabs;
        var index = tabs.length - 2;
        while (index >= 0) {
            setNativeFocused(tabs[index]);
            if (isNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    };
    TuiTabsWithMoreComponent.prototype.onWrapperArrow = function (button, wrapper, prev) {
        var target = getClosestKeyboardFocusable(button, prev, wrapper);
        if (target) {
            setNativeFocused(target);
        }
    };
    TuiTabsWithMoreComponent.prototype.focusMore = function () {
        if (this.moreButton) {
            setNativeFocused(this.moreButton.nativeElement);
        }
    };
    TuiTabsWithMoreComponent.prototype.getLastVisibleIndex = function () {
        var tabs = this.tabs;
        if (!tabs.length) {
            return 0;
        }
        var filtered = tabs.filter(function (tab, index) { return tab.scrollWidth && index !== tabs.length - 1; });
        var last = filtered[filtered.length - 1];
        var moreWidth = tabs[tabs.length - 1].scrollWidth;
        var width = this.elementRef.nativeElement.clientWidth - moreWidth - TAB_MARGIN;
        var accumulatedWidth = 0;
        var lastVisibleIndex = 0;
        for (var tabIndex = 0; tabIndex < tabs.length - 1; tabIndex++) {
            accumulatedWidth +=
                tabs[tabIndex] === last
                    ? tabs[tabIndex].scrollWidth - moreWidth - TAB_MARGIN
                    : tabs[tabIndex].scrollWidth;
            if (tabIndex > this.itemsLimit) {
                return lastVisibleIndex - 1;
            }
            if (accumulatedWidth > width) {
                return lastVisibleIndex;
            }
            accumulatedWidth += TAB_MARGIN * Math.min(tabs[tabIndex].scrollWidth, 1);
            lastVisibleIndex = tabIndex;
        }
        return Infinity;
    };
    TuiTabsWithMoreComponent.prototype.updateActiveItemIndex = function (activeItemIndex) {
        if (this.activeItemIndex === activeItemIndex) {
            return;
        }
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
    };
    TuiTabsWithMoreComponent.ctorParameters = function () { return [
        { type: Observable, decorators: [{ type: Inject, args: [TABS_REFRESH,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TUI_MORE_WORD,] }] }
    ]; };
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "moreContent", void 0);
    __decorate([
        Input(),
        HostBinding('class._underline'),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "underline", void 0);
    __decorate([
        Input(),
        tuiDefaultProp()
    ], TuiTabsWithMoreComponent.prototype, "activeItemIndex", void 0);
    __decorate([
        Input('itemsLimit'),
        tuiRequiredSetter()
    ], TuiTabsWithMoreComponent.prototype, "itemsLimitSetter", null);
    __decorate([
        Output()
    ], TuiTabsWithMoreComponent.prototype, "activeItemIndexChange", void 0);
    __decorate([
        ContentChildren(TuiTabDirective)
    ], TuiTabsWithMoreComponent.prototype, "itemsList", void 0);
    __decorate([
        ViewChild(TuiTabComponent, { read: ElementRef })
    ], TuiTabsWithMoreComponent.prototype, "moreButton", void 0);
    __decorate([
        tuiPure
    ], TuiTabsWithMoreComponent.prototype, "items$", null);
    TuiTabsWithMoreComponent = __decorate([
        Component({
            selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]',
            template: "<div *ngIf=\"items$ | async as items\" class=\"wrapper\">\n    <tui-underline *ngIf=\"underline\" [element]=\"activeElement\"></tui-underline>\n    <tui-tabs\n        class=\"tabs\"\n        [underline]=\"false\"\n        [activeItemIndex]=\"activeItemIndex\"\n        (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n        (keydown.arrowRight)=\"onArrowRight($event.target)\"\n    >\n        <ng-container *ngFor=\"let item of items; let index = index\">\n            <ng-container\n                *ngIf=\"index <= lastVisibleIndex; else hidden\"\n                [ngTemplateOutlet]=\"item.template\"\n            ></ng-container>\n            <ng-template #hidden>\n                <div class=\"visually-hidden\">\n                    <ng-container\n                        *ngTemplateOutlet=\"item.template\"\n                    ></ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </tui-tabs>\n    <tui-hosted-dropdown\n        class=\"more_wrapper\"\n        [class.visually-hidden]=\"!isMoreVisible\"\n        [content]=\"dropdown\"\n        [(open)]=\"open\"\n    >\n        <button\n            tuiTab\n            type=\"button\"\n            class=\"more\"\n            [class._active]=\"isMoreActive\"\n            [tuiFocusable]=\"isMoreFocusable\"\n            (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n        >\n            <span polymorpheus-outlet [content]=\"moreContent || more\"></span>\n        </button>\n        <ng-template #more>\n            {{moreWord$ | async}}\n            <tui-svg\n                src=\"tuiIconChevronDown\"\n                class=\"icon\"\n                [class.icon_rotated]=\"open\"\n            ></tui-svg>\n        </ng-template>\n    </tui-hosted-dropdown>\n    <ng-template #dropdown>\n        <div\n            #element\n            class=\"dropdown\"\n            (click)=\"onClick()\"\n            (tui-tab-activate)=\"onActivate($event.target, element)\"\n            (keydown.arrowUp.prevent)=\"onWrapperArrow($event.target, element, true)\"\n            (keydown.arrowDown.prevent)=\"onWrapperArrow($event.target, element, false)\"\n            (tuiPresentChange)=\"onPresent($event, element)\"\n        >\n            <ng-container *ngFor=\"let item of items; let index = index\">\n                <ng-container\n                    *ngIf=\"index > lastVisibleIndex\"\n                    [ngTemplateOutlet]=\"item.template\"\n                ></ng-container\n            ></ng-container>\n        </div>\n    </ng-template>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: TABS_PROVIDERS,
            styles: [":host{font:var(--tui-font-text-m);position:relative;display:flex;height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.wrapper{position:relative;display:flex}.tabs{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.visually-hidden{width:0;max-width:0;overflow:hidden;visibility:hidden}.more_wrapper{height:100%}.more.more._active{pointer-events:auto}.icon{transition-property:transform;transition-duration:.3s;transition-timing-function:ease-in-out;margin-right:-4px;vertical-align:bottom}.icon_rotated{transform:rotate(180deg)}.dropdown{display:flex;flex-direction:column;padding:8px 0}.dropdown ::ng-deep [tuiTab]{height:44px;justify-content:flex-start;margin:0;padding:0 16px;color:var(--tui-text-02)}.dropdown ::ng-deep [tuiTab]:before{display:none}.dropdown ::ng-deep [tuiTab]._active,.dropdown ::ng-deep [tuiTab]:focus,.dropdown ::ng-deep [tuiTab]:hover{box-shadow:none;color:var(--tui-base-08);background:var(--tui-base-02)}"]
        }),
        __param(0, Inject(TABS_REFRESH)),
        __param(1, Inject(ElementRef)),
        __param(2, Inject(Renderer2)),
        __param(3, Inject(ChangeDetectorRef)),
        __param(4, Inject(TUI_MORE_WORD))
    ], TuiTabsWithMoreComponent);
    return TuiTabsWithMoreComponent;
}());
export { TuiTabsWithMoreComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy13aXRoLW1vcmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3RhYnMvIiwic291cmNlcyI6WyJ0YWJzLXdpdGgtbW9yZS90YWJzLXdpdGgtbW9yZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCxhQUFhLEVBQ2IsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCxXQUFXLEVBQ1gsMkJBQTJCLEVBQzNCLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsY0FBYyxFQUNkLE9BQU8sRUFDUCxpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxjQUFjLEVBQUUsWUFBWSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFeEUsV0FBVztBQVFYO0lBb0NJLGtDQUMyQyxRQUE2QixFQUMvQixVQUFtQyxFQUNwQyxRQUFtQixFQUNYLGlCQUFvQyxFQUNoRCxTQUE2QjtRQUp0QixhQUFR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QixXQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtPQXpDakIsd0JBQXdCLENBeU1wQztJQUFELCtCQUFDO0NBQUEsQUF6TUQsSUF5TUM7U0F6TVksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBRdWVyeUxpc3QsXG4gICAgUmVuZGVyZXIyLFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEVNUFRZX1FVRVJZLFxuICAgIGdldENsb3Nlc3RLZXlib2FyZEZvY3VzYWJsZSxcbiAgICBpc05hdGl2ZUZvY3VzZWQsXG4gICAgc2V0TmF0aXZlRm9jdXNlZCxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICB0dWlQdXJlLFxuICAgIHR1aVJlcXVpcmVkU2V0dGVyLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX01PUkVfV09SRH0gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXAsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtUdWlUYWJEaXJlY3RpdmV9IGZyb20gJy4uL3RhYi5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUYWJDb21wb25lbnR9IGZyb20gJy4uL3RhYi90YWIuY29tcG9uZW50JztcbmltcG9ydCB7VEFCX0FDVElWRV9DTEFTUywgVEFCX01BUkdJTn0gZnJvbSAnLi4vdGFicy5jb25zdCc7XG5pbXBvcnQge1RBQlNfUFJPVklERVJTLCBUQUJTX1JFRlJFU0h9IGZyb20gJy4vdGFicy13aXRoLW1vcmUucHJvdmlkZXJzJztcblxuLy8gQGR5bmFtaWNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRhYnMtd2l0aC1tb3JlLCBuYXZbdHVpVGFic1dpdGhNb3JlXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RhYnMtd2l0aC1tb3JlLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3RhYnMtd2l0aC1tb3JlLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFRBQlNfUFJPVklERVJTLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUYWJzV2l0aE1vcmVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbW9yZUNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQgPSAnJztcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fdW5kZXJsaW5lJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHVuZGVybGluZSA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgYWN0aXZlSXRlbUluZGV4ID0gMDtcblxuICAgIEBJbnB1dCgnaXRlbXNMaW1pdCcpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgaXRlbXNMaW1pdFNldHRlcihpdGVtc0xpbWl0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5pdGVtc0xpbWl0ID0gaXRlbXNMaW1pdDtcbiAgICAgICAgdGhpcy5sYXN0VmlzaWJsZUluZGV4ID0gdGhpcy5nZXRMYXN0VmlzaWJsZUluZGV4KCk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgYWN0aXZlSXRlbUluZGV4Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKFR1aVRhYkRpcmVjdGl2ZSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IGl0ZW1zTGlzdDogUXVlcnlMaXN0PFR1aVRhYkRpcmVjdGl2ZT4gPSBFTVBUWV9RVUVSWTtcblxuICAgIG9wZW4gPSBmYWxzZTtcblxuICAgIGxhc3RWaXNpYmxlSW5kZXggPSBJbmZpbml0eTtcblxuICAgIEBWaWV3Q2hpbGQoVHVpVGFiQ29tcG9uZW50LCB7cmVhZDogRWxlbWVudFJlZn0pXG4gICAgcHJpdmF0ZSByZWFkb25seSBtb3JlQnV0dG9uPzogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudD47XG5cbiAgICBwcml2YXRlIGl0ZW1zTGltaXQgPSBJbmZpbml0eTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRBQlNfUkVGUkVTSCkgcHJpdmF0ZSByZWFkb25seSByZWZyZXNoJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFJlbmRlcmVyMikgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChUVUlfTU9SRV9XT1JEKSByZWFkb25seSBtb3JlV29yZCQ6IE9ic2VydmFibGU8c3RyaW5nPixcbiAgICApIHt9XG5cbiAgICBAdHVpUHVyZVxuICAgIGdldCBpdGVtcyQoKTogT2JzZXJ2YWJsZTxRdWVyeUxpc3Q8VHVpVGFiRGlyZWN0aXZlPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc0xpc3QuY2hhbmdlcy5waXBlKHN0YXJ0V2l0aCh0aGlzLml0ZW1zTGlzdCkpO1xuICAgIH1cblxuICAgIGdldCB0YWJzKCk6IFJlYWRvbmx5QXJyYXk8SFRNTEVsZW1lbnQ+IHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbdHVpVGFiXScpLFxuICAgICAgICApIGFzIEFycmF5PEhUTUxFbGVtZW50PjtcbiAgICB9XG5cbiAgICBnZXQgYWN0aXZlRWxlbWVudCgpOiBIVE1MRWxlbWVudCB8IG51bGwge1xuICAgICAgICBjb25zdCB7dGFic30gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZUl0ZW1JbmRleCA+IHRoaXMubGFzdFZpc2libGVJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhYnNbdGFicy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YWJzW3RoaXMuYWN0aXZlSXRlbUluZGV4XSB8fCBudWxsO1xuICAgIH1cblxuICAgIGdldCBpc01vcmVWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0VmlzaWJsZUluZGV4IDwgdGhpcy50YWJzLmxlbmd0aCAtIDI7XG4gICAgfVxuXG4gICAgZ2V0IGlzTW9yZUFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlbiB8fCB0aGlzLmFjdGl2ZUl0ZW1JbmRleCA+IHRoaXMubGFzdFZpc2libGVJbmRleDtcbiAgICB9XG5cbiAgICBnZXQgaXNNb3JlRm9jdXNhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5pc01vcmVBY3RpdmUgfHxcbiAgICAgICAgICAgICghIXRoaXMubW9yZUJ1dHRvbiAmJiBpc05hdGl2ZUZvY3VzZWQodGhpcy5tb3JlQnV0dG9uLm5hdGl2ZUVsZW1lbnQpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoJFxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKCgpID0+IHRoaXMuZ2V0TGFzdFZpc2libGVJbmRleCgpKSxcbiAgICAgICAgICAgICAgICBmaWx0ZXIobGFzdFZpc2libGVJbmRleCA9PiB0aGlzLmxhc3RWaXNpYmxlSW5kZXggIT09IGxhc3RWaXNpYmxlSW5kZXgpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZShsYXN0VmlzaWJsZUluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RWaXNpYmxlSW5kZXggPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25BY3RpdmVJdGVtSW5kZXhDaGFuZ2UoYWN0aXZlSXRlbUluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVBY3RpdmVJdGVtSW5kZXgoYWN0aXZlSXRlbUluZGV4KTtcbiAgICB9XG5cbiAgICBvblByZXNlbnQoaXNQcmVzZW50OiBib29sZWFuLCB7Y2hpbGRyZW59OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAoIWlzUHJlc2VudCB8fCB0aGlzLmxhc3RWaXNpYmxlSW5kZXggPj0gdGhpcy5hY3RpdmVJdGVtSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBBcnJheS5mcm9tKGNoaWxkcmVuKTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gYnV0dG9uc1t0aGlzLmFjdGl2ZUl0ZW1JbmRleCAtIHRoaXMubGFzdFZpc2libGVJbmRleCAtIDFdO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoYWN0aXZlLCBUQUJfQUNUSVZFX0NMQVNTKTtcbiAgICB9XG5cbiAgICBvbkNsaWNrKCkge1xuICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2N1c01vcmUoKTtcbiAgICB9XG5cbiAgICBvbkFjdGl2YXRlKHRhYjogSFRNTEVsZW1lbnQsIHtjaGlsZHJlbn06IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShjaGlsZHJlbik7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudHMuZmluZEluZGV4KGVsZW1lbnQgPT4gZWxlbWVudCA9PT0gdGFiKTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZUl0ZW1JbmRleChpbmRleCArIHRoaXMubGFzdFZpc2libGVJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25BcnJvd1JpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmIChpc05hdGl2ZUZvY3VzZWQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNNb3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFycm93TGVmdCgpIHtcbiAgICAgICAgY29uc3Qge3RhYnN9ID0gdGhpcztcbiAgICAgICAgbGV0IGluZGV4ID0gdGFicy5sZW5ndGggLSAyO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBzZXROYXRpdmVGb2N1c2VkKHRhYnNbaW5kZXhdKTtcblxuICAgICAgICAgICAgaWYgKGlzTmF0aXZlRm9jdXNlZCh0YWJzW2luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbldyYXBwZXJBcnJvdyhidXR0b246IEhUTUxCdXR0b25FbGVtZW50LCB3cmFwcGVyOiBIVE1MRWxlbWVudCwgcHJldjogYm9vbGVhbikge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRDbG9zZXN0S2V5Ym9hcmRGb2N1c2FibGUoYnV0dG9uLCBwcmV2LCB3cmFwcGVyKTtcblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBzZXROYXRpdmVGb2N1c2VkKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzTW9yZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubW9yZUJ1dHRvbikge1xuICAgICAgICAgICAgc2V0TmF0aXZlRm9jdXNlZCh0aGlzLm1vcmVCdXR0b24ubmF0aXZlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExhc3RWaXNpYmxlSW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3Qge3RhYnN9ID0gdGhpcztcblxuICAgICAgICBpZiAoIXRhYnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gdGFicy5maWx0ZXIoXG4gICAgICAgICAgICAodGFiLCBpbmRleCkgPT4gdGFiLnNjcm9sbFdpZHRoICYmIGluZGV4ICE9PSB0YWJzLmxlbmd0aCAtIDEsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBmaWx0ZXJlZFtmaWx0ZXJlZC5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgbW9yZVdpZHRoID0gdGFic1t0YWJzLmxlbmd0aCAtIDFdLnNjcm9sbFdpZHRoO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoIC0gbW9yZVdpZHRoIC0gVEFCX01BUkdJTjtcbiAgICAgICAgbGV0IGFjY3VtdWxhdGVkV2lkdGggPSAwO1xuICAgICAgICBsZXQgbGFzdFZpc2libGVJbmRleCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgdGFiSW5kZXggPSAwOyB0YWJJbmRleCA8IHRhYnMubGVuZ3RoIC0gMTsgdGFiSW5kZXgrKykge1xuICAgICAgICAgICAgYWNjdW11bGF0ZWRXaWR0aCArPVxuICAgICAgICAgICAgICAgIHRhYnNbdGFiSW5kZXhdID09PSBsYXN0XG4gICAgICAgICAgICAgICAgICAgID8gdGFic1t0YWJJbmRleF0uc2Nyb2xsV2lkdGggLSBtb3JlV2lkdGggLSBUQUJfTUFSR0lOXG4gICAgICAgICAgICAgICAgICAgIDogdGFic1t0YWJJbmRleF0uc2Nyb2xsV2lkdGg7XG5cbiAgICAgICAgICAgIGlmICh0YWJJbmRleCA+IHRoaXMuaXRlbXNMaW1pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmlzaWJsZUluZGV4IC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFjY3VtdWxhdGVkV2lkdGggPiB3aWR0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhY2N1bXVsYXRlZFdpZHRoICs9IFRBQl9NQVJHSU4gKiBNYXRoLm1pbih0YWJzW3RhYkluZGV4XS5zY3JvbGxXaWR0aCwgMSk7XG4gICAgICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gdGFiSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVBY3RpdmVJdGVtSW5kZXgoYWN0aXZlSXRlbUluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlSXRlbUluZGV4ID09PSBhY3RpdmVJdGVtSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWN0aXZlSXRlbUluZGV4ID0gYWN0aXZlSXRlbUluZGV4O1xuICAgICAgICB0aGlzLmFjdGl2ZUl0ZW1JbmRleENoYW5nZS5lbWl0KGFjdGl2ZUl0ZW1JbmRleCk7XG4gICAgfVxufVxuIl19