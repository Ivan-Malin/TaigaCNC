import { __decorate, __param } from "tslib";
import { AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Output, QueryList, Renderer2, } from '@angular/core';
import { EMPTY_QUERY, itemsQueryListObservable, moveFocus, TUI_IS_ANDROID, TUI_IS_IOS, tuiDefaultProp, TuiDestroyService, tuiPure, TuiResizeService, } from '@taiga-ui/cdk';
import { TUI_MOBILE_AWARE } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { filter, mapTo } from 'rxjs/operators';
import { TuiTabComponent } from '../tab/tab.component';
import { TUI_TAB_ACTIVATE } from '../tab/tab.providers';
import { TAB_ACTIVE_CLASS } from '../tabs.const';
// @dynamic
var TuiTabsComponent = /** @class */ (function () {
    function TuiTabsComponent(elementRef, renderer, changeDetectorRef, resize$, isIos, isAndroid, mobileAware) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.underline = true;
        this.activeItemIndexChange = new EventEmitter();
        this.children = EMPTY_QUERY;
        this.activeItemIndex = 0;
        this.isIos = mobileAware && isIos;
        this.isAndroid = mobileAware && isAndroid;
        resize$.pipe(filter(function () { return _this.underline; })).subscribe(function () {
            changeDetectorRef.detectChanges();
        });
    }
    Object.defineProperty(TuiTabsComponent.prototype, "activeItemIndexSetter", {
        set: function (index) {
            this.activeItemIndex = index;
            this.scrollTo(this.tabs[index]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsComponent.prototype, "refresh$", {
        get: function () {
            return itemsQueryListObservable(this.children).pipe(mapTo(true));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsComponent.prototype, "tabs", {
        get: function () {
            var tabs = Array.from(this.elementRef.nativeElement.querySelectorAll('[tuiTab]'));
            return tabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuiTabsComponent.prototype, "activeElement", {
        get: function () {
            return this.tabs[this.activeItemIndex] || null;
        },
        enumerable: true,
        configurable: true
    });
    TuiTabsComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        var _a = this, tabs = _a.tabs, activeElement = _a.activeElement;
        tabs.forEach(function (nativeElement) {
            _this.renderer.removeClass(nativeElement, TAB_ACTIVE_CLASS);
            _this.renderer.setAttribute(nativeElement, 'tabIndex', '-1');
        });
        if (activeElement) {
            this.renderer.addClass(activeElement, TAB_ACTIVE_CLASS);
            this.renderer.setAttribute(activeElement, 'tabIndex', '0');
        }
    };
    TuiTabsComponent.prototype.onActivate = function (element) {
        var index = this.tabs.findIndex(function (tab) { return tab === element; });
        if (index === this.activeItemIndex) {
            return;
        }
        this.activeItemIndexSetter = index;
        this.activeItemIndexChange.emit(index);
    };
    TuiTabsComponent.prototype.onKeyDownArrow = function (current, step) {
        var tabs = this.tabs;
        moveFocus(tabs.indexOf(current), tabs, step);
    };
    TuiTabsComponent.prototype.scrollTo = function (element) {
        if (!element) {
            return;
        }
        var offsetLeft = element.offsetLeft, offsetWidth = element.offsetWidth;
        var nativeElement = this.elementRef.nativeElement;
        if (offsetLeft < nativeElement.scrollLeft) {
            nativeElement.scrollLeft = offsetLeft;
        }
        if (offsetLeft + offsetWidth >
            nativeElement.scrollLeft + nativeElement.offsetWidth) {
            nativeElement.scrollLeft =
                offsetLeft + offsetWidth - nativeElement.offsetWidth;
        }
    };
    TuiTabsComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
        { type: Observable, decorators: [{ type: Inject, args: [TuiResizeService,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_IOS,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_IS_ANDROID,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TUI_MOBILE_AWARE,] }] }
    ]; };
    __decorate([
        Input(),
        HostBinding('class._underline'),
        tuiDefaultProp()
    ], TuiTabsComponent.prototype, "underline", void 0);
    __decorate([
        Input('activeItemIndex')
    ], TuiTabsComponent.prototype, "activeItemIndexSetter", null);
    __decorate([
        Output()
    ], TuiTabsComponent.prototype, "activeItemIndexChange", void 0);
    __decorate([
        HostBinding('class._ios')
    ], TuiTabsComponent.prototype, "isIos", void 0);
    __decorate([
        HostBinding('class._android')
    ], TuiTabsComponent.prototype, "isAndroid", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return TuiTabComponent; }))
    ], TuiTabsComponent.prototype, "children", void 0);
    __decorate([
        tuiPure
    ], TuiTabsComponent.prototype, "refresh$", null);
    __decorate([
        HostListener(TUI_TAB_ACTIVATE + ".stop", ['$event.target'])
    ], TuiTabsComponent.prototype, "onActivate", null);
    __decorate([
        HostListener('keydown.arrowRight.prevent', ['$event.target', '1']),
        HostListener('keydown.arrowLeft.prevent', ['$event.target', '-1'])
    ], TuiTabsComponent.prototype, "onKeyDownArrow", null);
    TuiTabsComponent = __decorate([
        Component({
            selector: 'tui-tabs, nav[tuiTabs]',
            template: "<tui-underline\n    *ngIf=\"underline && (refresh$ | async)\"\n    [element]=\"activeElement\"\n></tui-underline>\n<ng-content></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                class: 'tui-zero-scrollbar',
            },
            providers: [TuiDestroyService, TuiResizeService],
            styles: [":host{font:var(--tui-font-text-m);position:relative;display:flex;height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto}:host._android{height:auto}:host._ios{height:auto;border:2px solid transparent;border-radius:9px;background:var(--tui-link);box-shadow:none}"]
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(Renderer2)),
        __param(2, Inject(ChangeDetectorRef)),
        __param(3, Inject(TuiResizeService)),
        __param(4, Inject(TUI_IS_IOS)),
        __param(5, Inject(TUI_IS_ANDROID)),
        __param(6, Inject(TUI_MOBILE_AWARE))
    ], TuiTabsComponent);
    return TuiTabsComponent;
}());
export { TuiTabsComponent };
//# sourceMappingURL=data:application/json;base64,