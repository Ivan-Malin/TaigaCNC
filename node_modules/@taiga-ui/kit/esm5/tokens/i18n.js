import { InjectionToken } from '@angular/core';
import { extractI18n } from '@taiga-ui/i18n';
export var TUI_CANCEL_WORD = new InjectionToken("i18n 'cancel' word", {
    factory: extractI18n('cancel'),
});
export var TUI_DONE_WORD = new InjectionToken("i18n 'done' word", {
    factory: extractI18n('done'),
});
export var TUI_MORE_WORD = new InjectionToken("i18n 'more' word", {
    factory: extractI18n('more'),
});
export var TUI_OTHER_DATE_TEXT = new InjectionToken("i18n 'Other date' text", {
    factory: extractI18n('otherDate'),
});
export var TUI_CHOOSE_DAY_OR_RANGE_TEXTS = new InjectionToken("choose day or range i18n texts", {
    factory: extractI18n('mobileCalendarTexts'),
});
export var TUI_FROM_TO_TEXTS = new InjectionToken("from and to i18n texts", {
    factory: extractI18n('range'),
});
export var TUI_PLUS_MINUS_TEXTS = new InjectionToken("plus and minus i18n texts", {
    factory: extractI18n('countTexts'),
});
export var TUI_TIME_TEXTS = new InjectionToken("time i18n texts", {
    factory: extractI18n('time'),
});
export var TUI_DIGITAL_INFORMATION_UNITS = new InjectionToken("short bytes, kilobytes and megabytes i18n texts", {
    factory: extractI18n('digitalInformationUnits'),
});
export var TUI_COPY_TEXTS = new InjectionToken('copy i18n texts', {
    factory: extractI18n('copyTexts'),
});
export var TUI_PASSWORD_TEXTS = new InjectionToken('password i18n texts', {
    factory: extractI18n('passwordTexts'),
});
export var TUI_CALENDAR_MONTHS = new InjectionToken('short calendar months i18n', {
    factory: extractI18n('shortCalendarMonths'),
});
export var TUI_FILE_TEXTS = new InjectionToken('file i18n texts', {
    factory: extractI18n('fileTexts'),
});
export var TUI_PAGINATION_TEXTS = new InjectionToken('pagination i18n texts', {
    factory: extractI18n('paginationTexts'),
});
export var TUI_INPUT_FILE_TEXTS = new InjectionToken('tui-input-file i18n texts', {
    factory: extractI18n('inputFileTexts'),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0YWlnYS11aS9raXQvdG9rZW5zLyIsInNvdXJjZXMiOlsiaTE4bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQUMsb0JBQW9CLEVBQUU7SUFDcEUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUM7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLElBQUksY0FBYyxDQUFDLGtCQUFrQixFQUFFO0lBQ2hFLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDO0NBQy9CLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRTtJQUNoRSxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztDQUMvQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyx3QkFBd0IsRUFBRTtJQUM1RSxPQUFPLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQztDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSw2QkFBNkIsR0FBRyxJQUFJLGNBQWMsQ0FDM0QsZ0NBQWdDLEVBQ2hDO0lBQ0ksT0FBTyxFQUFFLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQztDQUM5QyxDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyx3QkFBd0IsRUFBRTtJQUMxRSxPQUFPLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQztDQUNoQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBQywyQkFBMkIsRUFBRTtJQUNoRixPQUFPLEVBQUUsV0FBVyxDQUFDLFlBQVksQ0FBQztDQUNyQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsaUJBQWlCLEVBQUU7SUFDaEUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUM7Q0FDL0IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sNkJBQTZCLEdBQUcsSUFBSSxjQUFjLENBQzNELGlEQUFpRCxFQUNqRDtJQUNJLE9BQU8sRUFBRSxXQUFXLENBQUMseUJBQXlCLENBQUM7Q0FDbEQsQ0FDSixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLGlCQUFpQixFQUFFO0lBQ2hFLE9BQU8sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO0NBQ3BDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFDLHFCQUFxQixFQUFFO0lBQ3hFLE9BQU8sRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFDLDRCQUE0QixFQUFFO0lBQ2hGLE9BQU8sRUFBRSxXQUFXLENBQUMscUJBQXFCLENBQUM7Q0FDOUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLGlCQUFpQixFQUFFO0lBQ2hFLE9BQU8sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO0NBQ3BDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFDLHVCQUF1QixFQUFFO0lBQzVFLE9BQU8sRUFBRSxXQUFXLENBQUMsaUJBQWlCLENBQUM7Q0FDMUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQUMsMkJBQTJCLEVBQUU7SUFDaEYsT0FBTyxFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztDQUN6QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7ZXh0cmFjdEkxOG59IGZyb20gJ0B0YWlnYS11aS9pMThuJztcblxuZXhwb3J0IGNvbnN0IFRVSV9DQU5DRUxfV09SRCA9IG5ldyBJbmplY3Rpb25Ub2tlbihgaTE4biAnY2FuY2VsJyB3b3JkYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdjYW5jZWwnKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX0RPTkVfV09SRCA9IG5ldyBJbmplY3Rpb25Ub2tlbihgaTE4biAnZG9uZScgd29yZGAsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bignZG9uZScpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfTU9SRV9XT1JEID0gbmV3IEluamVjdGlvblRva2VuKGBpMThuICdtb3JlJyB3b3JkYCwge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdtb3JlJyksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9PVEhFUl9EQVRFX1RFWFQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYGkxOG4gJ090aGVyIGRhdGUnIHRleHRgLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oJ290aGVyRGF0ZScpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfQ0hPT1NFX0RBWV9PUl9SQU5HRV9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgICBgY2hvb3NlIGRheSBvciByYW5nZSBpMThuIHRleHRzYCxcbiAgICB7XG4gICAgICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdtb2JpbGVDYWxlbmRhclRleHRzJyksXG4gICAgfSxcbik7XG5cbmV4cG9ydCBjb25zdCBUVUlfRlJPTV9UT19URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgZnJvbSBhbmQgdG8gaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bigncmFuZ2UnKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX1BMVVNfTUlOVVNfVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYHBsdXMgYW5kIG1pbnVzIGkxOG4gdGV4dHNgLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oJ2NvdW50VGV4dHMnKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX1RJTUVfVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYHRpbWUgaTE4biB0ZXh0c2AsIHtcbiAgICBmYWN0b3J5OiBleHRyYWN0STE4bigndGltZScpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfRElHSVRBTF9JTkZPUk1BVElPTl9VTklUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgICBgc2hvcnQgYnl0ZXMsIGtpbG9ieXRlcyBhbmQgbWVnYWJ5dGVzIGkxOG4gdGV4dHNgLFxuICAgIHtcbiAgICAgICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oJ2RpZ2l0YWxJbmZvcm1hdGlvblVuaXRzJyksXG4gICAgfSxcbik7XG5cbmV4cG9ydCBjb25zdCBUVUlfQ09QWV9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignY29weSBpMThuIHRleHRzJywge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdjb3B5VGV4dHMnKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX1BBU1NXT1JEX1RFWFRTID0gbmV3IEluamVjdGlvblRva2VuKCdwYXNzd29yZCBpMThuIHRleHRzJywge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdwYXNzd29yZFRleHRzJyksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9DQUxFTkRBUl9NT05USFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ3Nob3J0IGNhbGVuZGFyIG1vbnRocyBpMThuJywge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdzaG9ydENhbGVuZGFyTW9udGhzJyksXG59KTtcblxuZXhwb3J0IGNvbnN0IFRVSV9GSUxFX1RFWFRTID0gbmV3IEluamVjdGlvblRva2VuKCdmaWxlIGkxOG4gdGV4dHMnLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oJ2ZpbGVUZXh0cycpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfUEFHSU5BVElPTl9URVhUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbigncGFnaW5hdGlvbiBpMThuIHRleHRzJywge1xuICAgIGZhY3Rvcnk6IGV4dHJhY3RJMThuKCdwYWdpbmF0aW9uVGV4dHMnKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVFVJX0lOUFVUX0ZJTEVfVEVYVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ3R1aS1pbnB1dC1maWxlIGkxOG4gdGV4dHMnLCB7XG4gICAgZmFjdG9yeTogZXh0cmFjdEkxOG4oJ2lucHV0RmlsZVRleHRzJyksXG59KTtcbiJdfQ==