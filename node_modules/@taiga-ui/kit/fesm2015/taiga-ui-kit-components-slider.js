import { __decorate, __param } from 'tslib';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Optional, Self, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { NgControl } from '@angular/forms';
import { isNativeFocused, TUI_FOCUSABLE_ITEM_ACCESSOR, TuiRepeatTimesModule, TuiFocusableModule, TuiFocusVisibleModule, TuiActiveZoneModule } from '@taiga-ui/cdk';
import { AbstractTuiSlider, SLIDER_KEYBOARD_STEP } from '@taiga-ui/kit/abstract';
import { TUI_FROM_TO_TEXTS } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import { TuiPluralizePipeModule, TuiFormatNumberPipeModule } from '@taiga-ui/core';

var TuiSliderComponent_1;
// @dynamic
let TuiSliderComponent = TuiSliderComponent_1 = class TuiSliderComponent extends AbstractTuiSlider {
    constructor(control, changeDetectorRef, documentRef, fromToTexts$) {
        super(control, changeDetectorRef, documentRef, fromToTexts$);
    }
    get nativeFocusableElement() {
        return this.dotRight ? this.dotRight.nativeElement : null;
    }
    get focused() {
        return isNativeFocused(this.nativeFocusableElement);
    }
    get left() {
        return 0;
    }
    get right() {
        return 100 - 100 * this.getFractionFromValue(this.value);
    }
    getFallbackValue() {
        return 0;
    }
    processStep(increment) {
        const fraction = this.getFractionFromValue(this.value);
        const step = this.discrete ? 1 / this.steps : SLIDER_KEYBOARD_STEP;
        const value = this.getValueFromFraction(increment ? fraction + step : fraction - step);
        this.processValue(value);
    }
    processValue(value) {
        this.updateValue(value);
    }
};
TuiSliderComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NgControl,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [TUI_FROM_TO_TEXTS,] }] }
];
TuiSliderComponent = TuiSliderComponent_1 = __decorate([
    Component({
        selector: 'tui-slider',
        template: "<div\n    class=\"event-catcher\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n    (mousedown)=\"onMouseDown($event)\"\n    (touchstart)=\"onTouchStart($event)\"\n>\n    <div class=\"wrapper\">\n        <div *ngIf=\"segmented\" class=\"segments\">\n            <span\n                *tuiRepeatTimes=\"let segmentIndex of segments + 1\"\n                class=\"segment\"\n                automation-id=\"tui-slider__segment\"\n            >\n                <span *ngIf=\"fromToTexts$ | async as fromToText\" class=\"number\">\n                    {{getSegmentPrefix(segmentIndex, fromToText)}}\n                    {{getSegmentLabel(segmentIndex) | tuiFormatNumber}}\n                    <span *ngIf=\"isPluralized(pluralize)\">\n                        {{getSegmentLabel(segmentIndex) | tuiPluralize:\n                        pluralize}}\n                    </span>\n                </span>\n            </span>\n        </div>\n        <div\n            class=\"bar\"\n            automation-id=\"tui-slider__bar\"\n            [style.left.%]=\"left\"\n            [style.right.%]=\"right\"\n        >\n            <div\n                #dotLeft\n                class=\"dot\"\n                automation-id=\"tui-slider__left\"\n                [class.dot_focus-visible]=\"focusVisibleLeft && computedFocused\"\n                [tuiFocusable]=\"isLeftFocusable\"\n                (tuiFocusVisibleChange)=\"onLeftFocusVisible($event)\"\n                (keydown.arrowLeft.prevent)=\"decrement(false)\"\n                (keydown.arrowDown.prevent)=\"decrement(false)\"\n                (keydown.arrowRight.prevent)=\"increment(false)\"\n                (keydown.arrowUp.prevent)=\"increment(false)\"\n            ></div>\n            <div\n                #dotRight\n                class=\"dot\"\n                automation-id=\"tui-slider__right\"\n                [class.dot_focus-visible]=\"focusVisibleRight && computedFocused\"\n                [tuiFocusable]=\"isRightFocusable\"\n                (tuiFocusVisibleChange)=\"onRightFocusVisible($event)\"\n                (keydown.arrowLeft.prevent)=\"decrement(true)\"\n                (keydown.arrowDown.prevent)=\"decrement(true)\"\n                (keydown.arrowRight.prevent)=\"increment(true)\"\n                (keydown.arrowUp.prevent)=\"increment(true)\"\n            ></div>\n        </div>\n    </div>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [
            {
                provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
                useExisting: forwardRef(() => TuiSliderComponent_1),
            },
        ],
        styles: [":host{display:block;border-radius:var(--tui-radius-m);color:var(--tui-base-03);min-height:2px;font-size:16px}:host[data-tui-host-size='s']{min-height:2px;font-size:8px}:host._segmented{padding-bottom:20px}:host._disabled{cursor:default;pointer-events:none;opacity:var(--tui-disabled-opacity)}.event-catcher{min-height:inherit;border-radius:inherit;padding:7px 0;cursor:pointer}.wrapper{position:relative;min-height:inherit;border-radius:inherit;background-color:currentColor;border:solid transparent;border-width:0 1em}.bar{position:absolute;top:0;bottom:0;margin:0 -1em;border-radius:inherit;background-color:var(--tui-primary)}:host-context(tui-input-slider) .bar{margin-left:calc(var(--tui-radius-m)/ 2);border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}.dot{transition-property:background-color;transition-duration:.3s;transition-timing-function:ease-in-out;position:absolute;top:50%;z-index:1;width:1em;height:1em;transform:translate(0,-50%);border-radius:100%;background-color:var(--tui-primary);outline:0;cursor:ew-resize}.dot:last-child{right:0;transform:translate(0,-50%)}.dot:hover{background-color:var(--tui-primary-hover)}.dot:active{background-color:var(--tui-primary-active)}.dot_focus-visible{box-shadow:inset 0 0 0 2px var(--tui-focus)}.segments{position:relative;z-index:1;display:flex;justify-content:space-between;min-height:inherit;margin:0 -1em}.segments-spacer{height:26px}.segment{position:relative;height:inherit;width:4px;background-color:rgba(0,0,0,.36);pointer-events:none}.segment:first-of-type,.segment:last-of-type{background-color:transparent}.number{position:absolute;left:50%;transform:translate(-50%,0);font:var(--tui-font-text-s);top:100%;margin-top:8px;color:var(--tui-text-02);white-space:nowrap}.segment:first-of-type .number{left:-.05em;transform:none}.segment:last-of-type .number{left:auto;right:-.05em;transform:none}:host._disabled .number{color:var(--tui-text-01)}", ".dot:first-child{display:none}.wrapper{border-left:none}.bar,.segments{margin-left:0}"]
    }),
    __param(0, Optional()),
    __param(0, Self()),
    __param(0, Inject(NgControl)),
    __param(1, Inject(ChangeDetectorRef)),
    __param(2, Inject(DOCUMENT)),
    __param(3, Inject(TUI_FROM_TO_TEXTS))
], TuiSliderComponent);

let TuiSliderModule = class TuiSliderModule {
};
TuiSliderModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            TuiRepeatTimesModule,
            TuiFocusableModule,
            TuiFocusVisibleModule,
            TuiActiveZoneModule,
            TuiPluralizePipeModule,
            TuiFormatNumberPipeModule,
        ],
        declarations: [TuiSliderComponent],
        exports: [TuiSliderComponent],
    })
], TuiSliderModule);

/**
 * Generated bundle index. Do not edit.
 */

export { TuiSliderComponent, TuiSliderModule };
//# sourceMappingURL=taiga-ui-kit-components-slider.js.map
