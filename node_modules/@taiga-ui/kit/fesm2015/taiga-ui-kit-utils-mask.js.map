{"version":3,"file":"taiga-ui-kit-utils-mask.js","sources":["ng://@taiga-ui/kit/utils/mask/create-auto-corrected-date-pipe.ts","ng://@taiga-ui/kit/utils/mask/create-auto-corrected-date-range-pipe.ts","ng://@taiga-ui/kit/utils/mask/create-auto-corrected-time-pipe.ts","ng://@taiga-ui/kit/utils/mask/create-auto-corrected-date-time-pipe.ts","ng://@taiga-ui/kit/utils/mask/create-time-mask.ts","ng://@taiga-ui/kit/utils/mask/taiga-ui-kit-utils-mask.ts"],"sourcesContent":["import {TuiDay} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler} from '@taiga-ui/core';\nimport {WithDateMaskPipeConfig} from '@taiga-ui/kit/interfaces';\n\nexport function normalizeDateValue(\n    dateValue: string,\n    {value, min, max}: WithDateMaskPipeConfig<TuiDay | null, TuiDay>,\n): string {\n    return value && value.toString() === dateValue\n        ? dateValue\n        : TuiDay.normalizeParse(dateValue).dayLimit(min, max).toString();\n}\n\nexport function tuiCreateAutoCorrectedDatePipe(\n    config: WithDateMaskPipeConfig<TuiDay | null, TuiDay>,\n): TuiTextMaskPipeHandler {\n    return value => {\n        if (value.length !== config.filler.length) {\n            return {value};\n        }\n\n        return {\n            value: normalizeDateValue(value, config),\n        };\n    };\n}\n","import {RANGE_SEPARATOR_CHAR, TuiDay, TuiDayRange} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler} from '@taiga-ui/core';\n\nimport {WithDateMaskPipeConfig} from '@taiga-ui/kit/interfaces';\n\nfunction parseWithLimit(\n    value: string,\n    config: WithDateMaskPipeConfig<TuiDayRange | null, TuiDay>,\n): TuiDay {\n    return TuiDay.normalizeParse(value.slice(0, config.filler.length)).dayLimit(\n        config.min,\n        config.max,\n    );\n}\n\nfunction processRawValue(\n    value: string,\n    config: WithDateMaskPipeConfig<TuiDayRange | null, TuiDay>,\n): string {\n    switch (value.length) {\n        case config.filler.length:\n            return parseWithLimit(value, config).toString();\n        case config.filler.length + RANGE_SEPARATOR_CHAR.length:\n            return parseWithLimit(value, config).toString() + RANGE_SEPARATOR_CHAR;\n        case config.rangeFiller && config.rangeFiller.length:\n            return config.value && config.value.toString() === value\n                ? value\n                : TuiDayRange.sort(\n                      parseWithLimit(value.slice(0, config.filler.length), config),\n                      parseWithLimit(\n                          value.slice(config.filler.length + RANGE_SEPARATOR_CHAR.length),\n                          config,\n                      ),\n                  ).toString();\n        default:\n            return value;\n    }\n}\n\n/**\n * Normalizes date in formatted string\n *\n * Normalizes when:\n *\n * 1. It is a single date\n * 2. It is a single date and a separator\n * 3. It is two dates and a separator between them\n *\n * In **other** cases, the value does not change.\n *\n * @param config with min and max date\n * @return mask pipe handler that handles `min` and `max`\n */\nexport function tuiCreateAutoCorrectedDateRangePipe(\n    config: WithDateMaskPipeConfig<TuiDayRange | null, TuiDay>,\n): TuiTextMaskPipeHandler {\n    return value => ({value: processRawValue(value, config)});\n}\n","import {TuiTimeMode} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler} from '@taiga-ui/core';\n\n/**\n * Adjusts the entered time by omitting only suitable values ​​for hours and minutes\n * @returns time as a string\n */\nexport function tuiCreateAutoCorrectedTimePipe(\n    timeMode: TuiTimeMode = 'HH:MM',\n): TuiTextMaskPipeHandler {\n    const timeFormatArray: ['HH', 'MM', 'SS', 'MS'] = ['HH', 'MM', 'SS', 'MS'];\n    const maxValue = {HH: 23, MM: 59, SS: 59, MS: 999};\n\n    return (conformedValue: string) => {\n        const indexesOfPipedChars: number[] = [];\n        const conformedValueArr = conformedValue.split('');\n\n        timeFormatArray.forEach(format => {\n            const position = timeMode.indexOf(format);\n            const maxFirstDigit = parseInt(maxValue[format].toString().substr(0, 1), 10);\n\n            if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {\n                conformedValueArr[position + 1] = conformedValueArr[position];\n                conformedValueArr[position] = '0';\n                indexesOfPipedChars.push(position);\n            }\n        });\n\n        const isInvalid = timeFormatArray.some(\n            format =>\n                parseInt(conformedValue.substr(timeMode.indexOf(format), 2), 10) >\n                maxValue[format],\n        );\n\n        return isInvalid\n            ? false\n            : {\n                  value: conformedValueArr.join(''),\n                  indexesOfPipedChars,\n              };\n    };\n}\n","import {TuiDay, TuiTimeMode} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler} from '@taiga-ui/core';\nimport {DATE_TIME_SEPARATOR} from '@taiga-ui/kit/constants';\nimport {WithDateMaskPipeConfig} from '@taiga-ui/kit/interfaces';\n\nimport {normalizeDateValue} from './create-auto-corrected-date-pipe';\nimport {tuiCreateAutoCorrectedTimePipe} from './create-auto-corrected-time-pipe';\n\nexport function tuiCreateAutoCorrectedDateTimePipe(\n    config: WithDateMaskPipeConfig<TuiDay | null, TuiDay>,\n    timeMode: TuiTimeMode,\n): TuiTextMaskPipeHandler {\n    const timePipe = tuiCreateAutoCorrectedTimePipe(timeMode);\n\n    return value => {\n        if (value.length < config.filler.length) {\n            return {value};\n        }\n\n        const [date, time] = value.split(DATE_TIME_SEPARATOR);\n\n        const formattedDate = normalizeDateValue(date, config);\n\n        if (!time) {\n            return {value: formattedDate};\n        }\n\n        const pipedTime = timePipe(time, {} as any);\n\n        if (!pipedTime || typeof pipedTime === 'string') {\n            return false;\n        }\n\n        return {\n            value: `${formattedDate}${DATE_TIME_SEPARATOR}${pipedTime.value}`,\n            indexesOfPipedChars: !!pipedTime.indexesOfPipedChars\n                ? pipedTime.indexesOfPipedChars.map(i => i + date.length + 2)\n                : undefined,\n        };\n    };\n}\n","import {TuiTimeMode} from '@taiga-ui/cdk';\nimport {TUI_DIGIT_REGEXP, TuiTextMaskList} from '@taiga-ui/core';\nimport {TUI_TIME_MASK} from '@taiga-ui/kit/constants';\n\nexport function tuiCreateTimeMask(mode: TuiTimeMode): TuiTextMaskList {\n    return [\n        ...TUI_TIME_MASK,\n        ...(mode.includes('HH:MM:SS') ? [':', TUI_DIGIT_REGEXP, TUI_DIGIT_REGEXP] : []),\n        ...(mode === 'HH:MM:SS.MSS'\n            ? ['.', TUI_DIGIT_REGEXP, TUI_DIGIT_REGEXP, TUI_DIGIT_REGEXP]\n            : []),\n    ];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}