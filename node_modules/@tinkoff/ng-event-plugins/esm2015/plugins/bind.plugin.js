/**
 * @fileoverview added by tsickle
 * Generated from: plugins/bind.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { concat, defer, EMPTY } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import { dasharize } from '../utils/dasharize';
import { AbstractEventPlugin } from './abstract.plugin';
export class BindEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = '$';
    }
    /**
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    addEventListener(element, event) {
        var _a;
        element[event] = (_a = element[event]) !== null && _a !== void 0 ? _a : EMPTY;
        /** @type {?} */
        const method = this.getMethod(element, event);
        /** @type {?} */
        const zone$ = this.manager.getZone().onStable;
        /** @type {?} */
        const sub = concat(zone$.pipe(takeWhile((/**
         * @return {?}
         */
        () => element[event] === EMPTY))), defer((/**
         * @return {?}
         */
        () => element[event]))).subscribe(method);
        return (/**
         * @return {?}
         */
        () => sub.unsubscribe());
    }
    /**
     * @private
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    getMethod(element, event) {
        const [, key, value, unit = ''] = event.split('.');
        if (event.endsWith('.attr')) {
            return (/**
             * @param {?} v
             * @return {?}
             */
            v => v === null
                ? element.removeAttribute(key)
                : element.setAttribute(key, String(v)));
        }
        if (key === 'class') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            v => element.classList.toggle(value, !!v));
        }
        if (key === 'style') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            v => element.style.setProperty(dasharize(value), `${v}${unit}`));
        }
        return (/**
         * @param {?} v
         * @return {?}
         */
        v => (element[key] = v));
    }
}
BindEventPlugin.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BindEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9iaW5kLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHdEQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsbUJBQW1CO0lBRHhEOztRQUV1QixhQUFRLEdBQUcsR0FBRyxDQUFDO0lBeUN0QyxDQUFDOzs7Ozs7SUF2Q0csZ0JBQWdCLENBQ1osT0FBMEQsRUFDMUQsS0FBYTs7UUFFYixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxLQUFLLENBQUM7O2NBRW5DLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7O2NBQ3ZDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVE7O2NBQ3ZDLEdBQUcsR0FBRyxNQUFNLENBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFDLENBQUMsRUFDckQsS0FBSzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQzlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUVuQjs7O1FBQU8sR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFDO0lBQ25DLENBQUM7Ozs7Ozs7SUFFTyxTQUFTLENBQ2IsT0FBOEMsRUFDOUMsS0FBYTtjQUVQLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUVsRCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekI7Ozs7WUFBTyxDQUFDLENBQUMsRUFBRSxDQUNQLENBQUMsS0FBSyxJQUFJO2dCQUNOLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQztnQkFDOUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1NBQ2xEO1FBRUQsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ2pCOzs7O1lBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1NBQ3BEO1FBRUQsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ2pCOzs7O1lBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBQztTQUMxRTtRQUVEOzs7O1FBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQztJQUNuQyxDQUFDOzs7WUExQ0osVUFBVTs7Ozs7OztJQUVQLG1DQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2NvbmNhdCwgZGVmZXIsIEVNUFRZLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZVdoaWxlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge2Rhc2hhcml6ZX0gZnJvbSAnLi4vdXRpbHMvZGFzaGFyaXplJztcbmltcG9ydCB7QWJzdHJhY3RFdmVudFBsdWdpbn0gZnJvbSAnLi9hYnN0cmFjdC5wbHVnaW4nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmluZEV2ZW50UGx1Z2luIGV4dGVuZHMgQWJzdHJhY3RFdmVudFBsdWdpbiB7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1vZGlmaWVyID0gJyQnO1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQgJiBSZWNvcmQ8c3RyaW5nLCBPYnNlcnZhYmxlPHVua25vd24+PixcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcbiAgICApOiBGdW5jdGlvbiB7XG4gICAgICAgIGVsZW1lbnRbZXZlbnRdID0gZWxlbWVudFtldmVudF0gPz8gRU1QVFk7XG5cbiAgICAgICAgY29uc3QgbWV0aG9kID0gdGhpcy5nZXRNZXRob2QoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgICBjb25zdCB6b25lJCA9IHRoaXMubWFuYWdlci5nZXRab25lKCkub25TdGFibGU7XG4gICAgICAgIGNvbnN0IHN1YiA9IGNvbmNhdChcbiAgICAgICAgICAgIHpvbmUkLnBpcGUodGFrZVdoaWxlKCgpID0+IGVsZW1lbnRbZXZlbnRdID09PSBFTVBUWSkpLFxuICAgICAgICAgICAgZGVmZXIoKCkgPT4gZWxlbWVudFtldmVudF0pLFxuICAgICAgICApLnN1YnNjcmliZShtZXRob2QpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldE1ldGhvZChcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQgJiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcbiAgICApOiAodjogdW5rbm93bikgPT4gdm9pZCB7XG4gICAgICAgIGNvbnN0IFssIGtleSwgdmFsdWUsIHVuaXQgPSAnJ10gPSBldmVudC5zcGxpdCgnLicpO1xuXG4gICAgICAgIGlmIChldmVudC5lbmRzV2l0aCgnLmF0dHInKSkge1xuICAgICAgICAgICAgcmV0dXJuIHYgPT5cbiAgICAgICAgICAgICAgICB2ID09PSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KVxuICAgICAgICAgICAgICAgICAgICA6IGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgU3RyaW5nKHYpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgIHJldHVybiB2ID0+IGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSh2YWx1ZSwgISF2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIHJldHVybiB2ID0+IGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoZGFzaGFyaXplKHZhbHVlKSwgYCR7dn0ke3VuaXR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdiA9PiAoZWxlbWVudFtrZXldID0gdik7XG4gICAgfVxufVxuIl19