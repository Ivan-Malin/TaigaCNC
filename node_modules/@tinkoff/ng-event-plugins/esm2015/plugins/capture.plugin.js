/**
 * @fileoverview added by tsickle
 * Generated from: plugins/capture.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
export class CaptureEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'capture';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    supports(event) {
        /** @type {?} */
        const split = event.split('.');
        return split.length === 2 && split.indexOf(this.modifier) !== -1;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, event, handler) {
        element.addEventListener(this.unwrap(event), handler, true);
        return (/**
         * @return {?}
         */
        () => element.removeEventListener(this.unwrap(event), handler));
    }
}
CaptureEventPlugin.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    CaptureEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdHVyZS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9jYXB0dXJlLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHdEQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG1CQUFtQjtJQUQzRDs7UUFFdUIsYUFBUSxHQUFHLFNBQVMsQ0FBQztJQWlCNUMsQ0FBQzs7Ozs7SUFmRyxRQUFRLENBQUMsS0FBYTs7Y0FDWixLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFOUIsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7O0lBRUQsZ0JBQWdCLENBQ1osT0FBb0IsRUFDcEIsS0FBYSxFQUNiLE9BQXNCO1FBRXRCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1RDs7O1FBQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUM7SUFDMUUsQ0FBQzs7O1lBbEJKLFVBQVU7Ozs7Ozs7SUFFUCxzQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdEV2ZW50UGx1Z2lufSBmcm9tICcuL2Fic3RyYWN0LnBsdWdpbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXB0dXJlRXZlbnRQbHVnaW4gZXh0ZW5kcyBBYnN0cmFjdEV2ZW50UGx1Z2luIHtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbW9kaWZpZXIgPSAnY2FwdHVyZSc7XG5cbiAgICBzdXBwb3J0cyhldmVudDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHNwbGl0ID0gZXZlbnQuc3BsaXQoJy4nKTtcblxuICAgICAgICByZXR1cm4gc3BsaXQubGVuZ3RoID09PSAyICYmIHNwbGl0LmluZGV4T2YodGhpcy5tb2RpZmllcikgIT09IC0xO1xuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBldmVudDogc3RyaW5nLFxuICAgICAgICBoYW5kbGVyOiBFdmVudExpc3RlbmVyLFxuICAgICk6IEZ1bmN0aW9uIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMudW53cmFwKGV2ZW50KSwgaGFuZGxlciwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnVud3JhcChldmVudCksIGhhbmRsZXIpO1xuICAgIH1cbn1cbiJdfQ==