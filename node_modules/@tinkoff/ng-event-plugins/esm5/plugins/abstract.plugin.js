/**
 * @fileoverview added by tsickle
 * Generated from: plugins/abstract.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var /**
 * @abstract
 */
AbstractEventPlugin = /** @class */ (function () {
    function AbstractEventPlugin() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    AbstractEventPlugin.prototype.supports = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.split('.').indexOf(this.modifier) !== -1;
    };
    /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} _handler
     * @return {?}
     */
    AbstractEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} _element
     * @param {?} _event
     * @param {?} _handler
     * @return {?}
     */
    function (_element, _event, _handler) {
        throw new Error("Global event targets are not supported by " + this.modifier + " plugin");
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    AbstractEventPlugin.prototype.unwrap = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        return event
            .split('.')
            .filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v !== _this.modifier; }))
            .join('.');
    };
    return AbstractEventPlugin;
}());
/**
 * @abstract
 */
export { AbstractEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AbstractEventPlugin.prototype.modifier;
    /** @type {?} */
    AbstractEventPlugin.prototype.manager;
    /**
     * @abstract
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    AbstractEventPlugin.prototype.addEventListener = function (element, event, handler) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QucGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpbmtvZmYvbmctZXZlbnQtcGx1Z2lucy8iLCJzb3VyY2VzIjpbInBsdWdpbnMvYWJzdHJhY3QucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBUUE7Ozs7SUFBQTtJQStCQSxDQUFDOzs7OztJQTFCRyxzQ0FBUTs7OztJQUFSLFVBQVMsS0FBYTtRQUNsQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7Ozs7O0lBRUQsb0RBQXNCOzs7Ozs7SUFBdEIsVUFDSSxRQUFnQixFQUNoQixNQUFjLEVBQ2QsUUFBa0I7UUFFbEIsTUFBTSxJQUFJLEtBQUssQ0FDWCwrQ0FBNkMsSUFBSSxDQUFDLFFBQVEsWUFBUyxDQUN0RSxDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBUVMsb0NBQU07Ozs7O0lBQWhCLFVBQWlCLEtBQWE7UUFBOUIsaUJBS0M7UUFKRyxPQUFPLEtBQUs7YUFDUCxLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ1YsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEtBQUksQ0FBQyxRQUFRLEVBQW5CLENBQW1CLEVBQUM7YUFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFDTCwwQkFBQztBQUFELENBQUMsQUEvQkQsSUErQkM7Ozs7Ozs7Ozs7SUE5QkcsdUNBQTZDOztJQUU3QyxzQ0FBdUI7Ozs7Ozs7O0lBZ0J2Qix3RkFJWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRNYW5hZ2VyfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuLy8gVE9ETzogQSBzdWJqZWN0IHRvIGNoYW5nZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzkyOVxudHlwZSBFdmVudE1hbmFnZXJBcmcgPSBDb25zdHJ1Y3RvclBhcmFtZXRlcnM8dHlwZW9mIEV2ZW50TWFuYWdlcj5bMF1bMF07XG50eXBlIEV2ZW50TWFuYWdlclBsdWdpbiA9IHtcbiAgICBbSyBpbiBrZXlvZiBFdmVudE1hbmFnZXJBcmddOiBFdmVudE1hbmFnZXJBcmdbS107XG59O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RFdmVudFBsdWdpbiBpbXBsZW1lbnRzIEV2ZW50TWFuYWdlclBsdWdpbiB7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IG1vZGlmaWVyOiBzdHJpbmc7XG5cbiAgICBtYW5hZ2VyITogRXZlbnRNYW5hZ2VyO1xuXG4gICAgc3VwcG9ydHMoZXZlbnQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXZlbnQuc3BsaXQoJy4nKS5pbmRleE9mKHRoaXMubW9kaWZpZXIpICE9PSAtMTtcbiAgICB9XG5cbiAgICBhZGRHbG9iYWxFdmVudExpc3RlbmVyKFxuICAgICAgICBfZWxlbWVudDogc3RyaW5nLFxuICAgICAgICBfZXZlbnQ6IHN0cmluZyxcbiAgICAgICAgX2hhbmRsZXI6IEZ1bmN0aW9uLFxuICAgICk6IEZ1bmN0aW9uIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEdsb2JhbCBldmVudCB0YXJnZXRzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5ICR7dGhpcy5tb2RpZmllcn0gcGx1Z2luYCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBhZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcbiAgICAgICAgaGFuZGxlcjogRnVuY3Rpb24sXG4gICAgKTogRnVuY3Rpb247XG5cbiAgICBwcm90ZWN0ZWQgdW53cmFwKGV2ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZXZlbnRcbiAgICAgICAgICAgIC5zcGxpdCgnLicpXG4gICAgICAgICAgICAuZmlsdGVyKHYgPT4gdiAhPT0gdGhpcy5tb2RpZmllcilcbiAgICAgICAgICAgIC5qb2luKCcuJyk7XG4gICAgfVxufVxuIl19