/**
 * @fileoverview added by tsickle
 * Generated from: plugins/bind.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends, __read } from "tslib";
import { Injectable } from '@angular/core';
import { concat, defer, EMPTY } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import { dasharize } from '../utils/dasharize';
import { AbstractEventPlugin } from './abstract.plugin';
var BindEventPlugin = /** @class */ (function (_super) {
    __extends(BindEventPlugin, _super);
    function BindEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = '$';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    BindEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    function (element, event) {
        var _a;
        element[event] = (_a = element[event]) !== null && _a !== void 0 ? _a : EMPTY;
        /** @type {?} */
        var method = this.getMethod(element, event);
        /** @type {?} */
        var zone$ = this.manager.getZone().onStable;
        /** @type {?} */
        var sub = concat(zone$.pipe(takeWhile((/**
         * @return {?}
         */
        function () { return element[event] === EMPTY; }))), defer((/**
         * @return {?}
         */
        function () { return element[event]; }))).subscribe(method);
        return (/**
         * @return {?}
         */
        function () { return sub.unsubscribe(); });
    };
    /**
     * @private
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    BindEventPlugin.prototype.getMethod = /**
     * @private
     * @param {?} element
     * @param {?} event
     * @return {?}
     */
    function (element, event) {
        var _a = __read(event.split('.'), 4), key = _a[1], value = _a[2], _b = _a[3], unit = _b === void 0 ? '' : _b;
        if (event.endsWith('.attr')) {
            return (/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                return v === null
                    ? element.removeAttribute(key)
                    : element.setAttribute(key, String(v));
            });
        }
        if (key === 'class') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return element.classList.toggle(value, !!v); });
        }
        if (key === 'style') {
            return (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return element.style.setProperty(dasharize(value), "" + v + unit); });
        }
        return (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return (element[key] = v); });
    };
    BindEventPlugin.decorators = [
        { type: Injectable }
    ];
    return BindEventPlugin;
}(AbstractEventPlugin));
export { BindEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BindEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9iaW5kLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXREO0lBQ3FDLG1DQUFtQjtJQUR4RDtRQUFBLHFFQTJDQztRQXpDc0IsY0FBUSxHQUFHLEdBQUcsQ0FBQzs7SUF5Q3RDLENBQUM7Ozs7OztJQXZDRywwQ0FBZ0I7Ozs7O0lBQWhCLFVBQ0ksT0FBMEQsRUFDMUQsS0FBYTs7UUFFYixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxLQUFLLENBQUM7O1lBRW5DLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7O1lBQ3ZDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVE7O1lBQ3ZDLEdBQUcsR0FBRyxNQUFNLENBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTOzs7UUFBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBeEIsQ0FBd0IsRUFBQyxDQUFDLEVBQ3JELEtBQUs7OztRQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQWQsQ0FBYyxFQUFDLENBQzlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUVuQjs7O1FBQU8sY0FBTSxPQUFBLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBakIsQ0FBaUIsRUFBQztJQUNuQyxDQUFDOzs7Ozs7O0lBRU8sbUNBQVM7Ozs7OztJQUFqQixVQUNJLE9BQThDLEVBQzlDLEtBQWE7UUFFUCxJQUFBLGdDQUE0QyxFQUF6QyxXQUFHLEVBQUUsYUFBSyxFQUFFLFVBQVMsRUFBVCw4QkFBNkI7UUFFbEQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCOzs7O1lBQU8sVUFBQSxDQUFDO2dCQUNKLE9BQUEsQ0FBQyxLQUFLLElBQUk7b0JBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDO29CQUM5QixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRjFDLENBRTBDLEVBQUM7U0FDbEQ7UUFFRCxJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDakI7Ozs7WUFBTyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQXBDLENBQW9DLEVBQUM7U0FDcEQ7UUFFRCxJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDakI7Ozs7WUFBTyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFHLENBQUMsR0FBRyxJQUFNLENBQUMsRUFBMUQsQ0FBMEQsRUFBQztTQUMxRTtRQUVEOzs7O1FBQU8sVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBbEIsQ0FBa0IsRUFBQztJQUNuQyxDQUFDOztnQkExQ0osVUFBVTs7SUEyQ1gsc0JBQUM7Q0FBQSxBQTNDRCxDQUNxQyxtQkFBbUIsR0EwQ3ZEO1NBMUNZLGVBQWU7Ozs7OztJQUN4QixtQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtjb25jYXQsIGRlZmVyLCBFTVBUWSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VXaGlsZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtkYXNoYXJpemV9IGZyb20gJy4uL3V0aWxzL2Rhc2hhcml6ZSc7XG5pbXBvcnQge0Fic3RyYWN0RXZlbnRQbHVnaW59IGZyb20gJy4vYWJzdHJhY3QucGx1Z2luJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJpbmRFdmVudFBsdWdpbiBleHRlbmRzIEFic3RyYWN0RXZlbnRQbHVnaW4ge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBtb2RpZmllciA9ICckJztcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICYgUmVjb3JkPHN0cmluZywgT2JzZXJ2YWJsZTx1bmtub3duPj4sXG4gICAgICAgIGV2ZW50OiBzdHJpbmcsXG4gICAgKTogRnVuY3Rpb24ge1xuICAgICAgICBlbGVtZW50W2V2ZW50XSA9IGVsZW1lbnRbZXZlbnRdID8/IEVNUFRZO1xuXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuZ2V0TWV0aG9kKGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgICAgY29uc3Qgem9uZSQgPSB0aGlzLm1hbmFnZXIuZ2V0Wm9uZSgpLm9uU3RhYmxlO1xuICAgICAgICBjb25zdCBzdWIgPSBjb25jYXQoXG4gICAgICAgICAgICB6b25lJC5waXBlKHRha2VXaGlsZSgoKSA9PiBlbGVtZW50W2V2ZW50XSA9PT0gRU1QVFkpKSxcbiAgICAgICAgICAgIGRlZmVyKCgpID0+IGVsZW1lbnRbZXZlbnRdKSxcbiAgICAgICAgKS5zdWJzY3JpYmUobWV0aG9kKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4gc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNZXRob2QoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICYgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgICAgIGV2ZW50OiBzdHJpbmcsXG4gICAgKTogKHY6IHVua25vd24pID0+IHZvaWQge1xuICAgICAgICBjb25zdCBbLCBrZXksIHZhbHVlLCB1bml0ID0gJyddID0gZXZlbnQuc3BsaXQoJy4nKTtcblxuICAgICAgICBpZiAoZXZlbnQuZW5kc1dpdGgoJy5hdHRyJykpIHtcbiAgICAgICAgICAgIHJldHVybiB2ID0+XG4gICAgICAgICAgICAgICAgdiA9PT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgOiBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFN0cmluZyh2KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICByZXR1cm4gdiA9PiBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUodmFsdWUsICEhdik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gdiA9PiBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGRhc2hhcml6ZSh2YWx1ZSksIGAke3Z9JHt1bml0fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHYgPT4gKGVsZW1lbnRba2V5XSA9IHYpO1xuICAgIH1cbn1cbiJdfQ==