/**
 * @fileoverview added by tsickle
 * Generated from: plugins/capture.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
var CaptureEventPlugin = /** @class */ (function (_super) {
    __extends(CaptureEventPlugin, _super);
    function CaptureEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'capture';
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CaptureEventPlugin.prototype.supports = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var split = event.split('.');
        return split.length === 2 && split.indexOf(this.modifier) !== -1;
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    CaptureEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        var _this = this;
        element.addEventListener(this.unwrap(event), handler, true);
        return (/**
         * @return {?}
         */
        function () { return element.removeEventListener(_this.unwrap(event), handler); });
    };
    CaptureEventPlugin.decorators = [
        { type: Injectable }
    ];
    return CaptureEventPlugin;
}(AbstractEventPlugin));
export { CaptureEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    CaptureEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdHVyZS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9jYXB0dXJlLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXREO0lBQ3dDLHNDQUFtQjtJQUQzRDtRQUFBLHFFQW1CQztRQWpCc0IsY0FBUSxHQUFHLFNBQVMsQ0FBQzs7SUFpQjVDLENBQUM7Ozs7O0lBZkcscUNBQVE7Ozs7SUFBUixVQUFTLEtBQWE7O1lBQ1osS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBRTlCLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7OztJQUVELDZDQUFnQjs7Ozs7O0lBQWhCLFVBQ0ksT0FBb0IsRUFDcEIsS0FBYSxFQUNiLE9BQXNCO1FBSDFCLGlCQVFDO1FBSEcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTVEOzs7UUFBTyxjQUFNLE9BQUEsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQXhELENBQXdELEVBQUM7SUFDMUUsQ0FBQzs7Z0JBbEJKLFVBQVU7O0lBbUJYLHlCQUFDO0NBQUEsQUFuQkQsQ0FDd0MsbUJBQW1CLEdBa0IxRDtTQWxCWSxrQkFBa0I7Ozs7OztJQUMzQixzQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdEV2ZW50UGx1Z2lufSBmcm9tICcuL2Fic3RyYWN0LnBsdWdpbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXB0dXJlRXZlbnRQbHVnaW4gZXh0ZW5kcyBBYnN0cmFjdEV2ZW50UGx1Z2luIHtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbW9kaWZpZXIgPSAnY2FwdHVyZSc7XG5cbiAgICBzdXBwb3J0cyhldmVudDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHNwbGl0ID0gZXZlbnQuc3BsaXQoJy4nKTtcblxuICAgICAgICByZXR1cm4gc3BsaXQubGVuZ3RoID09PSAyICYmIHNwbGl0LmluZGV4T2YodGhpcy5tb2RpZmllcikgIT09IC0xO1xuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICBldmVudDogc3RyaW5nLFxuICAgICAgICBoYW5kbGVyOiBFdmVudExpc3RlbmVyLFxuICAgICk6IEZ1bmN0aW9uIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMudW53cmFwKGV2ZW50KSwgaGFuZGxlciwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnVud3JhcChldmVudCksIGhhbmRsZXIpO1xuICAgIH1cbn1cbiJdfQ==