/**
 * @fileoverview added by tsickle
 * Generated from: plugins/stop.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
var StopEventPlugin = /** @class */ (function (_super) {
    __extends(StopEventPlugin, _super);
    function StopEventPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifier = 'stop';
        return _this;
    }
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    StopEventPlugin.prototype.addEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.stopPropagation();
            handler(event);
        });
        return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    };
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    StopEventPlugin.prototype.addGlobalEventListener = /**
     * @param {?} element
     * @param {?} event
     * @param {?} handler
     * @return {?}
     */
    function (element, event, handler) {
        /** @type {?} */
        var wrapped = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.stopPropagation();
            handler(event);
        });
        return this.manager.addGlobalEventListener(element, this.unwrap(event), wrapped);
    };
    StopEventPlugin.decorators = [
        { type: Injectable }
    ];
    return StopEventPlugin;
}(AbstractEventPlugin));
export { StopEventPlugin };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    StopEventPlugin.prototype.modifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcC5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1ldmVudC1wbHVnaW5zLyIsInNvdXJjZXMiOlsicGx1Z2lucy9zdG9wLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXREO0lBQ3FDLG1DQUFtQjtJQUR4RDtRQUFBLHFFQXFCQztRQW5Cc0IsY0FBUSxHQUFHLE1BQU0sQ0FBQzs7SUFtQnpDLENBQUM7Ozs7Ozs7SUFqQkcsMENBQWdCOzs7Ozs7SUFBaEIsVUFBaUIsT0FBb0IsRUFBRSxLQUFhLEVBQUUsT0FBaUI7O1lBQzdELE9BQU87Ozs7UUFBRyxVQUFDLEtBQVk7WUFDekIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUE7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7OztJQUVELGdEQUFzQjs7Ozs7O0lBQXRCLFVBQXVCLE9BQWUsRUFBRSxLQUFhLEVBQUUsT0FBaUI7O1lBQzlELE9BQU87Ozs7UUFBRyxVQUFDLEtBQVk7WUFDekIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUE7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckYsQ0FBQzs7Z0JBcEJKLFVBQVU7O0lBcUJYLHNCQUFDO0NBQUEsQUFyQkQsQ0FDcUMsbUJBQW1CLEdBb0J2RDtTQXBCWSxlQUFlOzs7Ozs7SUFDeEIsbUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWJzdHJhY3RFdmVudFBsdWdpbn0gZnJvbSAnLi9hYnN0cmFjdC5wbHVnaW4nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RvcEV2ZW50UGx1Z2luIGV4dGVuZHMgQWJzdHJhY3RFdmVudFBsdWdpbiB7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1vZGlmaWVyID0gJ3N0b3AnO1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50OiBIVE1MRWxlbWVudCwgZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZWQgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCB0aGlzLnVud3JhcChldmVudCksIHdyYXBwZWQpO1xuICAgIH1cblxuICAgIGFkZEdsb2JhbEV2ZW50TGlzdGVuZXIoZWxlbWVudDogc3RyaW5nLCBldmVudDogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbik6IEZ1bmN0aW9uIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaGFuZGxlcihldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5hZGRHbG9iYWxFdmVudExpc3RlbmVyKGVsZW1lbnQsIHRoaXMudW53cmFwKGV2ZW50KSwgd3JhcHBlZCk7XG4gICAgfVxufVxuIl19