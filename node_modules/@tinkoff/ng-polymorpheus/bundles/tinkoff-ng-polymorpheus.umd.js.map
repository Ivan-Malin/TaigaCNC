{"version":3,"file":"tinkoff-ng-polymorpheus.umd.js","sources":["ng://@tinkoff/ng-polymorpheus/tokens/context.ts","ng://@tinkoff/ng-polymorpheus/classes/component.ts","ng://@tinkoff/ng-polymorpheus/directives/template.ts","ng://@tinkoff/ng-polymorpheus/outlet/outlet.component.ts","ng://@tinkoff/ng-polymorpheus/directives/context.ts","ng://@tinkoff/ng-polymorpheus/pipes/injector.ts","ng://@tinkoff/ng-polymorpheus/polymorpheus.module.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {@link PolymorpheusOutletComponent}\r\n */\r\nexport const POLYMORPHEUS_CONTEXT = new InjectionToken<object>(\r\n    'Context from polymorpheus-outlet',\r\n);\r\n","import {Injector, Type} from '@angular/core';\r\nimport {POLYMORPHEUS_CONTEXT} from '../tokens/context';\r\n\r\n/**\r\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletComponent}\r\n *\r\n * @param component — an Angular component to be dynamically created\r\n * @param injector — optional {@link Injector} for lazy loaded module case\r\n */\r\nexport class PolymorpheusComponent<T extends object, C extends object> {\r\n    constructor(\r\n        readonly component: Type<T>,\r\n        private readonly injector: Injector | null = null,\r\n    ) {}\r\n\r\n    createInjector(injector: Injector, context: C): Injector {\r\n        return Injector.create({\r\n            parent: this.injector || injector,\r\n            providers: [\r\n                {\r\n                    provide: POLYMORPHEUS_CONTEXT,\r\n                    useValue: context,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectorRef, Directive, Inject, Self, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * ng-template wrapper directive also storing {@link ChangeDetectorRef} to properly handle change detection.\r\n */\r\n@Directive({\r\n    selector: 'ng-template[polymorpheus]',\r\n    exportAs: 'polymorpheus',\r\n})\r\nexport class PolymorpheusTemplate<T extends object> {\r\n    constructor(\r\n        @Inject(TemplateRef)\r\n        @Self()\r\n        readonly template: TemplateRef<T>,\r\n        @Inject(ChangeDetectorRef) private readonly changeDetectorRef: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    check() {\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n}\r\n","import {NgComponentOutlet} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ContentChild,\n    DoCheck,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport {PolymorpheusComponent} from '../classes/component';\nimport {PolymorpheusTemplate} from '../directives/template';\nimport {PolymorpheusContent} from '../types/content';\nimport {PolymorpheusPrimitive} from '../types/primitive';\n\n/**\n * Outlet instantiating {@link PolymorpheusContent} with given context\n */\n@Component({\n    selector: '[polymorpheus-outlet]',\n    templateUrl: './outlet.template.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PolymorpheusOutletComponent<C extends object> implements DoCheck, OnChanges {\n    @ContentChild(TemplateRef)\n    readonly template: TemplateRef<C> | null = null;\n\n    @ViewChild(NgComponentOutlet)\n    readonly outlet?: NgComponentOutlet;\n\n    @Input()\n    content: PolymorpheusContent<C> | null = null;\n\n    @Input()\n    context!: C;\n\n    get primitive(): PolymorpheusPrimitive {\n        if (!this.content || this.isAdvanced(this.content)) {\n            return '';\n        }\n\n        return typeof this.content === 'function'\n            ? this.content(this.context)\n            : this.content;\n    }\n\n    isAdvanced(\n        content: PolymorpheusContent<C> | null,\n    ): content is\n        | PolymorpheusTemplate<C>\n        | TemplateRef<C>\n        | PolymorpheusComponent<object, C> {\n        return isTemplate(content) || isComponent(content);\n    }\n\n    getTemplate(\n        content:\n            | PolymorpheusComponent<object, C>\n            | PolymorpheusTemplate<C>\n            | TemplateRef<C>,\n        componentTmp: TemplateRef<C>,\n    ): TemplateRef<C> {\n        if (isComponent(content)) {\n            return componentTmp;\n        }\n\n        return isDirective(content) ? content.template : content;\n    }\n\n    guard(\n        content: PolymorpheusContent<C> | null,\n    ): content is PolymorpheusComponent<object, C> {\n        return isComponent(content);\n    }\n\n    ngOnChanges({content, context}: SimpleChanges) {\n        // TODO: Keep an eye on private field, name can change\n        const componentRef = (!content &&\n            context &&\n            this.outlet &&\n            this.outlet['_componentRef']) as ComponentRef<object> | null | false;\n\n        if (componentRef) {\n            componentRef.injector.get(ChangeDetectorRef).markForCheck();\n        }\n    }\n\n    ngDoCheck() {\n        if (isDirective(this.content)) {\n            this.content.check();\n        }\n    }\n}\n\nfunction isDirective<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusTemplate<C> {\n    return content instanceof PolymorpheusTemplate;\n}\n\nfunction isComponent<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusComponent<object, C> {\n    return content instanceof PolymorpheusComponent;\n}\n\nfunction isTemplate<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusTemplate<C> | TemplateRef<C> {\n    return isDirective(content) || content instanceof TemplateRef;\n}\n","import {Directive, EmbeddedViewRef, Inject, ViewContainerRef} from '@angular/core';\r\n\r\n/**\r\n * Helper directive, extracting first {@link EmbeddedViewRef} context if it's present\r\n */\r\n@Directive({\r\n    selector: '[context]',\r\n    exportAs: 'context',\r\n})\r\nexport class ContextDirective<C> {\r\n    constructor(\r\n        @Inject(ViewContainerRef) private readonly viewContainerRef: ViewContainerRef,\r\n    ) {}\r\n\r\n    get context(): C | null {\r\n        const viewRef = this.viewContainerRef.get(0) as EmbeddedViewRef<C> | null;\r\n\r\n        return viewRef && viewRef.context;\r\n    }\r\n}\r\n","import {Inject, Injector, Pipe, PipeTransform} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\n\r\n/**\r\n * Internal use {@link Pipe} to create {@link Injector}\r\n * only when either content or context change\r\n */\r\n@Pipe({\r\n    name: 'injector',\r\n})\r\nexport class InjectorPipe<C extends object> implements PipeTransform {\r\n    constructor(@Inject(Injector) private readonly injector: Injector) {}\r\n\r\n    transform(content: PolymorpheusComponent<object, C>, context: C): Injector {\r\n        return content.createInjector(this.injector, context);\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ContextDirective} from './directives/context';\r\nimport {PolymorpheusTemplate} from './directives/template';\r\nimport {PolymorpheusOutletComponent} from './outlet/outlet.component';\r\nimport {InjectorPipe} from './pipes/injector';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        PolymorpheusOutletComponent,\r\n        PolymorpheusTemplate,\r\n        ContextDirective,\r\n        InjectorPipe,\r\n    ],\r\n    exports: [PolymorpheusOutletComponent, PolymorpheusTemplate],\r\n})\r\nexport class PolymorpheusModule {}\r\n"],"names":["InjectionToken","Injector","Directive","TemplateRef","Inject","Self","ChangeDetectorRef","Component","ChangeDetectionStrategy","ContentChild","ViewChild","NgComponentOutlet","Input","ViewContainerRef","Pipe","NgModule","CommonModule"],"mappings":"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"}