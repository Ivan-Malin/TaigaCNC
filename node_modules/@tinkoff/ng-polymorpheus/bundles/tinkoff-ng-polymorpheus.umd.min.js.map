{"version":3,"sources":["ng://@tinkoff/ng-polymorpheus/tokens/context.ts","ng://@tinkoff/ng-polymorpheus/classes/component.ts","ng://@tinkoff/ng-polymorpheus/directives/template.ts","ng://@tinkoff/ng-polymorpheus/outlet/outlet.component.ts","ng://@tinkoff/ng-polymorpheus/directives/context.ts","ng://@tinkoff/ng-polymorpheus/pipes/injector.ts","ng://@tinkoff/ng-polymorpheus/polymorpheus.module.ts"],"names":["POLYMORPHEUS_CONTEXT","InjectionToken","PolymorpheusComponent","component","injector","this","prototype","createInjector","context","Injector","create","parent","providers","provide","useValue","PolymorpheusTemplate","template","changeDetectorRef","check","markForCheck","Directive","args","selector","exportAs","TemplateRef","decorators","type","Inject","Self","ChangeDetectorRef","PolymorpheusOutletComponent","content","Object","defineProperty","isAdvanced","isDirective","isTemplate","isComponent","getTemplate","componentTmp","guard","ngOnChanges","_a","componentRef","outlet","get","ngDoCheck","Component","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","ViewChild","NgComponentOutlet","Input","ContextDirective","viewContainerRef","viewRef","ViewContainerRef","InjectorPipe","transform","Pipe","name","PolymorpheusModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {@link PolymorpheusOutletComponent}\r\n */\r\nexport const POLYMORPHEUS_CONTEXT = new InjectionToken<object>(\r\n    'Context from polymorpheus-outlet',\r\n);\r\n","import {Injector, Type} from '@angular/core';\r\nimport {POLYMORPHEUS_CONTEXT} from '../tokens/context';\r\n\r\n/**\r\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletComponent}\r\n *\r\n * @param component — an Angular component to be dynamically created\r\n * @param injector — optional {@link Injector} for lazy loaded module case\r\n */\r\nexport class PolymorpheusComponent<T extends object, C extends object> {\r\n    constructor(\r\n        readonly component: Type<T>,\r\n        private readonly injector: Injector | null = null,\r\n    ) {}\r\n\r\n    createInjector(injector: Injector, context: C): Injector {\r\n        return Injector.create({\r\n            parent: this.injector || injector,\r\n            providers: [\r\n                {\r\n                    provide: POLYMORPHEUS_CONTEXT,\r\n                    useValue: context,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectorRef, Directive, Inject, Self, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * ng-template wrapper directive also storing {@link ChangeDetectorRef} to properly handle change detection.\r\n */\r\n@Directive({\r\n    selector: 'ng-template[polymorpheus]',\r\n    exportAs: 'polymorpheus',\r\n})\r\nexport class PolymorpheusTemplate<T extends object> {\r\n    constructor(\r\n        @Inject(TemplateRef)\r\n        @Self()\r\n        readonly template: TemplateRef<T>,\r\n        @Inject(ChangeDetectorRef) private readonly changeDetectorRef: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    check() {\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n}\r\n","import {NgComponentOutlet} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ContentChild,\n    DoCheck,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport {PolymorpheusComponent} from '../classes/component';\nimport {PolymorpheusTemplate} from '../directives/template';\nimport {PolymorpheusContent} from '../types/content';\nimport {PolymorpheusPrimitive} from '../types/primitive';\n\n/**\n * Outlet instantiating {@link PolymorpheusContent} with given context\n */\n@Component({\n    selector: '[polymorpheus-outlet]',\n    templateUrl: './outlet.template.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PolymorpheusOutletComponent<C extends object> implements DoCheck, OnChanges {\n    @ContentChild(TemplateRef)\n    readonly template: TemplateRef<C> | null = null;\n\n    @ViewChild(NgComponentOutlet)\n    readonly outlet?: NgComponentOutlet;\n\n    @Input()\n    content: PolymorpheusContent<C> | null = null;\n\n    @Input()\n    context!: C;\n\n    get primitive(): PolymorpheusPrimitive {\n        if (!this.content || this.isAdvanced(this.content)) {\n            return '';\n        }\n\n        return typeof this.content === 'function'\n            ? this.content(this.context)\n            : this.content;\n    }\n\n    isAdvanced(\n        content: PolymorpheusContent<C> | null,\n    ): content is\n        | PolymorpheusTemplate<C>\n        | TemplateRef<C>\n        | PolymorpheusComponent<object, C> {\n        return isTemplate(content) || isComponent(content);\n    }\n\n    getTemplate(\n        content:\n            | PolymorpheusComponent<object, C>\n            | PolymorpheusTemplate<C>\n            | TemplateRef<C>,\n        componentTmp: TemplateRef<C>,\n    ): TemplateRef<C> {\n        if (isComponent(content)) {\n            return componentTmp;\n        }\n\n        return isDirective(content) ? content.template : content;\n    }\n\n    guard(\n        content: PolymorpheusContent<C> | null,\n    ): content is PolymorpheusComponent<object, C> {\n        return isComponent(content);\n    }\n\n    ngOnChanges({content, context}: SimpleChanges) {\n        // TODO: Keep an eye on private field, name can change\n        const componentRef = (!content &&\n            context &&\n            this.outlet &&\n            this.outlet['_componentRef']) as ComponentRef<object> | null | false;\n\n        if (componentRef) {\n            componentRef.injector.get(ChangeDetectorRef).markForCheck();\n        }\n    }\n\n    ngDoCheck() {\n        if (isDirective(this.content)) {\n            this.content.check();\n        }\n    }\n}\n\nfunction isDirective<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusTemplate<C> {\n    return content instanceof PolymorpheusTemplate;\n}\n\nfunction isComponent<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusComponent<object, C> {\n    return content instanceof PolymorpheusComponent;\n}\n\nfunction isTemplate<C extends object>(\n    content: PolymorpheusContent<C> | null,\n): content is PolymorpheusTemplate<C> | TemplateRef<C> {\n    return isDirective(content) || content instanceof TemplateRef;\n}\n","import {Directive, EmbeddedViewRef, Inject, ViewContainerRef} from '@angular/core';\r\n\r\n/**\r\n * Helper directive, extracting first {@link EmbeddedViewRef} context if it's present\r\n */\r\n@Directive({\r\n    selector: '[context]',\r\n    exportAs: 'context',\r\n})\r\nexport class ContextDirective<C> {\r\n    constructor(\r\n        @Inject(ViewContainerRef) private readonly viewContainerRef: ViewContainerRef,\r\n    ) {}\r\n\r\n    get context(): C | null {\r\n        const viewRef = this.viewContainerRef.get(0) as EmbeddedViewRef<C> | null;\r\n\r\n        return viewRef && viewRef.context;\r\n    }\r\n}\r\n","import {Inject, Injector, Pipe, PipeTransform} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\n\r\n/**\r\n * Internal use {@link Pipe} to create {@link Injector}\r\n * only when either content or context change\r\n */\r\n@Pipe({\r\n    name: 'injector',\r\n})\r\nexport class InjectorPipe<C extends object> implements PipeTransform {\r\n    constructor(@Inject(Injector) private readonly injector: Injector) {}\r\n\r\n    transform(content: PolymorpheusComponent<object, C>, context: C): Injector {\r\n        return content.createInjector(this.injector, context);\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {ContextDirective} from './directives/context';\r\nimport {PolymorpheusTemplate} from './directives/template';\r\nimport {PolymorpheusOutletComponent} from './outlet/outlet.component';\r\nimport {InjectorPipe} from './pipes/injector';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        PolymorpheusOutletComponent,\r\n        PolymorpheusTemplate,\r\n        ContextDirective,\r\n        InjectorPipe,\r\n    ],\r\n    exports: [PolymorpheusOutletComponent, PolymorpheusTemplate],\r\n})\r\nexport class PolymorpheusModule {}\r\n"]}