/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Inject, Self, TemplateRef } from '@angular/core';
/**
 * ng-template wrapper directive also storing {\@link ChangeDetectorRef} to properly handle change detection.
 * @template T
 */
export class PolymorpheusTemplate {
    /**
     * @param {?} template
     * @param {?} changeDetectorRef
     */
    constructor(template, changeDetectorRef) {
        this.template = template;
        this.changeDetectorRef = changeDetectorRef;
    }
    /**
     * @return {?}
     */
    check() {
        this.changeDetectorRef.markForCheck();
    }
}
PolymorpheusTemplate.decorators = [
    { type: Directive, args: [{
                selector: 'ng-template[polymorpheus]',
                exportAs: 'polymorpheus',
            },] }
];
/** @nocollapse */
PolymorpheusTemplate.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }, { type: Self }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
];
if (false) {
    /** @type {?} */
    PolymorpheusTemplate.prototype.template;
    /**
     * @type {?}
     * @private
     */
    PolymorpheusTemplate.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1wb2x5bW9ycGhldXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7OztBQVN0RixNQUFNLE9BQU8sb0JBQW9COzs7OztJQUM3QixZQUdhLFFBQXdCLEVBQ1csaUJBQW9DO1FBRHZFLGFBQVEsR0FBUixRQUFRLENBQWdCO1FBQ1csc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtJQUNqRixDQUFDOzs7O0lBRUosS0FBSztRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs7WUFkSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsUUFBUSxFQUFFLGNBQWM7YUFDM0I7Ozs7WUFSbUQsV0FBVyx1QkFXdEQsTUFBTSxTQUFDLFdBQVcsY0FDbEIsSUFBSTtZQVpMLGlCQUFpQix1QkFjaEIsTUFBTSxTQUFDLGlCQUFpQjs7OztJQUh6Qix3Q0FFaUM7Ozs7O0lBQ2pDLGlEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgSW5qZWN0LCBTZWxmLCBUZW1wbGF0ZVJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipcclxuICogbmctdGVtcGxhdGUgd3JhcHBlciBkaXJlY3RpdmUgYWxzbyBzdG9yaW5nIHtAbGluayBDaGFuZ2VEZXRlY3RvclJlZn0gdG8gcHJvcGVybHkgaGFuZGxlIGNoYW5nZSBkZXRlY3Rpb24uXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnbmctdGVtcGxhdGVbcG9seW1vcnBoZXVzXScsXHJcbiAgICBleHBvcnRBczogJ3BvbHltb3JwaGV1cycsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxUIGV4dGVuZHMgb2JqZWN0PiB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBASW5qZWN0KFRlbXBsYXRlUmVmKVxyXG4gICAgICAgIEBTZWxmKClcclxuICAgICAgICByZWFkb25seSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8VD4sXHJcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICApIHt9XHJcblxyXG4gICAgY2hlY2soKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxufVxyXG4iXX0=