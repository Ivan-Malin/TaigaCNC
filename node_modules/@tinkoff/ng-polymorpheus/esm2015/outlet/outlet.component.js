/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgComponentOutlet } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, TemplateRef, ViewChild, } from '@angular/core';
import { PolymorpheusComponent } from '../classes/component';
import { PolymorpheusTemplate } from '../directives/template';
/**
 * Outlet instantiating {\@link PolymorpheusContent} with given context
 * @template C
 */
export class PolymorpheusOutletComponent {
    constructor() {
        this.template = null;
        this.content = null;
    }
    /**
     * @return {?}
     */
    get primitive() {
        if (!this.content || this.isAdvanced(this.content)) {
            return '';
        }
        return typeof this.content === 'function'
            ? this.content(this.context)
            : this.content;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    isAdvanced(content) {
        return isTemplate(content) || isComponent(content);
    }
    /**
     * @param {?} content
     * @param {?} componentTmp
     * @return {?}
     */
    getTemplate(content, componentTmp) {
        if (isComponent(content)) {
            return componentTmp;
        }
        return isDirective(content) ? content.template : content;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    guard(content) {
        return isComponent(content);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    ngOnChanges({ content, context }) {
        // TODO: Keep an eye on private field, name can change
        /** @type {?} */
        const componentRef = (/** @type {?} */ ((!content &&
            context &&
            this.outlet &&
            this.outlet['_componentRef'])));
        if (componentRef) {
            componentRef.injector.get(ChangeDetectorRef).markForCheck();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (isDirective(this.content)) {
            this.content.check();
        }
    }
}
PolymorpheusOutletComponent.decorators = [
    { type: Component, args: [{
                selector: '[polymorpheus-outlet]',
                template: "<ng-container\r\n    *ngIf=\"isAdvanced(content)\"\r\n    #mutableContext=\"context\"\r\n    context\r\n    [ngTemplateOutlet]=\"getTemplate(content, component)\"\r\n    [ngTemplateOutletContext]=\"context\"\r\n>\r\n    <ng-template #component>\r\n        <ng-container\r\n            *ngIf=\"guard(content)\"\r\n            [ngComponentOutlet]=\"content.component\"\r\n            [ngComponentOutletInjector]=\"content | injector : mutableContext.context\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n<ng-container *ngIf=\"primitive\">\r\n    <ng-container *ngIf=\"!template; else child\">{{primitive}}</ng-container>\r\n    <ng-template #child>\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"template\"\r\n            [ngTemplateOutletContext]=\"{$implicit: primitive}\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PolymorpheusOutletComponent.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    outlet: [{ type: ViewChild, args: [NgComponentOutlet,] }],
    content: [{ type: Input }],
    context: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.template;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.outlet;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.content;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.context;
}
/**
 * @template C
 * @param {?} content
 * @return {?}
 */
function isDirective(content) {
    return content instanceof PolymorpheusTemplate;
}
/**
 * @template C
 * @param {?} content
 * @return {?}
 */
function isComponent(content) {
    return content instanceof PolymorpheusComponent;
}
/**
 * @template C
 * @param {?} content
 * @return {?}
 */
function isTemplate(content) {
    return isDirective(content) || content instanceof TemplateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cy8iLCJzb3VyY2VzIjpbIm91dGxldC9vdXRsZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBRVQsWUFBWSxFQUVaLEtBQUssRUFHTCxXQUFXLEVBQ1gsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7OztBQVk1RCxNQUFNLE9BQU8sMkJBQTJCO0lBTHhDO1FBT2EsYUFBUSxHQUEwQixJQUFJLENBQUM7UUFNaEQsWUFBTyxHQUFrQyxJQUFJLENBQUM7SUE2RGxELENBQUM7Ozs7SUF4REcsSUFBSSxTQUFTO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELE9BQU8sT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLFVBQVU7WUFDckMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN2QixDQUFDOzs7OztJQUVELFVBQVUsQ0FDTixPQUFzQztRQUt0QyxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUNQLE9BR29CLEVBQ3BCLFlBQTRCO1FBRTVCLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sWUFBWSxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUM3RCxDQUFDOzs7OztJQUVELEtBQUssQ0FDRCxPQUFzQztRQUV0QyxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQWdCOzs7Y0FFbkMsWUFBWSxHQUFHLG1CQUFBLENBQUMsQ0FBQyxPQUFPO1lBQzFCLE9BQU87WUFDUCxJQUFJLENBQUMsTUFBTTtZQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBdUM7UUFFeEUsSUFBSSxZQUFZLEVBQUU7WUFDZCxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQy9EO0lBQ0wsQ0FBQzs7OztJQUVELFNBQVM7UUFDTCxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUM7OztZQXpFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsbTRCQUFxQztnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQ7Ozt1QkFFSSxZQUFZLFNBQUMsV0FBVztxQkFHeEIsU0FBUyxTQUFDLGlCQUFpQjtzQkFHM0IsS0FBSztzQkFHTCxLQUFLOzs7O0lBVE4sK0NBQ2dEOztJQUVoRCw2Q0FDb0M7O0lBRXBDLDhDQUM4Qzs7SUFFOUMsOENBQ1k7Ozs7Ozs7QUE0RGhCLFNBQVMsV0FBVyxDQUNoQixPQUFzQztJQUV0QyxPQUFPLE9BQU8sWUFBWSxvQkFBb0IsQ0FBQztBQUNuRCxDQUFDOzs7Ozs7QUFFRCxTQUFTLFdBQVcsQ0FDaEIsT0FBc0M7SUFFdEMsT0FBTyxPQUFPLFlBQVkscUJBQXFCLENBQUM7QUFDcEQsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxVQUFVLENBQ2YsT0FBc0M7SUFFdEMsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxZQUFZLFdBQVcsQ0FBQztBQUNsRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ0NvbXBvbmVudE91dGxldH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbXBvbmVudFJlZixcbiAgICBDb250ZW50Q2hpbGQsXG4gICAgRG9DaGVjayxcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgU2ltcGxlQ2hhbmdlcyxcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnR9IGZyb20gJy4uL2NsYXNzZXMvY29tcG9uZW50JztcbmltcG9ydCB7UG9seW1vcnBoZXVzVGVtcGxhdGV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvdGVtcGxhdGUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICcuLi90eXBlcy9jb250ZW50JztcbmltcG9ydCB7UG9seW1vcnBoZXVzUHJpbWl0aXZlfSBmcm9tICcuLi90eXBlcy9wcmltaXRpdmUnO1xuXG4vKipcbiAqIE91dGxldCBpbnN0YW50aWF0aW5nIHtAbGluayBQb2x5bW9ycGhldXNDb250ZW50fSB3aXRoIGdpdmVuIGNvbnRleHRcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdbcG9seW1vcnBoZXVzLW91dGxldF0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9vdXRsZXQudGVtcGxhdGUuaHRtbCcsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFBvbHltb3JwaGV1c091dGxldENvbXBvbmVudDxDIGV4dGVuZHMgb2JqZWN0PiBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uQ2hhbmdlcyB7XG4gICAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZilcbiAgICByZWFkb25seSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8Qz4gfCBudWxsID0gbnVsbDtcblxuICAgIEBWaWV3Q2hpbGQoTmdDb21wb25lbnRPdXRsZXQpXG4gICAgcmVhZG9ubHkgb3V0bGV0PzogTmdDb21wb25lbnRPdXRsZXQ7XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgY29udGV4dCE6IEM7XG5cbiAgICBnZXQgcHJpbWl0aXZlKCk6IFBvbHltb3JwaGV1c1ByaW1pdGl2ZSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50IHx8IHRoaXMuaXNBZHZhbmNlZCh0aGlzLmNvbnRlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuY29udGVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnQodGhpcy5jb250ZXh0KVxuICAgICAgICAgICAgOiB0aGlzLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgaXNBZHZhbmNlZChcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwsXG4gICAgKTogY29udGVudCBpc1xuICAgICAgICB8IFBvbHltb3JwaGV1c1RlbXBsYXRlPEM+XG4gICAgICAgIHwgVGVtcGxhdGVSZWY8Qz5cbiAgICAgICAgfCBQb2x5bW9ycGhldXNDb21wb25lbnQ8b2JqZWN0LCBDPiB7XG4gICAgICAgIHJldHVybiBpc1RlbXBsYXRlKGNvbnRlbnQpIHx8IGlzQ29tcG9uZW50KGNvbnRlbnQpO1xuICAgIH1cblxuICAgIGdldFRlbXBsYXRlKFxuICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgfCBQb2x5bW9ycGhldXNDb21wb25lbnQ8b2JqZWN0LCBDPlxuICAgICAgICAgICAgfCBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPlxuICAgICAgICAgICAgfCBUZW1wbGF0ZVJlZjxDPixcbiAgICAgICAgY29tcG9uZW50VG1wOiBUZW1wbGF0ZVJlZjxDPixcbiAgICApOiBUZW1wbGF0ZVJlZjxDPiB7XG4gICAgICAgIGlmIChpc0NvbXBvbmVudChjb250ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0RpcmVjdGl2ZShjb250ZW50KSA/IGNvbnRlbnQudGVtcGxhdGUgOiBjb250ZW50O1xuICAgIH1cblxuICAgIGd1YXJkKFxuICAgICAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+IHwgbnVsbCxcbiAgICApOiBjb250ZW50IGlzIFBvbHltb3JwaGV1c0NvbXBvbmVudDxvYmplY3QsIEM+IHtcbiAgICAgICAgcmV0dXJuIGlzQ29tcG9uZW50KGNvbnRlbnQpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKHtjb250ZW50LCBjb250ZXh0fTogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICAvLyBUT0RPOiBLZWVwIGFuIGV5ZSBvbiBwcml2YXRlIGZpZWxkLCBuYW1lIGNhbiBjaGFuZ2VcbiAgICAgICAgY29uc3QgY29tcG9uZW50UmVmID0gKCFjb250ZW50ICYmXG4gICAgICAgICAgICBjb250ZXh0ICYmXG4gICAgICAgICAgICB0aGlzLm91dGxldCAmJlxuICAgICAgICAgICAgdGhpcy5vdXRsZXRbJ19jb21wb25lbnRSZWYnXSkgYXMgQ29tcG9uZW50UmVmPG9iamVjdD4gfCBudWxsIHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudFJlZikge1xuICAgICAgICAgICAgY29tcG9uZW50UmVmLmluamVjdG9yLmdldChDaGFuZ2VEZXRlY3RvclJlZikubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmIChpc0RpcmVjdGl2ZSh0aGlzLmNvbnRlbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuY2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RpdmU8QyBleHRlbmRzIG9iamVjdD4oXG4gICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwsXG4pOiBjb250ZW50IGlzIFBvbHltb3JwaGV1c1RlbXBsYXRlPEM+IHtcbiAgICByZXR1cm4gY29udGVudCBpbnN0YW5jZW9mIFBvbHltb3JwaGV1c1RlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBpc0NvbXBvbmVudDxDIGV4dGVuZHMgb2JqZWN0PihcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+IHwgbnVsbCxcbik6IGNvbnRlbnQgaXMgUG9seW1vcnBoZXVzQ29tcG9uZW50PG9iamVjdCwgQz4ge1xuICAgIHJldHVybiBjb250ZW50IGluc3RhbmNlb2YgUG9seW1vcnBoZXVzQ29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiBpc1RlbXBsYXRlPEMgZXh0ZW5kcyBvYmplY3Q+KFxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsLFxuKTogY29udGVudCBpcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPiB8IFRlbXBsYXRlUmVmPEM+IHtcbiAgICByZXR1cm4gaXNEaXJlY3RpdmUoY29udGVudCkgfHwgY29udGVudCBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xufVxuIl19