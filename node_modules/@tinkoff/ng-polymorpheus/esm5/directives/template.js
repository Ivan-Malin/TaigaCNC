/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Inject, Self, TemplateRef } from '@angular/core';
/**
 * ng-template wrapper directive also storing {\@link ChangeDetectorRef} to properly handle change detection.
 * @template T
 */
var PolymorpheusTemplate = /** @class */ (function () {
    function PolymorpheusTemplate(template, changeDetectorRef) {
        this.template = template;
        this.changeDetectorRef = changeDetectorRef;
    }
    /**
     * @return {?}
     */
    PolymorpheusTemplate.prototype.check = /**
     * @return {?}
     */
    function () {
        this.changeDetectorRef.markForCheck();
    };
    PolymorpheusTemplate.decorators = [
        { type: Directive, args: [{
                    selector: 'ng-template[polymorpheus]',
                    exportAs: 'polymorpheus',
                },] }
    ];
    /** @nocollapse */
    PolymorpheusTemplate.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Inject, args: [TemplateRef,] }, { type: Self }] },
        { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] }
    ]; };
    return PolymorpheusTemplate;
}());
export { PolymorpheusTemplate };
if (false) {
    /** @type {?} */
    PolymorpheusTemplate.prototype.template;
    /**
     * @type {?}
     * @private
     */
    PolymorpheusTemplate.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGlua29mZi9uZy1wb2x5bW9ycGhldXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7OztBQUt0RjtJQUtJLDhCQUdhLFFBQXdCLEVBQ1csaUJBQW9DO1FBRHZFLGFBQVEsR0FBUixRQUFRLENBQWdCO1FBQ1csc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtJQUNqRixDQUFDOzs7O0lBRUosb0NBQUs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7O2dCQWRKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxRQUFRLEVBQUUsY0FBYztpQkFDM0I7Ozs7Z0JBUm1ELFdBQVcsdUJBV3RELE1BQU0sU0FBQyxXQUFXLGNBQ2xCLElBQUk7Z0JBWkwsaUJBQWlCLHVCQWNoQixNQUFNLFNBQUMsaUJBQWlCOztJQU1qQywyQkFBQztDQUFBLEFBZkQsSUFlQztTQVhZLG9CQUFvQjs7O0lBRXpCLHdDQUVpQzs7Ozs7SUFDakMsaURBQWdGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBJbmplY3QsIFNlbGYsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBuZy10ZW1wbGF0ZSB3cmFwcGVyIGRpcmVjdGl2ZSBhbHNvIHN0b3Jpbmcge0BsaW5rIENoYW5nZURldGVjdG9yUmVmfSB0byBwcm9wZXJseSBoYW5kbGUgY2hhbmdlIGRldGVjdGlvbi5cclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICduZy10ZW1wbGF0ZVtwb2x5bW9ycGhldXNdJyxcclxuICAgIGV4cG9ydEFzOiAncG9seW1vcnBoZXVzJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvbHltb3JwaGV1c1RlbXBsYXRlPFQgZXh0ZW5kcyBvYmplY3Q+IHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpXHJcbiAgICAgICAgQFNlbGYoKVxyXG4gICAgICAgIHJlYWRvbmx5IHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxUPixcclxuICAgICAgICBASW5qZWN0KENoYW5nZURldGVjdG9yUmVmKSBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICkge31cclxuXHJcbiAgICBjaGVjaygpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==