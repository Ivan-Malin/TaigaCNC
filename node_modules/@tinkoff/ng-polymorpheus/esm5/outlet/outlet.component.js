/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgComponentOutlet } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, TemplateRef, ViewChild, } from '@angular/core';
import { PolymorpheusComponent } from '../classes/component';
import { PolymorpheusTemplate } from '../directives/template';
/**
 * Outlet instantiating {\@link PolymorpheusContent} with given context
 * @template C
 */
var PolymorpheusOutletComponent = /** @class */ (function () {
    function PolymorpheusOutletComponent() {
        this.template = null;
        this.content = null;
    }
    Object.defineProperty(PolymorpheusOutletComponent.prototype, "primitive", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.content || this.isAdvanced(this.content)) {
                return '';
            }
            return typeof this.content === 'function'
                ? this.content(this.context)
                : this.content;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} content
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.isAdvanced = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return isTemplate(content) || isComponent(content);
    };
    /**
     * @param {?} content
     * @param {?} componentTmp
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.getTemplate = /**
     * @param {?} content
     * @param {?} componentTmp
     * @return {?}
     */
    function (content, componentTmp) {
        if (isComponent(content)) {
            return componentTmp;
        }
        return isDirective(content) ? content.template : content;
    };
    /**
     * @param {?} content
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.guard = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return isComponent(content);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.ngOnChanges = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var content = _a.content, context = _a.context;
        // TODO: Keep an eye on private field, name can change
        /** @type {?} */
        var componentRef = (/** @type {?} */ ((!content &&
            context &&
            this.outlet &&
            this.outlet['_componentRef'])));
        if (componentRef) {
            componentRef.injector.get(ChangeDetectorRef).markForCheck();
        }
    };
    /**
     * @return {?}
     */
    PolymorpheusOutletComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (isDirective(this.content)) {
            this.content.check();
        }
    };
    PolymorpheusOutletComponent.decorators = [
        { type: Component, args: [{
                    selector: '[polymorpheus-outlet]',
                    template: "<ng-container\r\n    *ngIf=\"isAdvanced(content)\"\r\n    #mutableContext=\"context\"\r\n    context\r\n    [ngTemplateOutlet]=\"getTemplate(content, component)\"\r\n    [ngTemplateOutletContext]=\"context\"\r\n>\r\n    <ng-template #component>\r\n        <ng-container\r\n            *ngIf=\"guard(content)\"\r\n            [ngComponentOutlet]=\"content.component\"\r\n            [ngComponentOutletInjector]=\"content | injector : mutableContext.context\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n<ng-container *ngIf=\"primitive\">\r\n    <ng-container *ngIf=\"!template; else child\">{{primitive}}</ng-container>\r\n    <ng-template #child>\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"template\"\r\n            [ngTemplateOutletContext]=\"{$implicit: primitive}\"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ng-container>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PolymorpheusOutletComponent.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        outlet: [{ type: ViewChild, args: [NgComponentOutlet,] }],
        content: [{ type: Input }],
        context: [{ type: Input }]
    };
    return PolymorpheusOutletComponent;
}());
export { PolymorpheusOutletComponent };
if (false) {
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.template;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.outlet;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.content;
    /** @type {?} */
    PolymorpheusOutletComponent.prototype.context;
}
/**
 * @template C
 * @param {?} content
 * @return {?}
 */
function isDirective(content) {
    return content instanceof PolymorpheusTemplate;
}
/**
 * @template C
 * @param {?} content
 * @return {?}
 */
function isComponent(content) {
    return content instanceof PolymorpheusComponent;
}
/**
 * @template C
 * @param {?} content
 * @return {?}
 */
function isTemplate(content) {
    return isDirective(content) || content instanceof TemplateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cy8iLCJzb3VyY2VzIjpbIm91dGxldC9vdXRsZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBRVQsWUFBWSxFQUVaLEtBQUssRUFHTCxXQUFXLEVBQ1gsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7OztBQU81RDtJQUFBO1FBT2EsYUFBUSxHQUEwQixJQUFJLENBQUM7UUFNaEQsWUFBTyxHQUFrQyxJQUFJLENBQUM7SUE2RGxELENBQUM7SUF4REcsc0JBQUksa0RBQVM7Ozs7UUFBYjtZQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNoRCxPQUFPLEVBQUUsQ0FBQzthQUNiO1lBRUQsT0FBTyxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssVUFBVTtnQkFDckMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7Ozs7O0lBRUQsZ0RBQVU7Ozs7SUFBVixVQUNJLE9BQXNDO1FBS3RDLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7Ozs7SUFFRCxpREFBVzs7Ozs7SUFBWCxVQUNJLE9BR29CLEVBQ3BCLFlBQTRCO1FBRTVCLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sWUFBWSxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUM3RCxDQUFDOzs7OztJQUVELDJDQUFLOzs7O0lBQUwsVUFDSSxPQUFzQztRQUV0QyxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELGlEQUFXOzs7O0lBQVgsVUFBWSxFQUFpQztZQUFoQyxvQkFBTyxFQUFFLG9CQUFPOzs7WUFFbkIsWUFBWSxHQUFHLG1CQUFBLENBQUMsQ0FBQyxPQUFPO1lBQzFCLE9BQU87WUFDUCxJQUFJLENBQUMsTUFBTTtZQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBdUM7UUFFeEUsSUFBSSxZQUFZLEVBQUU7WUFDZCxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQy9EO0lBQ0wsQ0FBQzs7OztJQUVELCtDQUFTOzs7SUFBVDtRQUNJLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQzs7Z0JBekVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxtNEJBQXFDO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OzsyQkFFSSxZQUFZLFNBQUMsV0FBVzt5QkFHeEIsU0FBUyxTQUFDLGlCQUFpQjswQkFHM0IsS0FBSzswQkFHTCxLQUFLOztJQTJEVixrQ0FBQztDQUFBLEFBMUVELElBMEVDO1NBckVZLDJCQUEyQjs7O0lBQ3BDLCtDQUNnRDs7SUFFaEQsNkNBQ29DOztJQUVwQyw4Q0FDOEM7O0lBRTlDLDhDQUNZOzs7Ozs7O0FBNERoQixTQUFTLFdBQVcsQ0FDaEIsT0FBc0M7SUFFdEMsT0FBTyxPQUFPLFlBQVksb0JBQW9CLENBQUM7QUFDbkQsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxXQUFXLENBQ2hCLE9BQXNDO0lBRXRDLE9BQU8sT0FBTyxZQUFZLHFCQUFxQixDQUFDO0FBQ3BELENBQUM7Ozs7OztBQUVELFNBQVMsVUFBVSxDQUNmLE9BQXNDO0lBRXRDLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sWUFBWSxXQUFXLENBQUM7QUFDbEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdDb21wb25lbnRPdXRsZXR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBDb21wb25lbnRSZWYsXG4gICAgQ29udGVudENoaWxkLFxuICAgIERvQ2hlY2ssXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIFNpbXBsZUNoYW5nZXMsXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50fSBmcm9tICcuLi9jbGFzc2VzL2NvbXBvbmVudCc7XG5pbXBvcnQge1BvbHltb3JwaGV1c1RlbXBsYXRlfSBmcm9tICcuLi9kaXJlY3RpdmVzL3RlbXBsYXRlJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnLi4vdHlwZXMvY29udGVudCc7XG5pbXBvcnQge1BvbHltb3JwaGV1c1ByaW1pdGl2ZX0gZnJvbSAnLi4vdHlwZXMvcHJpbWl0aXZlJztcblxuLyoqXG4gKiBPdXRsZXQgaW5zdGFudGlhdGluZyB7QGxpbmsgUG9seW1vcnBoZXVzQ29udGVudH0gd2l0aCBnaXZlbiBjb250ZXh0XG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnW3BvbHltb3JwaGV1cy1vdXRsZXRdJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vb3V0bGV0LnRlbXBsYXRlLmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQb2x5bW9ycGhldXNPdXRsZXRDb21wb25lbnQ8QyBleHRlbmRzIG9iamVjdD4gaW1wbGVtZW50cyBEb0NoZWNrLCBPbkNoYW5nZXMge1xuICAgIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpXG4gICAgcmVhZG9ubHkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPEM+IHwgbnVsbCA9IG51bGw7XG5cbiAgICBAVmlld0NoaWxkKE5nQ29tcG9uZW50T3V0bGV0KVxuICAgIHJlYWRvbmx5IG91dGxldD86IE5nQ29tcG9uZW50T3V0bGV0O1xuXG4gICAgQElucHV0KClcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+IHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbnRleHQhOiBDO1xuXG4gICAgZ2V0IHByaW1pdGl2ZSgpOiBQb2x5bW9ycGhldXNQcmltaXRpdmUge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudCB8fCB0aGlzLmlzQWR2YW5jZWQodGhpcy5jb250ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmNvbnRlbnQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50KHRoaXMuY29udGV4dClcbiAgICAgICAgICAgIDogdGhpcy5jb250ZW50O1xuICAgIH1cblxuICAgIGlzQWR2YW5jZWQoXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsLFxuICAgICk6IGNvbnRlbnQgaXNcbiAgICAgICAgfCBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPlxuICAgICAgICB8IFRlbXBsYXRlUmVmPEM+XG4gICAgICAgIHwgUG9seW1vcnBoZXVzQ29tcG9uZW50PG9iamVjdCwgQz4ge1xuICAgICAgICByZXR1cm4gaXNUZW1wbGF0ZShjb250ZW50KSB8fCBpc0NvbXBvbmVudChjb250ZW50KTtcbiAgICB9XG5cbiAgICBnZXRUZW1wbGF0ZShcbiAgICAgICAgY29udGVudDpcbiAgICAgICAgICAgIHwgUG9seW1vcnBoZXVzQ29tcG9uZW50PG9iamVjdCwgQz5cbiAgICAgICAgICAgIHwgUG9seW1vcnBoZXVzVGVtcGxhdGU8Qz5cbiAgICAgICAgICAgIHwgVGVtcGxhdGVSZWY8Qz4sXG4gICAgICAgIGNvbXBvbmVudFRtcDogVGVtcGxhdGVSZWY8Qz4sXG4gICAgKTogVGVtcGxhdGVSZWY8Qz4ge1xuICAgICAgICBpZiAoaXNDb21wb25lbnQoY29udGVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRUbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNEaXJlY3RpdmUoY29udGVudCkgPyBjb250ZW50LnRlbXBsYXRlIDogY29udGVudDtcbiAgICB9XG5cbiAgICBndWFyZChcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwsXG4gICAgKTogY29udGVudCBpcyBQb2x5bW9ycGhldXNDb21wb25lbnQ8b2JqZWN0LCBDPiB7XG4gICAgICAgIHJldHVybiBpc0NvbXBvbmVudChjb250ZW50KTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyh7Y29udGVudCwgY29udGV4dH06IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgLy8gVE9ETzogS2VlcCBhbiBleWUgb24gcHJpdmF0ZSBmaWVsZCwgbmFtZSBjYW4gY2hhbmdlXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9ICghY29udGVudCAmJlxuICAgICAgICAgICAgY29udGV4dCAmJlxuICAgICAgICAgICAgdGhpcy5vdXRsZXQgJiZcbiAgICAgICAgICAgIHRoaXMub3V0bGV0WydfY29tcG9uZW50UmVmJ10pIGFzIENvbXBvbmVudFJlZjxvYmplY3Q+IHwgbnVsbCB8IGZhbHNlO1xuXG4gICAgICAgIGlmIChjb21wb25lbnRSZWYpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFJlZi5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdEb0NoZWNrKCkge1xuICAgICAgICBpZiAoaXNEaXJlY3RpdmUodGhpcy5jb250ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LmNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0aXZlPEMgZXh0ZW5kcyBvYmplY3Q+KFxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4gfCBudWxsLFxuKTogY29udGVudCBpcyBQb2x5bW9ycGhldXNUZW1wbGF0ZTxDPiB7XG4gICAgcmV0dXJuIGNvbnRlbnQgaW5zdGFuY2VvZiBQb2x5bW9ycGhldXNUZW1wbGF0ZTtcbn1cblxuZnVuY3Rpb24gaXNDb21wb25lbnQ8QyBleHRlbmRzIG9iamVjdD4oXG4gICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPiB8IG51bGwsXG4pOiBjb250ZW50IGlzIFBvbHltb3JwaGV1c0NvbXBvbmVudDxvYmplY3QsIEM+IHtcbiAgICByZXR1cm4gY29udGVudCBpbnN0YW5jZW9mIFBvbHltb3JwaGV1c0NvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gaXNUZW1wbGF0ZTxDIGV4dGVuZHMgb2JqZWN0PihcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+IHwgbnVsbCxcbik6IGNvbnRlbnQgaXMgUG9seW1vcnBoZXVzVGVtcGxhdGU8Qz4gfCBUZW1wbGF0ZVJlZjxDPiB7XG4gICAgcmV0dXJuIGlzRGlyZWN0aXZlKGNvbnRlbnQpIHx8IGNvbnRlbnQgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcbn1cbiJdfQ==