{
	"info": {
		"_postman_id": "aa878b10-ca81-4ed6-ad60-544e48fc2681",
		"name": "taiga-next e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Main",
			"item": [
				{
					"name": "auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}/api/v2/auth/token/refresh",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "users me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/me",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "new workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Workflow & next request to execute",
									"// var i = 0;",
									"// console.log(\"Creating 3 workspaces\");",
									"// while (i < 3 ) {",
									"//     postman.setNextRequest(\"new workspace\");",
									"//     i++;",
									"// };",
									"",
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"ws-slug\", pm.response.json().slug);",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"my workspace\",\n  \"color\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "workspace by slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "my workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "new project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Workflow & next request to execute",
									"// var i = 0;",
									"// console.log(\"Creating 3 projects\");",
									"// while (i < 3 ) {",
									"//     postman.setNextRequest(\"new project\");    ",
									"//     i++;",
									"// };",
									"",
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-slug\", pm.response.json().slug);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceSlug",
									"value": "{{ws-slug}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "workspace's projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "project by slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update project role permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_project\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "project role permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "update project public permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\",\n        \"modify_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/public-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"public-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "project public permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/public-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"public-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 not-found uri (starlette)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Not Found\");",
									"    pm.expect(jsonData.error.message).to.eql(\"Nothing matches the given URI\");    ",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/wrong_url",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"wrong_url"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 not-found ws",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Not Found\");",
									"    pm.expect(jsonData.error.message).to.eql(\"Workspace wrong_ws_slug does not exist\");    ",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/wrong_ws_slug",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"wrong_ws_slug"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 unauthorized auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"authorization-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Unauthorized\");",
									"    pm.expect(jsonData.error.message).to.eql(\"Invalid token or no active account found with the given credentials\");    ",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrong_password\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "422 validation error auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"validation-error\");",
									"    pm.expect(jsonData.error.message).to.eql(\"Unable to fulfill the request due to semantic errors\");    ",
									"    pm.expect(jsonData.error.detail[0].loc[1]).to.eql(\"password\");",
									"    pm.expect(jsonData.error.detail[0].msg).to.eql(\"field required\");",
									"    pm.expect(jsonData.error.detail[0].type).to.eql(\"value_error.missing\");",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"passXXXXXXXXXXXXXXXword\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 bad request perm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Bad Request\");",
									"    pm.expect(jsonData.error.message).to.eql(\"One or more permissions are not valid. Maybe, there is a typo.\");",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"wrong_permission\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "402 forbidden perm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"forbidden-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Forbidden\");",
									"    pm.expect(jsonData.error.message).to.eql(\"User doesn't have permissions to perform this action\");",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"wrong_permission\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "my.workspaces",
			"item": [
				{
					"name": "auth as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    var someWsHaveLatestProjects = false;",
									"    var someWsHaveNoLatestProjects = false;",
									"    for (const [i, ws] of jsonRes.entries()) {",
									"        pm.expect(ws.isPremium).to.be.true;",
									"        ",
									"        // just entered once (by the first workspace with latestProjects)",
									"        if (!someWsHaveLatestProjects && ws.latestProjects.length >0) {",
									"            someWsHaveLatestProjects = true;",
									"            pm.expect(ws.totalProjects).to.be.above(0);",
									"            pm.expect(ws.hasProjects).to.be.true;",
									"            ",
									"            // check latestProject's properties",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logo\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logoSmall\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logoBig\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"name\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"slug\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"description\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"color\");",
									"        }",
									"        // just entered once (by the first workspace with no latestProjects)",
									"        if (!someWsHaveNoLatestProjects && ws.latestProjects.length ==0) {",
									"            someWsHaveNoLatestProjects = true;",
									"            pm.expect(ws.totalProjects).to.be.eql(0);",
									"        }",
									"        // check once the workspace's properties",
									"        if (i == 0) {",
									"            pm.expect(ws).to.have.property(\"name\");",
									"            pm.expect(ws).to.have.property(\"slug\");",
									"            pm.expect(ws).to.have.property(\"color\");",
									"            pm.expect(ws).to.have.property(\"latestProjects\");",
									"            pm.expect(ws).to.have.property(\"totalProjects\");",
									"            pm.expect(ws).to.have.property(\"hasProjects\");",
									"            pm.expect(ws).to.have.property(\"myRole\");",
									"            pm.expect(ws).to.have.property(\"isPremium\");",
									"            pm.expect(ws).to.have.property(\"isOwner\");",
									"        }",
									"    };",
									"    pm.expect(someWsHaveLatestProjects).to.be.true;",
									"    pm.expect(someWsHaveNoLatestProjects).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"    postman.setNextRequest(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "workspaces.ws.projects",
			"item": [
				{
					"name": "N/A auth as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save workspace slugs in environment\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var maxLatestProjects = 0;",
									"    for (const [i, ws] of jsonRes.entries()) {",
									"        // Set the workspace with most latestProjects for the next request",
									"        console.log(maxLatestProjects + \" - \" + ws.latestProjects.length)",
									"        if (ws.latestProjects.length > maxLatestProjects) {",
									"            pm.environment.set(\"ws-slug\", ws.slug);",
									"            maxLatestProjects = ws.latestProjects.length;",
									"        }",
									"    }",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.ws.projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"pm.test(\"Check values\", function () {",
									"    res = pm.response.json();",
									"    pm.expect(res).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug-1000-1}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug-1000-1}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth as user1001",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1001\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "workspace projects for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"pm.test(\"Check values\", function () {",
									"    res = pm.response.json();",
									"    pm.expect(res).to.have.lengthOf(3);",
									"    var names = [];",
									"    for (var pj of res) { names.push(pj.name); }",
									"    pm.expect(\"user1001 is pj member\").to.be.oneOf(names);",
									"    pm.expect(\"ws members allowed\").to.be.oneOf(names);",
									"    pm.expect(\"user1001 is pj-owner\").to.be.oneOf(names);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug-1000-1}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug-1000-1}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "workspace projects for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"pm.test(\"Check values\", function () {",
									"    res = pm.response.json();",
									"    pm.expect(res).to.have.lengthOf(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug-1000-2}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug-1000-2}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "workspace projects for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"pm.test(\"Check values\", function () {",
									"    res = pm.response.json();",
									"    pm.expect(res).to.have.lengthOf(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug-1000-3}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug-1000-3}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "workspace projects for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"pm.test(\"Check values\", function () {",
									"    res = pm.response.json();",
									"    pm.expect(res).to.have.lengthOf(1);",
									"        var names = [];",
									"    for (var pj of res) { names.push(pj.name); }",
									"    pm.expect(\"user1001 is pj member\").to.be.oneOf(names);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug-1000-4}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug-1000-4}}",
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.pj.workspace_member_permissions",
			"item": [
				{
					"name": "auth as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "my workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save projects slugs in environment\", function () {",
									"    res = pm.response.json();",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == true) {",
									"            pj = ws.latestProjects[0]",
									"            pm.environment.set(\"pj-slug-p\", pj.slug);",
									"            break;",
									"        }   ",
									"    }   ",
									"",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == false) {",
									"            pj = ws.latestProjects[0]",
									"            pm.environment.set(\"pj-slug-no-p\", pj.slug);",
									"            break;",
									"        }   ",
									"    }    ",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "project workspace member permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug-p}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug-p}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "update project workspace member permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\",\n        \"modify_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug-p}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug-p}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 project workspace member permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug-no-p}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug-no-p}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update project workspace member permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than the expected ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\",\n        \"modify_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug-no-p}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug-no-p}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}