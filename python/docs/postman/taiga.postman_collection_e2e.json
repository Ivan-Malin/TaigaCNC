{
	"info": {
		"_postman_id": "089fb793-a67c-4a60-9dbb-746b923ea2d6",
		"name": "taiga-next e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "200 auth.token (user1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate the API contract",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 auth.token.refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}/api/v2/auth/token/refresh",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 auth.token.deny",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.unset(\"auth_token\");",
									"    pm.environment.unset(\"refresh_token\");",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}/api/v2/auth/token/deny",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"token",
								"deny"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 users.me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"username\");",
									"    pm.expect(jsonRes).to.have.property(\"fullName\");",
									"    pm.expect(jsonRes).to.have.property(\"email\");",
									"    pm.expect(jsonRes).to.have.property(\"lang\");",
									"    pm.expect(jsonRes).to.have.property(\"theme\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/me",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"username\");",
									"    pm.expect(jsonRes).to.have.property(\"fullName\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"ada.lovelace{{$randomInt}}@email.com\",\n  \"fullName\": \"Ada Lovelace\",\n  \"password\": \"CorrectP4ssword%\",\n  \"acceptTerms\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 users.verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"eyJ0eX.eyJ0eXDJs042HJ9Qz-IhCP_Caxys5Iy8Vo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/verify",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"verify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "workspaces",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"ws-slug\", pm.response.json().slug);",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"isPremium\");",
									"",
									"    pm.expect(jsonRes.name).to.be.eql(\"My workspace\");",
									"    pm.expect(jsonRes.color).to.be.eql(1);",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(8);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My workspace\",\n  \"color\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.{w}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"    pm.expect(jsonRes).to.have.property(\"isPremium\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(8);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "workspaces.{w}.projects",
			"item": [
				{
					"name": "N/A log in as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save a workspace slug in environment\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var wsWithLatesPtoject = false;",
									"    for (const [i, ws] of jsonRes.entries()) {",
									"        // store a workspace with at least a latestProject",
									"        if (ws.latestProjects.length > 0) {",
									"            pm.environment.set(\"ws-slug\", ws.slug);",
									"            wsWithLatesPtoject=true;",
									"            break;",
									"        }",
									"    }",
									"    // Required for next tests",
									"    pm.expect(wsWithLatesPtoject).to.be.true;",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.{w}.projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Check values\", function () {",
									"    jsonRes = pm.response.json();",
									"    // expect to have some projects",
									"    pm.expect(jsonRes.length).to.be.above(0);",
									"    ",
									"    // expect to contain the right fields",
									"    var firstProject = jsonRes[0]",
									"    pm.expect(firstProject).to.have.property(\"logo\");",
									"    pm.expect(firstProject).to.have.property(\"logoSmall\");",
									"    pm.expect(firstProject).to.have.property(\"logoBig\");",
									"    pm.expect(firstProject).to.have.property(\"name\");",
									"    pm.expect(firstProject).to.have.property(\"slug\");",
									"    pm.expect(firstProject).to.have.property(\"description\");",
									"    pm.expect(firstProject).to.have.property(\"color\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(firstProject).length;",
									"    pm.expect(numOfReturnedFields).to.equal(7);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug}}",
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects",
			"item": [
				{
					"name": "N/A auth.token (user1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-slug\", jsonRes[0].slug);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-slug\", pm.response.json().slug);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoBig\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"amIAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"myPermissions\");",
									"",
									"    pm.expect(jsonRes.description).to.be.eql(\"My description\");",
									"    pm.expect(jsonRes.name).to.be.eql(\"My project\");",
									"",
									"    var workspace = jsonRes.workspace;",
									"    pm.expect(workspace).to.have.property(\"name\");",
									"    pm.expect(workspace).to.have.property(\"myRole\");",
									"    pm.expect(workspace).to.have.property(\"slug\");",
									"",
									"    pm.expect(workspace.slug).to.be.eql(pm.environment.get(\"ws-slug\"));",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(workspace).length;",
									"    pm.expect(numOfReturnedFields).to.equal(4);",
									"    numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceSlug",
									"value": "{{ws-slug}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoBig\");",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"description\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"amIAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"myPermissions\");",
									"",
									"    var workspace = jsonRes.workspace;",
									"    pm.expect(workspace).to.have.property(\"name\");",
									"    pm.expect(workspace).to.have.property(\"slug\");",
									"    pm.expect(workspace).to.have.property(\"myRole\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(workspace).length;",
									"    pm.expect(numOfReturnedFields).to.equal(4);",
									"    numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.roles.{r}.permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"order\");",
									"    pm.expect(jsonRes).to.have.property(\"numMembers\");",
									"    pm.expect(jsonRes).to.have.property(\"isAdmin\");",
									"    ",
									"    pm.expect(jsonRes.permissions).to.include(\"view_us\")",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    var role = jsonRes[0]",
									"    pm.expect(role).to.have.property(\"id\");",
									"    pm.expect(role).to.have.property(\"name\");",
									"    pm.expect(role).to.have.property(\"slug\");",
									"    pm.expect(role).to.have.property(\"order\");",
									"    pm.expect(role).to.have.property(\"numMembers\");",
									"    pm.expect(role).to.have.property(\"isAdmin\");",
									"",
									"    pm.expect(role.permissions).to.be.length.above(0);",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes[0]).length;",
									"    pm.expect(numOfReturnedFields).to.equal(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.public-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_us');",
									"    pm.expect(jsonRes).to.include('modify_us');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\",\n        \"modify_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/public-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"public-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.public-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_us');",
									"    pm.expect(jsonRes).to.include('modify_us');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/public-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"public-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.{w}.projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var project = jsonRes[0];",
									"    // Validate response API fields",
									"    pm.expect(project).to.have.property(\"logo\");",
									"    pm.expect(project).to.have.property(\"logoSmall\");",
									"    pm.expect(project).to.have.property(\"logoBig\");",
									"    pm.expect(project).to.have.property(\"name\");",
									"    pm.expect(project).to.have.property(\"slug\");",
									"    pm.expect(project).to.have.property(\"description\");",
									"    pm.expect(project).to.have.property(\"color\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(project).length;",
									"    pm.expect(numOfReturnedFields).to.equal(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-slug}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-slug}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"",
									"    var invitation = jsonRes[0]    ",
									"    pm.expect(invitation).to.have.property(\"userId\");",
									"    pm.expect(invitation).to.have.property(\"projectId\");",
									"    pm.expect(invitation).to.have.property(\"roleId\");",
									"    pm.expect(invitation).to.have.property(\"email\");",
									"    pm.expect(invitation.email).to.be.eql(\"user3@taiga.demo\");",
									"",
									"    var invitation = jsonRes[1]    ",
									"    pm.expect(invitation).to.have.property(\"userId\");",
									"    pm.expect(invitation).to.have.property(\"projectId\");",
									"    pm.expect(invitation).to.have.property(\"roleId\");",
									"    pm.expect(invitation).to.have.property(\"email\");",
									"    pm.expect(invitation.userId).to.be.eql(null);",
									"    pm.expect(invitation.email).to.be.eql(\"user-test@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user3@taiga.demo\",\n      \"roleSlug\": \"admin\"\n    },\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A auth.token (user1000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save project slug in environment\", function () {",
									"    res = pm.response.json();",
									"    // searching for p48",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == true & ws.name.includes('uk1-ws-mb')) {",
									"            for (var pj of ws.latestProjects) {",
									"                if (pj.name.includes('p48')) {",
									"                    pm.environment.set(\"pj-slug\", pj.slug);",
									"                    break;",
									"                }",
									"            }",
									"        }   ",
									"    }    ",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A auth.token (user1001)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1001\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 projects.{p}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"forbidden-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Forbidden\");",
									"    pm.expect(jsonData.error.message).to.include(\"User doesn't have permissions to perform this action\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.workspace_member_permissions",
			"item": [
				{
					"name": "N/A auth.token (user1000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save projects slugs in environment\", function () {",
									"    res = pm.response.json();",
									"    // store a premium project containing latestProjects",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == true) {",
									"            pm.environment.set(\"pj-slug\", ws.latestProjects[0].slug);",
									"            break;",
									"        }   ",
									"    }",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_us');",
									"    pm.expect(jsonRes).to.include('modify_us');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\",\n        \"modify_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_us');",
									"    pm.expect(jsonRes).to.include('modify_us');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// NOTE: This test simply undo the previous changes"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A auth.token (user1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save projects slugs in environment\", function () {",
									"    res = pm.response.json();",
									"    // store a not-premium project containing latestProjects",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == false) {",
									"            pm.environment.set(\"pj-slug\", ws.latestProjects[0].slug);",
									"            break;",
									"        }   ",
									"    }    ",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// WARNING: THIS TEST MAY FAIL DUE TO IT'S NOT VERIFIED THE USER IS A PJ-ADMIN",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Bad Request\");",
									"    pm.expect(jsonData.error.message).to.eql(\"The workspace is not a premium one, so these perms cannot be seen\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// WARNING: THIS TEST MAY FAIL DUE TO IT'S NOT VERIFIED THE USER IS A PJ-ADMIN",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Bad Request\");",
									"    pm.expect(jsonData.error.message).to.eql(\"The workspace is not a premium one, so these perms cannot be set\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_us\",\n        \"modify_us\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "my",
			"item": [
				{
					"name": "N/A auth as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    var someWsHaveLatestProjects = false;",
									"    var someWsHaveNoLatestProjects = false;",
									"    for (const [i, ws] of jsonRes.entries()) {",
									"        ",
									"        // just entered once (by the first workspace with latestProjects)",
									"        if (!someWsHaveLatestProjects && ws.latestProjects.length >0) {",
									"            someWsHaveLatestProjects = true;",
									"            pm.expect(ws.totalProjects).to.be.above(0);",
									"            pm.expect(ws.hasProjects).to.be.true;",
									"            ",
									"            // expect latestProjects to contain the right fields",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logo\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logoSmall\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logoBig\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"name\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"slug\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"description\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"color\");",
									"",
									"            // Validate we're not returning more fields than expected",
									"            var numOfReturnedFields = Object.keys(ws).length;",
									"            pm.expect(numOfReturnedFields).to.equal(9);",
									"            numOfReturnedFields = Object.keys(ws.latestProjects[0]).length;",
									"            pm.expect(numOfReturnedFields).to.equal(7);",
									"        }",
									"        // just entered once (by the first workspace with no latestProjects)",
									"        if (!someWsHaveNoLatestProjects && ws.latestProjects.length ==0) {",
									"            someWsHaveNoLatestProjects = true;",
									"            pm.expect(ws.totalProjects).to.be.eql(0);",
									"        }",
									"        // expect workspaces to contain the right fields",
									"        if (i == 0) {",
									"            pm.expect(ws).to.have.property(\"name\");",
									"            pm.expect(ws).to.have.property(\"slug\");",
									"            pm.expect(ws).to.have.property(\"color\");",
									"            pm.expect(ws).to.have.property(\"latestProjects\");",
									"            pm.expect(ws).to.have.property(\"totalProjects\");",
									"            pm.expect(ws).to.have.property(\"hasProjects\");",
									"            pm.expect(ws).to.have.property(\"myRole\");",
									"            pm.expect(ws).to.have.property(\"isPremium\");",
									"            pm.expect(ws).to.have.property(\"isOwner\");",
									"        }",
									"    };",
									"    pm.expect(someWsHaveLatestProjects).to.be.true;",
									"    pm.expect(someWsHaveNoLatestProjects).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    var firstContact = jsonRes[0]",
									"    pm.expect(firstContact).to.have.property(\"username\");",
									"    pm.expect(firstContact).to.have.property(\"fullName\");",
									"    pm.expect(firstContact).to.have.property(\"email\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"emails\": [\"EMAIL@email.com\", \"email2@email.com\", \"user1000@taiga.demo\", \"user1001@taiga.demo\", \"user1@taiga.demo\", \"email5@email.com\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/contacts",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"contacts"
							],
							"query": [
								{
									"key": "emails",
									"value": "user1001@taiga.demo",
									"disabled": true
								},
								{
									"key": "emails",
									"value": "user1000@taiga.demo",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "errors (main)",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 bad-request-error perm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Bad Request\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"wrong_permission\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 authorization-error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"authorization-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Unauthorized\");",
									"    ",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrong_password\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 forbidden perm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"forbidden-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Forbidden\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"wrong_permission\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 not-found pj",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Not Found\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/wrong_pj_slug",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"wrong_pj_slug"
							]
						}
					},
					"response": []
				},
				{
					"name": "422 validation-error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"validation-error\");",
									"    pm.expect(jsonData.error.detail[0].loc[1]).to.eql(\"password\");",
									"    pm.expect(jsonData.error.detail[0].msg).to.eql(\"field required\");",
									"    pm.expect(jsonData.error.detail[0].type).to.eql(\"value_error.missing\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"passXXXXXXXXXXXXXXXword\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 bad-request-error invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"Bad Request\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"non-existing-role-slug\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "422 validation-error pj invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"validation-error\");",
									"    pm.expect(jsonData.error.detail[0].loc[3]).to.eql(\"roleSlug\");",
									"    pm.expect(jsonData.error.detail[0].msg).to.eql(\"Empty field is not allowed\");",
									"    pm.expect(jsonData.error.detail[0].type).to.eql(\"assertion_error\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-slug}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-slug}}",
								"invitations"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}